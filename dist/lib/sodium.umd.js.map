{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 870e9c8f2554f3982344","webpack:///./src/lib/Sodium.ts","webpack:///./src/lib/Lambda.ts","webpack:///./src/lib/Vertex.ts","webpack:///./src/lib/Stream.ts","webpack:///./src/lib/Transaction.ts","webpack:///./~/typescript-collections/dist/lib/index.js","webpack:///./~/typescript-collections/dist/lib/arrays.js","webpack:///./~/typescript-collections/dist/lib/util.js","webpack:///./~/typescript-collections/dist/lib/Bag.js","webpack:///./~/typescript-collections/dist/lib/Dictionary.js","webpack:///./~/typescript-collections/dist/lib/Set.js","webpack:///./~/typescript-collections/dist/lib/BSTree.js","webpack:///./~/typescript-collections/dist/lib/Queue.js","webpack:///./~/typescript-collections/dist/lib/LinkedList.js","webpack:///./~/typescript-collections/dist/lib/Heap.js","webpack:///./~/typescript-collections/dist/lib/LinkedDictionary.js","webpack:///./~/typescript-collections/dist/lib/MultiDictionary.js","webpack:///./~/typescript-collections/dist/lib/PriorityQueue.js","webpack:///./~/typescript-collections/dist/lib/Stack.js","webpack:///./src/lib/CoalesceHandler.ts","webpack:///./src/lib/Cell.ts","webpack:///./src/lib/Lazy.ts","webpack:///./src/lib/Operational.ts","webpack:///./src/lib/Unit.ts","webpack:///./src/lib/Listener.ts","webpack:///./src/lib/LazyCell.ts","webpack:///./src/lib/StreamSink.ts","webpack:///./src/lib/CellLoop.ts","webpack:///./src/lib/CellSink.ts","webpack:///./src/lib/Tuple2.ts","webpack:///./src/lib/TimerSystem.ts","webpack:///./src/lib/SecondsTimerSystem.ts","webpack:///./src/lib/MillisecondsTimerSystem.ts","webpack:///./src/lib/IOAction.ts"],"names":[],"mappings":"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AAC,CAAC,CAAC;SACX,CACA;SAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CACX,CAAC;aACC,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,CACtB,CAAC;iBACC,WAAW,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;iBACvC,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC;aACxC,CAAC;aACD,MAAM,GAAG,CAAC;SACZ,CAAC;KACH,CAAC;KApLa,8BAAkB,GAAgB,IAAI,CAAC;KACtC,wBAAY,GAAmB,EAAE,CAAC;KAClC,+BAAmB,GAAY,KAAK,CAAC;KAmLtD,kBAAC;AAAD,EAAC;AAvLY,oBAAW,cAuLvB;;;;;;;AC9MD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,OAAO;AAClB,YAAW,iCAAiC;AAC5C;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,OAAO;AAClB,YAAW,iCAAiC;AAC5C;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,6BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,OAAO;AAClB,YAAW,iCAAiC;AAC5C;AACA,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,OAAO;AAClB,YAAW,iCAAiC;AAC5C;AACA,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,YAAW,iCAAiC;AAC5C;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,iCAAiC;AAC5C;AACA,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,aAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,aAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA,sCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;ACvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,OAAO;AACrB,eAAc,QAAQ;AACtB;AACA,gBAAe,QAAQ;AACvB;AACA;AACA,kCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,OAAO;AACrB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,OAAO;AACrB,eAAc,QAAQ;AACtB;AACA,gBAAe,QAAQ;AACvB;AACA;AACA,kCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA,4CAA2C,sBAAsB;AACjE;AACA;AACA;AACA,4BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA,gDAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,uBAAsB;AACtB,gC;;;;;;ACxLA;AACA;AACA;AACA;AACA;AACA,kDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,gBAAe,OAAO;AACtB,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA,UAAS;AACT,4BAA2B;AAC3B;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,8BAA6B;AAC7B,uC;;;;;;AChLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,gBAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,gBAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,gBAAe,gBAAgB;AAC/B,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,uBAAsB;AACtB,gC;;;;;;ACxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,gCAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvcAAc;AAC5D;AACA,mC;;;;;;AC/YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,iCAAiC;AAChD;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ,kDAAkD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,yBAAwB;AACxB,kC;;;;;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,OAAO;AACrB,eAAc,QAAQ;AACtB;AACA,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,iCAAiC;AAChD;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,OAAO;AACxB,kBAAiB,iCAAiC;AAClD;AACA,mBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,WAAW;AAC1B,gBAAe,iCAAiC;AAChD;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,8BAA6B;AAC7B,uC;;;;;;ACzXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,gCAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D;AACA,iC;;;;;;AClOA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,gBAAe,OAAO;AACtB,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,oCAAmC;AACnC;AACA;AACA;AACA,eAAc,uBAAuB;AACrC,eAAc,iCAAiC;AAC/C;AACA,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6C;;;;;;ACzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,yBAAyB;AACxC;AACA;AACA;AACA,gBAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;AACA,+CAA8C,8BAA8B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,OAAO;AACrB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,gBAAe,QAAQ;AACvB;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA,4CAA2C,sBAAsB;AACjE;AACA,sCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,mCAAkC;AAClC,4C;;;;;;ACxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,gCAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ,2DAA2D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D,iCAAgC;AAChC,0C;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,iCAAiC;AAChD;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ,kDAAkD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,mBAAm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","file":"sodium.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Sodium\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sodium\"] = factory();\n\telse\n\t\troot[\"Sodium\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 870e9c8f2554f3982344","export { lambda1, lambda2, lambda3, lambda4, lambda5, lambda6 } from \"./Lambda\";\nexport { Stream, StreamLoop } from \"./Stream\";\nexport { StreamSink } from \"./StreamSink\";\nexport { Cell } from \"./Cell\";\nexport { CellLoop } from \"./CellLoop\";\nexport { CellSink } from \"./CellSink\";\nexport { Transaction } from \"./Transaction\";\nexport { Tuple2 } from \"./Tuple2\";\nexport { Unit } from \"./Unit\";\nexport { Operational } from \"./Operational\";\nexport { getTotalRegistrations, Vertex } from \"./Vertex\";\nexport { TimerSystemImpl, TimerSystem } from \"./TimerSystem\";\nexport { SecondsTimerSystem } from \"./SecondsTimerSystem\";\nexport { MillisecondsTimerSystem } from \"./MillisecondsTimerSystem\";\nexport { IOAction } from \"./IOAction\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Sodium.ts","import { Stream } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Source } from \"./Vertex\";\n\nexport class Lambda1<A,B> {\n    constructor(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A) => B;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda1<A,B>(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda1<A,B>\n{\n    return new Lambda1(f, deps);\n}\n\nexport function Lambda1_deps<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda1)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda1_toFunction<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : (a : A) => B {\n    if (f instanceof Lambda1)\n        return f.f;\n    else\n        return <(a : A) => B>f;\n}\n\nexport class Lambda2<A,B,C> {\n    constructor(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B) => C;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda2<A,B,C>(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda2<A,B,C>\n{\n    return new Lambda2(f, deps);\n}\n\nexport function Lambda2_deps<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda2)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda2_toFunction<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : (a : A, b : B) => C {\n    if (f instanceof Lambda2)\n        return f.f;\n    else\n        return <(a : A, b : B) => C>f;\n}\n\nexport class Lambda3<A,B,C,D> {\n    constructor(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C) => D;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda3<A,B,C,D>(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda3<A,B,C,D>\n{\n    return new Lambda3(f, deps);\n}\n\nexport function Lambda3_deps<A,B,C,D>(f : ((a : A, b : B, c : C) => D)\n        | Lambda3<A,B,C,D>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda3)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda3_toFunction<A,B,C,D>(f : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : (a : A, b : B, c : C) => D {\n    if (f instanceof Lambda3)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C) => D>f;\n}\n\nexport class Lambda4<A,B,C,D,E> {\n    constructor(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D) => E;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda4<A,B,C,D,E>(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda4<A,B,C,D,E>\n{\n    return new Lambda4(f, deps);\n}\n\nexport function Lambda4_deps<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda4)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda4_toFunction<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : (a : A, b : B, c : C, d : D) => E {\n    if (f instanceof Lambda4)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D) => E>f;\n}\n\nexport class Lambda5<A,B,C,D,E,F> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E) => F;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda5<A,B,C,D,E,F>(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda5<A,B,C,D,E,F>\n{\n    return new Lambda5(f, deps);\n}\n\nexport function Lambda5_deps<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda5)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda5_toFunction<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : (a : A, b : B, c : C, d : D, e : E) => F {\n    if (f instanceof Lambda5)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E) => F>f;\n}\n\nexport class Lambda6<A,B,C,D,E,F,G> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E, f : F) => G;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda6<A,B,C,D,E,F,G>(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda6<A,B,C,D,E,F,G>\n{\n    return new Lambda6(f, deps);\n}\n\nexport function Lambda6_deps<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda6)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda6_toFunction<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : (a : A, b : B, c : C, d : D, e : E, f : F) => G {\n    if (f instanceof Lambda6)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E, f : F) => G>f;\n}\n\nexport function toSources(deps : Array<Stream<any>|Cell<any>>) : Source[] {\n    const ss : Source[] = [];\n    for (let i = 0; i < deps.length; i++) {\n        const dep = deps[i];\n        ss.push(new Source(dep.getVertex__(), null));\n    }\n    return ss;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Lambda.ts","import { Set } from \"typescript-collections\";\n\nlet totalRegistrations : number = 0;\nexport function getTotalRegistrations() : number {\n    return totalRegistrations;\n}\n\nexport class Source {\n    constructor(\n        origin : Vertex,\n        register_ : () => () => void\n    ) {\n        if (origin === null)\n            throw new Error(\"null origin!\");\n        this.origin = origin;\n        this.register_ = register_;\n    }\n    origin : Vertex;\n    private register_ : () => () => void;\n    private registered : boolean = false;\n    private deregister_ : () => void = null;\n\n    register(target : Vertex) : void {\n        if (!this.registered) {\n            this.registered = true;\n            if (this.register_ !== null)\n                this.deregister_ = this.register_();\n            else {\n                this.origin.increment(target);\n                this.deregister_ = () => this.origin.decrement(target);\n            }\n        }\n    }\n    deregister(target : Vertex) : void {\n        if (this.registered) {\n            this.registered = false;\n            if (this.deregister_ !== null)\n                this.deregister_();\n        }\n    }\n}\n\nexport enum Color { black, gray, white, purple };\nlet roots : Vertex[] = [];\nlet nextID : number = 0;\nlet verbose : boolean = false;\n\nexport function setVerbose(v : boolean) : void { verbose = v; }\n\nexport function describeAll(v : Vertex, visited : Set<number>)\n{\n    if (visited.contains(v.id)) return;\n    console.log(v.descr());\n    visited.add(v.id);\n    let chs = v.children();\n    for (let i = 0; i < chs.length; i++)\n        describeAll(chs[i], visited);\n}\n\nexport class Vertex {\n    static NULL : Vertex = new Vertex(\"user\", 1e12, []);\n    id : number;\n\n\tconstructor(name : string, rank : number, sources : Source[]) {\n\t    this.name = name;\n\t\tthis.rank = rank;\n\t\tthis.sources = sources;\n\t\tthis.id = nextID++;\n\t}\n\tname : string;\n    rank : number;\n    sources : Source[];\n    targets : Vertex[] = [];\n    childrn : Vertex[] = [];\n    refCount() : number { return this.targets.length; };\n    visited : boolean = false;\n    register(target : Vertex) : boolean {\n        return this.increment(target);\n    }\n    deregister(target : Vertex) : void {\n        if (verbose)\n            console.log(\"deregister \"+this.descr()+\" => \"+target.descr());\n        this.decrement(target);\n        Vertex.collectCycles();\n    }\n    private incRefCount(target : Vertex) : boolean {\n        let anyChanged : boolean = false;\n        if (this.refCount() == 0) {\n            for (let i = 0; i < this.sources.length; i++)\n                this.sources[i].register(this);\n        }\n        this.targets.push(target);\n        target.childrn.push(this);\n        if (target.ensureBiggerThan(this.rank))\n            anyChanged = true;\n        totalRegistrations++;\n        return anyChanged;\n    }\n\n    private decRefCount(target : Vertex) : void {\n        if (verbose)\n            console.log(\"DEC \"+this.descr());\n        let matched = false;\n        for (let i = 0; i < target.childrn.length; i++)\n            if (target.childrn[i] === this) {\n                target.childrn.splice(i, 1);\n            }\n        for (let i = 0; i < this.targets.length; i++)\n            if (this.targets[i] === target) {\n                this.targets.splice(i, 1);\n                matched = true;\n                break;\n            }\n        if (matched) {\n            if (this.refCount() == 0) {\n                for (let i = 0; i < this.sources.length; i++)\n                    this.sources[i].deregister(this);\n            }\n            totalRegistrations--;\n        }\n    }\n\n    addSource(src : Source) : void {\n        this.sources.push(src);\n        if (this.refCount() > 0)\n            src.register(this);\n    }\n\n\tprivate ensureBiggerThan(limit : number) : boolean {\n\t\tif (this.rank > limit || this.visited)\n\t\t\treturn false;\n\n        this.visited = true;\n\t\tthis.rank = limit + 1;\n\t\tfor (let i = 0; i < this.targets.length; i++)\n\t\t\tthis.targets[i].ensureBiggerThan(this.rank);\n        this.visited = false;\n\t\treturn true;\n\t}\n\n\tdescr() : string {\n        let colStr : string = null;\n        switch (this.color) {\n        case Color.black: colStr = \"black\"; break;\n        case Color.gray:  colStr = \"gray\"; break;\n        case Color.white: colStr = \"white\"; break;\n        case Color.purple: colStr = \"purple\"; break;\n        }\n        let str = this.id+\" \"+this.name+\" [\"+this.refCount()+\"/\"+this.refCountAdj+\"] \"+colStr+\" ->\";\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            str = str + \" \" + chs[i].id;\n        }\n        return str;\n\t}\n\n\t// --------------------------------------------------------\n\t// Synchronous Cycle Collection algorithm presented in \"Concurrent\n\t// Cycle Collection in Reference Counted Systems\" by David F. Bacon\n\t// and V.T. Rajan.\n\n    color : Color = Color.black;\n    buffered : boolean = false;\n    refCountAdj : number = 0;\n\n\tchildren() : Vertex[] { return this.childrn; }\n\n\tincrement(referrer : Vertex) : boolean {\n\t    return this.incRefCount(referrer);\n\t}\n\n\tdecrement(referrer : Vertex) : void {\n\t    this.decRefCount(referrer);\n\t    if (this.refCount() == 0)\n\t        this.release();\n        else\n            this.possibleRoots();\n\t}\n\n    release() : void {\n        this.color = Color.black;\n        if (!this.buffered)\n            this.free();\n    }\n\n    free() : void {\n        while (this.targets.length > 0)\n            this.decRefCount(this.targets[0]);\n    }\n\n\tpossibleRoots() : void {\n\t    if (this.color != Color.purple) {\n\t        this.color = Color.purple;\n\t        if (!this.buffered) {\n                this.buffered = true;\n                roots.push(this);\n            }\n        }\n\t}\n\n\tstatic collectCycles() : void {\n\t    Vertex.markRoots();\n\t    Vertex.scanRoots();\n\t    Vertex.collectRoots();\n\t}\n\n\tstatic markRoots() : void {\n\t    const newRoots : Vertex[] = [];\n\t    for (let i = 0; i < roots.length; i++) {\n            if (verbose)\n                console.log(\"markRoots \"+roots[i].descr());  // ###\n\t        if (roots[i].color == Color.purple) {\n\t            roots[i].markGray();\n\t            newRoots.push(roots[i]);\n            }\n\t        else {\n\t            roots[i].buffered = false;\n\t            if (roots[i].color == Color.black && roots[i].refCount() == 0)\n\t                roots[i].free();\n            }\n\t    }\n\t    roots = newRoots;\n\t}\n\n\tstatic scanRoots() : void {\n\t    for (let i = 0; i < roots.length; i++)\n\t        roots[i].scan();\n\t}\n\n\tstatic collectRoots() : void {\n\t    for (let i = 0; i < roots.length; i++) {\n\t        roots[i].buffered = false;\n\t        roots[i].collectWhite();\n\t    }\n\t    roots = [];\n\t}\n\n\tmarkGray() : void {\n\t    if (this.color != Color.gray) {\n\t        this.color = Color.gray;\n\t        let chs = this.children();\n\t        for (let i = 0; i < chs.length; i++) {\n\t            chs[i].refCountAdj--;\n                if (verbose)\n                    console.log(\"markGray \"+this.descr());\n\t            chs[i].markGray();\n            }\n\t    }\n\t}\n\n\tscan() : void {\n\t    if (verbose)\n            console.log(\"scan \"+this.descr());\n\t    if (this.color == Color.gray) {\n\t        if (this.refCount()+this.refCountAdj > 0)\n\t            this.scanBlack();\n\t        else {\n\t            this.color = Color.white;\n                if (verbose)\n                    console.log(\"scan WHITE \"+this.descr());\n                let chs = this.children();\n                for (let i = 0; i < chs.length; i++)\n                    chs[i].scan();\n\t        }\n\t    }\n\t}\n\n\tscanBlack() : void {\n\t    this.color = Color.black;\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            chs[i].refCountAdj++;\n            if (verbose)\n                console.log(\"scanBlack \"+this.descr());\n            if (chs[i].color != Color.black)\n                chs[i].scanBlack();\n        }\n\t}\n\n\tcollectWhite() : void {\n\t    if (this.color == Color.white && !this.buffered) {\n            if (verbose)\n                console.log(\"collectWhite \"+this.descr());\n\t        this.color = Color.black;\n\t        this.refCountAdj = 0;\n            let chs = this.children();\n            for (let i = 0; i < chs.length; i++)\n                chs[i].collectWhite();\n            this.free();\n\t    }\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Vertex.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Cell } from \"./Cell\";\n//import { StreamLoop } from \"./StreamLoop\";\nimport { Listener } from \"./Listener\";\nimport { Tuple2 } from \"./Tuple2\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\n\nexport class Stream<A> {\n    constructor(vertex? : Vertex) {\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    protected vertex : Vertex;\n    protected listeners : Array<Listener<A>> = [];\n    protected firings : A[] = [];\n\n    /**\n     * Transform the stream's event values according to the supplied function, so the returned\n     * Stream's event values reflect the value of the function applied to the input\n     * Stream's event values.\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"map\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a));\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Transform the stream's event values into the specified constant value.\n     * @param b Constant value.\n     */\n    mapTo<B>(b : B) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"mapTo\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(b);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\n     * in the simultaneous case.\n     * <p>\n     * In the case where two events are simultaneous (i.e. both\n     * within the same transaction), the event from <em>this</em> will take precedence, and\n     * the event from <em>s</em> will be dropped.\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\n     * <p>\n     * The name orElse() is used instead of merge() to make it really clear that care should\n     * be taken, because events can be dropped.\n     */\n    orElse(s : Stream<A>) : Stream<A> {\n        return this.merge(s, (left : A, right: A) => {\n            return left;\n        });\n    }\n\n    private merge_(s : Stream<A>) : Stream<A> {\n        const out = new StreamWithSend<A>();\n        const left = new Vertex(\"merge\", 0, []);\n        left.sources.push(new Source(this.vertex, () => {\n            return this.listen_(left, (a : A) => {\n                    out.send_(a);\n                }, false);\n        }));\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    left,\n                    () => {\n                        left.register(out.vertex);\n                        return () => { left.deregister(out.vertex); }\n                    }\n                ),\n                new Source(\n                    s.vertex,\n                    () => {\n                        return s.listen_(out.vertex, (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                )\n            ]);\n        return out;\n    }\n\n    coalesce__(f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {  // TO DO figure out how to hide this\n        const out = new StreamWithSend<A>();\n        const coalescer = new CoalesceHandler<A>(f, out);\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            coalescer.send_(a);\n                        }, false);\n                    }\n                )\n            ]).concat(toSources(Lambda2_deps(f)));\n        return out;\n    }\n\n    /**\n     * Merge two streams of the same type into one, so that events on either input appear\n     * on the returned stream.\n     * <p>\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\n     * occurring in the same transaction), combine them into one using the specified combining function\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\n     * The event from <em>this</em> will appear at the left input of the combining function, and\n     * the event from <em>s</em> will appear at the right.\n     * @param f Function to combine the values. It may construct FRP logic or use\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    merge(s : Stream<A>, f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {\n        return Transaction.transactionally<Stream<A>>(() => {\n            return this.merge_(s).coalesce__(f);\n        });\n    }\n\n    /**\n     * Return a stream that only outputs events for which the predicate returns true.\n     */\n    filter(f : ((a : A) => boolean) | Lambda1<A,boolean>) : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"filter\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (ff(a))\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events that have present\n     * values, discarding null values.\n     */\n    filterNotNull() : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (a !== null)\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events from the input stream\n     * when the specified cell's value is true.\n     */\n    gate(c : Cell<boolean>) : Stream<A> {\n        return this.snapshot(c, (a : A, pred : boolean) => {\n            return pred ? a : null;\n        }).filterNotNull();\n    }\n\n\t/**\n\t * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\n\t * at the time of the event firing, ignoring the stream's value.\n\t */\n\tsnapshot1<B>(c : Cell<B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"snapshot1\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(c.sampleNoTrans__());\n                        }, false);\n                    }\n                ),\n                new Source(c.getVertex__(), null)\n            ]\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cell at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot<B,C>(c : Cell<B>, f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Stream<C>\n\t{\n        const out = new StreamWithSend<C>(null);\n        const ff = Lambda2_toFunction(f);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, c.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(c.getVertex__(), null)\n            ].concat(toSources(Lambda2_deps(f)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Create a {@link Cell} with the specified initial value, that is updated\n     * by this stream's event values.\n     * <p>\n     * There is an implicit delay: State updates caused by event firings don't become\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\n     * until the following transaction. To put this another way,\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\n     * any state changes from the current transaction.\n     */\n    hold(initValue : A) : Cell<A> {\n        return new Cell<A>(initValue, this);\n\t}\n\n\t/**\n\t * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\n\t */\n\tholdLazy(initValue : Lazy<A>) : Cell<A> {\n\t    return new LazyCell<A>(initValue, this);\n\t}\n\n    /**\n     * Transform an event with a generalized state loop (a Mealy machine). The function\n     * is passed the input and the old state and returns the new state and output value.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    collect<B,S>(initState : S, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        return this.collectLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    collectLazy<B,S>(initState : Lazy<S>, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        const ea = this;\n        return Transaction.transactionally(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                ebs = ea.snapshot(s, f),\n                eb = ebs.map((bs : Tuple2<B,S>) => { return bs.a; }),\n                es_out = ebs.map((bs : Tuple2<B,S>) => { return bs.b; });\n            es.loop(es_out);\n            return eb;\n        });\n    }\n\n    /**\n     * Accumulate on input event, outputting the new state each time.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    accum<S>(initState : S, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        return this.accumLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    accumLazy<S>(initState : Lazy<S>, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        const ea = this;\n        return Transaction.transactionally(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                es_out = ea.snapshot(s, f);\n            es.loop(es_out);\n            return es_out.holdLazy(initState);\n        });\n    }\n\n    /**\n     * Return a stream that outputs only one value: the next event of the\n     * input stream, starting from the transaction in which once() was invoked.\n     */\n    once() : Stream<A> {\n    /*\n        return Transaction.transactionally(() => {\n            const ev = this,\n                out = new StreamWithSend<A>();\n            let la : () => void = null;\n            la = ev.listen_(out.vertex, (a : A) => {\n                if (la !== null) {\n                    out.send_(a);\n                    la();\n                    la = null;\n                }\n            }, false);\n            return out;\n        });\n        */\n        // We can't use the implementation above, beacuse deregistering\n        // listeners triggers the exception\n        // \"send() was invoked before listeners were registered\"\n        // We can revisit this another time. For now we will use the less\n        // efficient implementation below.\n        const me = this;\n        return Transaction.transactionally(() => me.gate(me.mapTo(false).hold(true)));\n    }\n\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.transactionally<() => void>(() => {\n            return this.listen_(Vertex.NULL, h, false);\n        });\n    }\n\n    listen_(target : Vertex,\n            h : (a : A) => void,\n            suppressEarlierFirings : boolean) : () => void {\n        if (this.vertex.register(target))\n            Transaction.currentTransaction.requestRegen();\n        const listener = new Listener<A>(h, target);\n        this.listeners.push(listener);\n        if (!suppressEarlierFirings && this.firings.length != 0) {\n            const firings = this.firings.slice();\n            Transaction.currentTransaction.prioritized(target, () => {\n                // Anything sent already in this transaction must be sent now so that\n                // there's no order dependency between send and listen.\n                for (let i = 0; i < firings.length; i++)\n                    h(firings[i]);\n            });\n        }\n        return () => {\n            let removed = false;\n            for (let i = 0; i < this.listeners.length; i++) {\n                if (this.listeners[i] == listener) {\n                    this.listeners.splice(i, 1);\n                    removed = true;\n                    break;\n                }\n            }\n            if (removed)\n                this.vertex.deregister(target);\n        };\n    }\n}\n\nexport class StreamWithSend<A> extends Stream<A> {\n    constructor(vertex? : Vertex) {\n        super(vertex);\n    }\n\n    setVertex__(vertex : Vertex) {  // TO DO figure out how to hide this\n        this.vertex = vertex;\n    }\n\n    send_(a : A) : void {\n        // We throw this error if we send into FRP logic that has been constructed\n        // but nothing is listening to it yet. We need to do it this way because\n        // it's the only way to manage memory in a language with no finalizers.\n        if (this.vertex.refCount() == 0)\n            throw new Error(\"send() was invoked before listeners were registered\");\n\t\tif (this.firings.length == 0)\n\t\t\tTransaction.currentTransaction.last(() => {\n\t\t\t    this.firings = [];\n            });\n\t\tthis.firings.push(a);\n\t\tconst listeners = this.listeners.slice();\n        for (let i = 0; i < listeners.length; i++) {\n            const h = listeners[i].h;\n            Transaction.currentTransaction.prioritized(listeners[i].target, () => {\n                Transaction.currentTransaction.inCallback++;\n                try {\n                    h(a);\n                    Transaction.currentTransaction.inCallback--;\n                }\n                catch (err) {\n                    Transaction.currentTransaction.inCallback--;\n                    throw err;\n                }\n            });\n        }\n    }\n}\n\n/**\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\n */\nexport class StreamLoop<A> extends StreamWithSend<A> {\n    assigned__ : boolean = false;  // to do: Figure out how to hide this\n\n    constructor()\n    {\n        super();\n        this.vertex.name = \"StreamLoop\";\n    \tif (Transaction.currentTransaction === null)\n    \t    throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\n    }\n\n    /**\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(sa_out : Stream<A>) : void {\n        if (this.assigned__)\n            throw new Error(\"StreamLoop looped more than once\");\n        this.assigned__ = true;\n        this.vertex.addSource(\n            new Source(\n                sa_out.getVertex__(),\n                () => {\n                    return sa_out.listen_(this.vertex, (a : A) => {\n                        this.send_(a);\n                    }, false);\n                }\n            )\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Stream.ts","import {Vertex} from './Vertex';\nimport {Set, PriorityQueue} from 'typescript-collections';\n\nexport class Entry\n{\n  constructor(rank: Vertex, action: () => void)\n  {\n    this.rank = rank;\n    this.action = action;\n    this.seq = Entry.nextSeq++;\n  }\n\n  private static nextSeq: number = 0;\n  rank: Vertex;\n  action: () => void;\n  seq: number;\n\n  toString(): string\n  {\n    return this.seq.toString();\n  }\n}\n\nexport class Transaction\n{\n  public static currentTransaction: Transaction = null;\n  private static onStartHooks: (() => void)[] = [];\n  private static runningOnStartHooks: boolean = false;\n\n  constructor() {}\n\n  inCallback: number = 0;\n  private toRegen: boolean = false;\n\n  requestRegen(): void\n  {\n    this.toRegen = true;\n  }\n\n  prioritizedQ: PriorityQueue<Entry> = new PriorityQueue<Entry>((a, b) =>\n  {\n    // Note: Low priority numbers are treated as \"greater\" according to this\n    // comparison, so that the lowest numbers are highest priority and go first.\n    if (a.rank.rank < b.rank.rank) return 1;\n    if (a.rank.rank > b.rank.rank) return -1;\n    if (a.seq < b.seq) return 1;\n    if (a.seq > b.seq) return -1;\n    return 0;\n  });\n  private entries: Set<Entry> = new Set<Entry>((a) => a.toString());\n  private lastQ: Array<() => void> = [];\n  private postQ: Array<() => void> = null;\n\n  prioritized(target: Vertex, f: () => void): void\n  {\n    const e = new Entry(target, f);\n    this.prioritizedQ.enqueue(e);\n    this.entries.add(e);\n  }\n\n  last(h: () => void): void\n  {\n    this.lastQ.push(h);\n  }\n\n  /**\n   * Add an action to run after all last() actions.\n   */\n  post(childIx: number, action: () => void): void\n  {\n    if (this.postQ == null)\n      this.postQ = [];\n    // If an entry exists already, combine the old one with the new one.\n    while (this.postQ.length <= childIx)\n      this.postQ.push(null);\n    const existing = this.postQ[childIx],\n      neu =\n        existing === null ? action\n          : () =>\n        {\n          existing();\n          action();\n        };\n    this.postQ[childIx] = neu;\n  }\n\n  // If the priority queue has entries in it when we modify any of the nodes'\n  // ranks, then we need to re-generate it to make sure it's up-to-date.\n  private checkRegen(): void\n  {\n    if (this.toRegen)\n    {\n      this.toRegen = false;\n      this.prioritizedQ.clear();\n      const es = this.entries.toArray();\n      for (let i: number = 0; i < es.length; i++)\n        this.prioritizedQ.enqueue(es[i]);\n    }\n  }\n\n  close(): void\n  {\n    while (true)\n    {\n      this.checkRegen();\n      if (this.prioritizedQ.isEmpty()) break;\n      const e = this.prioritizedQ.dequeue();\n      this.entries.remove(e);\n      e.action();\n    }\n    for (let i = 0; i < this.lastQ.length; i++)\n      this.lastQ[i]();\n    this.lastQ = [];\n    if (this.postQ != null)\n    {\n      for (let i = 0; i < this.postQ.length; i++)\n      {\n        if (this.postQ[i] != null)\n        {\n          const parent = Transaction.currentTransaction;\n          try\n          {\n            if (i > 0)\n            {\n              Transaction.currentTransaction = new Transaction();\n              try\n              {\n                this.postQ[i]();\n                Transaction.currentTransaction.close();\n              }\n              catch (err)\n              {\n                Transaction.currentTransaction.close();\n                throw err;\n              }\n            }\n            else\n            {\n              Transaction.currentTransaction = null;\n              this.postQ[i]();\n            }\n            Transaction.currentTransaction = parent;\n          }\n          catch (err)\n          {\n            Transaction.currentTransaction = parent;\n            throw err;\n          }\n        }\n      }\n      this.postQ = null;\n    }\n  }\n\n  /**\n   * Add a runnable that will be executed whenever a transaction is started.\n   * That runnable may start transactions itself, which will not cause the\n   * hooks to be run recursively.\n   *\n   * The main use case of this is the implementation of a time/alarm system.\n   */\n  static onStart(r: () => void): void\n  {\n    Transaction.onStartHooks.push(r);\n  }\n\n  public static transactionally<A>(f: () => A): A\n  {\n    const transWas: Transaction = Transaction.currentTransaction;\n    if (transWas === null)\n    {\n      if (!Transaction.runningOnStartHooks)\n      {\n        Transaction.runningOnStartHooks = true;\n        try\n        {\n          for (let i = 0; i < Transaction.onStartHooks.length; i++)\n            Transaction.onStartHooks[i]();\n        }\n        finally\n        {\n          Transaction.runningOnStartHooks = false;\n        }\n      }\n      Transaction.currentTransaction = new Transaction();\n    }\n    try\n    {\n      const a: A = f();\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      return a;\n    }\n    catch (err)\n    {\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      throw err;\n    }\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Transaction.ts","\"use strict\";\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require('./arrays');\nexports.arrays = _arrays;\nvar Bag_1 = require('./Bag');\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require('./BSTree');\nexports.BSTree = BSTree_1.default;\nvar Dictionary_1 = require('./Dictionary');\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require('./Heap');\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require('./LinkedDictionary');\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require('./LinkedList');\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require('./MultiDictionary');\nexports.MultiDictionary = MultiDictionary_1.default;\nvar Queue_1 = require('./Queue');\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require('./PriorityQueue');\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require('./Set');\nexports.Set = Set_1.default;\nvar Stack_1 = require('./Stack');\nexports.Stack = Stack_1.default;\nvar _util = require('./util');\nexports.util = _util;\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/index.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/arrays.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n* Joins all the properies of the object using the provided join string\n*/\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (!isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/util.js\n// module id = 7\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar Set_1 = require('./Set');\nvar Bag = (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n    * Adds nCopies of the specified object to this bag.\n    * @param {Object} element element to add.\n    * @param {number=} nCopies the number of copies to add, if this argument is\n    * undefined 1 copy is added.\n    * @return {boolean} true unless element is undefined.\n    */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n    * Counts the number of copies of the specified object in this bag.\n    * @param {Object} element the object to search for..\n    * @return {number} the number of copies of the object, 0 if not found\n    */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n    * Removes nCopies of the specified object to this bag.\n    * If the number of copies to remove is greater than the actual number\n    * of copies in the Bag, all copies are removed.\n    * @param {Object} element element to remove.\n    * @param {number=} nCopies the number of copies to remove, if this argument is\n    * undefined 1 copy is removed.\n    * @return {boolean} true if at least 1 element was removed.\n    */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Bag; // End of bag\n//# sourceMappingURL=Bag.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Bag.js\n// module id = 8\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary = (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this dictionary.\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n    * Removes all mappings from this dictionary.\n    * @this {collections.Dictionary}\n    */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Dictionary; // End of dictionary\n//# sourceMappingURL=Dictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Dictionary.js\n// module id = 9\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar Dictionary_1 = require('./Dictionary');\nvar Set = (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives a onject and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersecion between this an another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this an another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this an another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Set; // end of Set\n//# sourceMappingURL=Set.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Set.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Queue_1 = require('./Queue');\nvar BSTree = (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTree(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTree.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTree.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTree.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTree.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTree.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTree.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.minimum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.maximum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTree.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTree.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTree.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.searchNode = function (node, element) {\n        var cmp = null;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        while (!queue.isEmpty()) {\n            node = queue.dequeue();\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.minimumAux = function (node) {\n        while (node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.maximumAux = function (node) {\n        while (node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n      * @private\n      */\n    BSTree.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTree.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        var cmp = null;\n        while (position !== null) {\n            cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTree;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/BSTree.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Queue = (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Queue; // End of queue\n//# sourceMappingURL=Queue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Queue.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar LinkedList = (function () {\n    /**\n    * Creates an empty Linked List.\n    * @class A linked list is a data structure consisting of a group of nodes\n    * which together represent a sequence.\n    * @constructor\n    */\n    function LinkedList() {\n        /**\n        * First node in the list\n        * @type {Object}\n        * @private\n        */\n        this.firstNode = null;\n        /**\n        * Last node in the list\n        * @type {Object}\n        * @private\n        */\n        this.lastNode = null;\n        /**\n        * Number of elements in the list\n        * @type {number}\n        * @private\n        */\n        this.nElements = 0;\n    }\n    /**\n    * Adds an element to this list.\n    * @param {Object} item element to be added.\n    * @param {number=} index optional index to add the element. If no index is specified\n    * the element is added to the end of this list.\n    * @return {boolean} true if the element was added or false if the index is invalid\n    * or if the element is undefined.\n    */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n    * Returns the first element in this list.\n    * @return {*} the first element of the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n    * Returns the last element in this list.\n    * @return {*} the last element in the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n       * Returns true if this list contains the specified element.\n       * <p>If the elements inside the list are\n       * not comparable with the === operator a custom equals function should be\n       * provided to perform searches, the function must receive two arguments and\n       * return true if they are equal, false otherwise. Example:</p>\n       *\n       * <pre>\n       * const petsAreEqualByName = function(pet1, pet2) {\n       *  return pet1.name === pet2.name;\n       * }\n       * </pre>\n       * @param {Object} item element to search for.\n       * @param {function(Object,Object):boolean=} equalsFunction Optional\n       * function used to check if two elements are equal.\n       * @return {boolean} true if this list contains the specified element, false\n       * otherwise.\n       */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (currentNode === this.firstNode) {\n                    this.firstNode = this.firstNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n    * @private\n    */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedList; // End of linked list\n//# sourceMappingURL=LinkedList.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/LinkedList.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar collections = require('./util');\nvar arrays = require('./arrays');\nvar Heap = (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements od the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return undefined;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Heap.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Dictionary_1 = require('./Dictionary');\nvar util = require('./util');\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\nvar LinkedDictionary = (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        _super.call(this, toStrFunction);\n        this.head = new LinkedDictionaryPair(null, null);\n        this.tail = new LinkedDictionaryPair(null, null);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n    * Removes all mappings from this LinkedDictionary.\n    * @this {collections.LinkedDictionary}\n    */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this LinkedDictionary. It is done in the order of insertion\n    * into the LinkedDictionary\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (crawlNode.next != null) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedDictionary; // End of LinkedDictionary\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/LinkedDictionary.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar arrays = require('./arrays');\nvar MultiDictionary = (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n       *  return pet.name;\n       * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n       *  return pet1.age===pet2.age;\n       * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n    * Returns an array holding the values to which this dictionary maps\n    * the specified key.\n    * Returns an empty array if this dictionary contains no mappings for this key.\n    * @param {Object} key key whose associated values are to be returned.\n    * @return {Array} an array holding the values to which this dictionary maps\n    * the specified key.\n    */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        if (!this.containsKey(key)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        var array = this.dict.getValue(key);\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MultiDictionary; // end of multi dictionary\n//# sourceMappingURL=MultiDictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/MultiDictionary.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Heap_1 = require('./Heap');\nvar PriorityQueue = (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = PriorityQueue; // end of priority queue\n//# sourceMappingURL=PriorityQueue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/PriorityQueue.js\n// module id = 17\n// module chunks = 0","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Stack = (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Stack; // End of stack\n//# sourceMappingURL=Stack.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Stack.js\n// module id = 18\n// module chunks = 0","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         toSources } from \"./Lambda\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamWithSend } from \"./Stream\";\nimport { Vertex } from \"./Vertex\";\n\nexport class CoalesceHandler<A>\n{\n\tconstructor(f : ((l : A, r : A) => A) | Lambda2<A,A,A>, out : StreamWithSend<A>)\n\t{\n\t    this.f = Lambda2_toFunction(f);\n\t    this.out = out;\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(\n            toSources(Lambda2_deps(f)));\n        this.accumValid = false;\n    }\n\tprivate f : (l : A, r : A) => A;\n\tprivate out : StreamWithSend<A>;\n\tprivate accumValid : boolean;\n    private accum : A;\n    private verbose : boolean;\n    send_(a : A) {\n        if (this.accumValid)\n            this.accum = this.f(this.accum, a);\n        else {\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), () => {\n                this.out.send_(this.accum);\n                this.accumValid = false;\n                this.accum = null;\n            });\n            this.accum = a;\n            this.accumValid = true;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CoalesceHandler.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { Lazy } from \"./Lazy\";\nimport { Listener } from \"./Listener\";\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { Operational } from \"./Operational\";\n\nclass LazySample<A> {\n    constructor(cell : Cell<A>) {\n        this.cell = cell;\n    }\n    cell : Cell<A>;\n    hasValue : boolean = false;\n    value : A = null;\n}\n\nclass ApplyState<A,B> {\n    constructor() {}\n    f : (a : A) => B = null;\n    f_present : boolean = false;\n    a : A = null;\n    a_present : boolean = false;\n}\n\nexport class Cell<A> {\n\tprivate str : Stream<A>;\n\tprotected value : A;\n\tprotected valueUpdate : A;\n\tprivate cleanup : () => void;\n\tprotected lazyInitValue : Lazy<A>;  // Used by LazyCell\n\tprivate vertex : Vertex;\n\n    constructor(initValue : A, str? : Stream<A>) {\n        this.value = initValue;\n        if (!str) {\n            this.str = new Stream<A>();\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\n        }\n        else\n            Transaction.transactionally(() => this.setStream(str));\n    }\n\n    protected setStream(str : Stream<A>) {\n        this.str = str;\n        const me = this,\n              src = new Source(\n                str.getVertex__(),\n                () => {\n                    return str.listen_(me.vertex, (a : A) => {\n                        if (me.valueUpdate == null) {\n                            Transaction.currentTransaction.last(() => {\n                                me.value = me.valueUpdate;\n                                me.lazyInitValue = null;\n                                me.valueUpdate = null;\n                            });\n                        }\n                        me.valueUpdate = a;\n                    }, false);\n                }\n            );\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\n        // We do a trick here of registering the source for the duration of the current\n        // transaction so that we are guaranteed to catch any stream events that\n        // occur in the same transaction.\n        this.vertex.register(Vertex.NULL);\n        Transaction.currentTransaction.last(() => {\n            this.vertex.deregister(Vertex.NULL);\n        });\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    getStream__() : Stream<A> {  // TO DO: Figure out how to hide this\n        return this.str;\n    }\n\n    /**\n     * Sample the cell's current value.\n     * <p>\n     * It may be used inside the functions passed to primitives that apply them to {@link Stream}s,\n     * including {@link Stream#map(Lambda1)} in which case it is equivalent to snapshotting the cell,\n     * {@link Stream#snapshot(Cell, Lambda2)}, {@link Stream#filter(Lambda1)} and\n     * {@link Stream#merge(Stream, Lambda2)}.\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\n     * miss any updates, but in many circumstances it makes sense.\n     */\n    sample() : A {\n        return Transaction.transactionally(() => { return this.sampleNoTrans__(); });\n    }\n\n    sampleNoTrans__() : A {  // TO DO figure out how to hide this\n        return this.value;\n    }\n\n    /**\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\n     */\n    sampleLazy() : Lazy<A> {\n        const me = this;\n        return Transaction.transactionally(() => me.sampleLazyNoTrans__());\n    }\n\n    sampleLazyNoTrans__() : Lazy<A> {  // TO DO figure out how to hide this\n        const me = this,\n            s = new LazySample<A>(me);\n        Transaction.currentTransaction.last(() => {\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\n            s.hasValue = true;\n            s.cell = null;\n        });\n        return new Lazy<A>(() => {\n            if (s.hasValue)\n                return s.value;\n            else\n                return s.cell.sample();\n        });\n    }\n\n    /**\n     * Transform the cell's value according to the supplied function, so the returned Cell\n     * always reflects the value of the function applied to the input Cell's value.\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Cell<B> {\n        const c = this;\n        return Transaction.transactionally(() =>\n            Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)))\n        );\n    }\n\n\t/**\n\t * Lift a binary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift<B,C>(b : Cell<B>,\n\t          fn0 : ((a : A, b : B) => C) |\n\t                Lambda2<A,B,C>) : Cell<C> {\n        const fn = Lambda2_toFunction(fn0),\n            cf = this.map((aa : A) => (bb : B) => fn(aa, bb));\n        return Cell.apply(cf, b,\n            toSources(Lambda2_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a ternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift3<B,C,D>(b : Cell<B>, c : Cell<C>,\n\t             fn0 : ((a : A, b : B, c : C) => D) |\n\t                   Lambda3<A,B,C,D>) : Cell<D> {\n        const fn = Lambda3_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => D =\n                 (aa : A) => (bb : B) => (cc : C) => fn(aa, bb, cc),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply<B, (c : C) => D>(cf, b),\n                   c,\n                   toSources(Lambda3_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a quaternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\n\t               fn0 : ((a : A, b : B, c : C, d : D) => E) |\n\t                     Lambda4<A,B,C,D,E>) : Cell<E> {\n        const fn = Lambda4_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => E =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => fn(aa, bb, cc, dd),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply<B, (c : C) => (d : D) => E>(cf, b),\n                       c),\n                   d,\n                   toSources(Lambda4_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\n\t                 fn0 : ((a : A, b : B, c : C, d : D, e : E) => F) |\n\t                       Lambda5<A,B,C,D,E,F>) : Cell<F> {\n        const fn = Lambda5_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => F =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => fn(aa, bb, cc, dd, ee),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply<B, (c : C) => (d : D) => (e : E) => F>(cf, b),\n                           c),\n                       d),\n                   e,\n                   toSources(Lambda5_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\n\t                   fn0 : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) |\n\t                         Lambda6<A,B,C,D,E,F,G>) : Cell<G> {\n        const fn = Lambda6_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => G =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => fn(aa, bb, cc, dd, ee, ff),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply(\n                               Cell.apply<B, (c : C) => (d : D) => (e : E) => (f : F) => G>(cf, b),\n                               c),\n                           d),\n                       e),\n                   f,\n                   toSources(Lambda6_deps(fn0)));\n\t}\n\n\t/**\n\t * Apply a value inside a cell to a function inside a cell. This is the\n\t * primitive for all function lifting.\n\t */\n\tstatic apply<A,B>(cf : Cell<(a : A) => B>, ca : Cell<A>, sources? : Source[]) : Cell<B> {\n    \treturn Transaction.transactionally(() => {\n    \t    const state = new ApplyState<A,B>(),\n                out = new StreamWithSend<B>(),\n                cf_value = Operational.value(cf),\n                ca_value = Operational.value(ca),\n                src1 = new Source(\n                        cf_value.getVertex__(),\n                        () => {\n                            return cf_value.listen_(out.getVertex__(), (f : (a : A) => B) => {\n                                state.f = f;\n                                state.f_present = true;\n                                if (state.a_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    ),\n                src2 = new Source(\n                        ca_value.getVertex__(),\n                        () => {\n                            return ca_value.listen_(out.getVertex__(), (a : A) => {\n                                state.a = a;\n                                state.a_present = true;\n                                if (state.f_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    );\n            out.setVertex__(new Vertex(\"apply\", 0,\n                [src1, src2].concat(sources ? sources : [])\n            ));\n            return out.coalesce__((l, r) => r).holdLazy(new Lazy<B>(() =>\n                    cf.sampleNoTrans__()(ca.sampleNoTrans__())\n                ));\n        });\n\t}\n\n\t/**\n\t * Unwrap a cell inside another cell to give a time-varying cell implementation.\n\t */\n    static switchC<A>(cca : Cell<Cell<A>>) : Cell<A> {\n\t    return Transaction.transactionally(() => {\n            const za = cca.sampleLazy().map((ba : Cell<A>) => ba.sample()),\n                out = new StreamWithSend<A>();\n            let last_ca : Cell<A> = null;\n            const cca_value = Operational.value(cca),\n                  src = new Source(\n                        cca_value.getVertex__(),\n                        () => {\n                            let kill2 : () => void = last_ca === null ? null :\n                                    Operational.value(last_ca).listen_(out.getVertex__(),\n                                        (a : A) => out.send_(a), false);\n                            const kill1 = cca_value.listen_(out.getVertex__(), (ca : Cell<A>) => {\n                                // Note: If any switch takes place during a transaction, then the\n                                // coalesce__() below will always cause a sample to be fetched\n                                // from the one we just switched to. So anything from the old input cell\n                                // that might have happened during this transaction will be suppressed.\n                                last_ca = ca;\n                                if (kill2 !== null)\n                                    kill2();\n                                kill2 = Operational.value(ca).listen_(out.getVertex__(),\n                                    (a : A) => out.send_(a), false);\n                            }, false);\n                            return () => { kill1(); kill2(); };\n                        }\n                    );\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\n            return out.coalesce__((l, r) => r).holdLazy(za);\n        });\n\t}\n\n\t/**\n\t * Unwrap a stream inside a cell to give a time-varying stream implementation.\n\t */\n\tstatic switchS<A>(csa : Cell<Stream<A>>) : Stream<A> {\n\t    return Transaction.transactionally(() => {\n            const out = new StreamWithSend<A>(),\n                  h2 = (a : A) => {\n                          out.send_(a);\n                      },\n                  src = new Source(\n                      csa.getVertex__(),\n                      () => {\n                          let kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\n                          const kill1 = csa.getStream__().listen_(out.getVertex__(), (sa : Stream<A>) => {\n                              kill2();\n                              kill2 = sa.listen_(out.getVertex__(), h2, true);\n                          }, false);\n                          return () => { kill1(); kill2(); };\n                      }\n                  );\n\t        out.setVertex__(new Vertex(\"switchS\", 0, [src]));\n\t        return out;\n\t    });\n    }\n\n\t/**\n\t * Listen for updates to the value of this cell. This is the observer pattern. The\n\t * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\n\t * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\n\t * the world of I/O and for FRP.\n\t * @param h The handler to execute when there's a new value.\n\t *   You should make no assumptions about what thread you are called on, and the\n\t *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\n\t *   or {@link StreamSink#send(Object)} in the handler.\n\t *   An exception will be thrown, because you are not meant to use this to create\n\t *   your own primitives.\n     */\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.transactionally(() => {\n            return Operational.value(this).listen(h);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Cell.ts","/**\n * A representation for a value that may not be available until the current\n * transaction is closed.\n */\nexport class Lazy<A> {\n    constructor(f : () => A) {\n        this.f = f;\n    }\n\n    private f : () => A;\n\n    /**\n     * Get the value if available, throwing an exception if not.\n     * In the general case this should only be used in subsequent transactions to\n     * when the Lazy was obtained.\n     */\n    get() : A {\n        return this.f();\n    }\n\n    /**\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\n     * the value of the function applied to the input Lazy's value.\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : (a : A) => B) {\n        return new Lazy<B>(() => { return f(this.f()); });\n    }\n\n\t/**\n\t * Lift a binary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift<B,C>(b : Lazy<B>, f : (a : A, b : B) => C) : Lazy<C> {\n        return new Lazy<C>(() => { return f(this.f(), b.f()); });\n    }\n\n\t/**\n\t * Lift a ternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift3<B,C,D>(b : Lazy<B>, c : Lazy<C>, f : (a : A, b : B, c : C) => D) : Lazy<D> {\n        return new Lazy<D>(() => { return f(this.f(), b.f(), c.f()); });\n    }\n\n\t/**\n\t * Lift a quaternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift4<B,C,D,E>(b : Lazy<B>, c : Lazy<C>, d : Lazy<D>, f : (a : A, b : B, c : C, d : D) => E) : Lazy<E> {\n        return new Lazy<E>(() => { return f(this.f(), b.f(), c.f(), d.f()); });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Lazy.ts","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Transaction } from \"./Transaction\";\nimport { Unit } from \"./Unit\";\nimport { Source, Vertex } from \"./Vertex\";\n\nexport class Operational {\n    /**\n     * A stream that gives the updates/steps for a {@link Cell}.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static updates<A>(c : Cell<A>) : Stream<A> {\n        /*  Don't think this is needed\n        const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"updates\", 0, [\n                new Source(\n                    c.getStream__().getVertex__(),\n                    () => {\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                ),\n                new Source(\n                    c.getVertex__(),\n                    () => {\n                        return () => { };\n                    }\n                )\n            ]\n        ));\n        return out;\n        */\n        return c.getStream__();\n    }\n\n    /**\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\n     * firing for each update/step of the cell's value.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static value<A>(c : Cell<A>) : Stream<A> {\n        return Transaction.transactionally(() => {\n            const sSpark = new StreamWithSend<Unit>();\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), () => {\n                sSpark.send_(Unit.UNIT);\n            });\n            const sInitial = sSpark.snapshot1(c);\n            return Operational.updates(c).orElse(sInitial);\n        });\n    }\n\n\t/**\n\t * Push each event onto a new transaction guaranteed to come before the next externally\n\t * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\n\t */\n\tstatic defer<A>(s : Stream<A>) : Stream<A> {\n\t    return Operational.split<A>(s.map((a : A) => {\n\t        return [a];\n\t    }));\n    }\n\n\t/**\n\t * Push each event in the list onto a newly created transaction guaranteed\n\t * to come before the next externally initiated transaction. Note that the semantics\n\t * are such that two different invocations of split() can put events into the same\n\t * new transaction, so the resulting stream's events could be simultaneous with\n\t * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\n\t */\n\tstatic split<A>(s : Stream<Array<A>>) : Stream<A> {\n\t    const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"split\", 0, [\n                new Source(\n                    s.getVertex__(),\n                    () => {\n                        return s.listen_(out.getVertex__(), (as : Array<A>) => {\n                            for (let i = 0; i < as.length; i++) {\n                                Transaction.currentTransaction.post(i, () => {\n                                    Transaction.transactionally(() => {\n                                        out.send_(as[i]);\n                                    });\n                                });\n                            }\n                        }, false);\n                    }\n                )\n            ]\n        ));\n        return out;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Operational.ts","export class Unit {\n    static UNIT : Unit = new Unit();\n    constructor() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Unit.ts","import { Source, Vertex } from \"./Vertex\";\n\nexport class Listener<A> {\n    constructor(h : (a : A) => void, target : Vertex) {\n        this.h = h;\n        this.target = target;\n    }\n    h : (a : A) => void;\n    target : Vertex;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Listener.ts","import { Lazy } from \"./Lazy\";\nimport { Cell } from \"./Cell\";\nimport { Stream } from \"./Stream\";\nimport { Transaction } from \"./Transaction\";\n\nexport class LazyCell<A> extends Cell<A> {\n    constructor(lazyInitValue : Lazy<A>, str? : Stream<A>) {\n        super(null, null);\n        Transaction.transactionally(() => {\n            if (str)\n                this.setStream(str);\n            this.lazyInitValue = lazyInitValue;\n        });\n    }\n\n    sampleNoTrans__() : A {  // Override\n        if (this.value == null && this.lazyInitValue != null) {\n            this.value = this.lazyInitValue.get();\n            this.lazyInitValue = null;\n        }\n        return this.value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/LazyCell.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { StreamWithSend } from \"./Stream\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A stream that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\n * should downcast to {@link Stream}.\n */\nexport class StreamSink<A> extends StreamWithSend<A> {\n    constructor(f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n        super();\n        if (!f)\n            f = <(l : A, r : A) => A>((l : A, r : A) => {\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\n            });\n        this.coalescer = new CoalesceHandler<A>(f, this);\n    }\n\n    private coalescer : CoalesceHandler<A>;\n\n    send(a : A) : void {\n        Transaction.transactionally<void>(\n            () => {\n                if (Transaction.currentTransaction.inCallback > 0)\n                    throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\n                this.coalescer.send_(a);\n            }\n        )\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/StreamSink.ts","import { Cell } from \"./Cell\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamLoop } from \"./Stream\";\n\n/**\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\n */\nexport class CellLoop<A> extends LazyCell<A> {\n    constructor() {\n    \tsuper(null, new StreamLoop<A>());\n    }\n\n    /**\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(a_out : Cell<A>) : void {\n        const me = this;\n        Transaction.transactionally(() => {\n            (<StreamLoop<A>>me.getStream__()).loop(a_out.getStream__());\n            me.lazyInitValue = a_out.sampleLazy();\n        });\n    }\n\n    sampleNoTrans__() : A\n    {\n        if (!(<StreamLoop<A>>this.getStream__()).assigned__)\n            throw new Error(\"CellLoop sampled before it was looped\");\n        return super.sampleNoTrans__();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CellLoop.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { Cell } from \"./Cell\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A cell that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\n * should downcast to {@link Cell}.\n */\nexport class CellSink<A> extends Cell<A> {\n    /**\n     * Construct a writable cell with the specified initial value. If multiple values are\n     * sent in the same transaction, the specified function is used to combine them.\n     *\n     * If the function is not supplied, then an exception will be thrown in this case.\n     */\n    constructor(initValue : A, f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n    \tsuper(initValue, new StreamSink<A>(f));\n    }\n\n    /**\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\n     * You are not meant to use this to define your own primitives.\n     * @param a Value to push into the cell.\n     */\n    send(a : A) : void {\n        (<StreamSink<A>>this.getStream__()).send(a);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CellSink.ts","export class Tuple2<A,B> {\n    constructor(a : A, b : B) {\n        this.a = a;\n        this.b = b;\n    }\n    a : A;\n    b : B;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Tuple2.ts","import { Vertex, Source } from \"./Vertex\";\nimport { BSTree } from 'typescript-collections';\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Cell } from \"./Cell\";\nimport { CellSink } from \"./CellSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * An interface for implementations of FRP timer systems.\n */\nexport abstract class TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    abstract setTimer(t : number, callback : () => void) : () => void;\n\n    /**\n     * Return the current clock time.\n     */\n    abstract now() : number;\n}\n\nlet nextSeq : number = 0;\n\nclass Event {\n    constructor(t : number, sAlarm : StreamWithSend<number>) {\n        this.t = t;\n        this.sAlarm = sAlarm;\n        this.seq = ++nextSeq;\n    }\n    t : number;\n    sAlarm : StreamWithSend<number>;\n    seq : number;  // Used to guarantee uniqueness\n}\n\nexport class TimerSystem {\n    constructor(impl : TimerSystemImpl) {\n        Transaction.transactionally(() => {\n            this.impl = impl;\n            const timeSnk = new CellSink<number>(impl.now());\n            this.time = timeSnk;\n            // A dummy listener to time to keep it alive even when there are no other listeners.\n            this.time.listen((t : number) => { });\n            Transaction.onStart(() => {\n                const t = impl.now();\n                // Pop and execute all events earlier than or equal to t (the current time).\n                while (true) {\n                    let ev : Event = null;\n                    if (!this.eventQueue.isEmpty()) {\n                        let mev = this.eventQueue.minimum();\n                        if (mev.t <= t) {\n                            ev = mev;\n                            // TO DO: Detect infinite loops!\n                            //this.eventQueue.remove(mev);\n                        }\n                    }\n                    if (ev != null) {\n                        timeSnk.send(ev.t);\n                        Transaction.transactionally(() => ev.sAlarm.send_(ev.t));\n                    }\n                    else\n                        break;\n                }\n                timeSnk.send(t);\n            });\n        });\n    }\n\n    private impl : TimerSystemImpl;\n\n    /**\n     * A cell giving the current clock time.\n     */\n    time : Cell<number>;\n\n    private eventQueue : BSTree<Event> = new BSTree<Event>((a, b) => {\n        if (a.t < b.t) return -1;\n        if (a.t > b.t) return 1;\n        if (a.seq < b.seq) return -1;\n        if (a.seq > b.seq) return 1;\n        return 0;\n    });\n\n    /**\n     * A timer that fires at the specified time, which can be null, meaning\n     * that the alarm is not set.\n     */\n    at(tAlarm : Cell<number>) : Stream<number> {\n        let current : Event = null,\n            cancelCurrent : () => void = null,\n            active : boolean = false,\n            tAl : number = null,\n            sampled : boolean = false;\n        const sAlarm = new StreamWithSend<number>(null),\n            updateTimer = () => {\n                if (cancelCurrent !== null) {\n                    cancelCurrent();\n                    this.eventQueue.remove(current);\n                }\n                cancelCurrent = null;\n                current = null;\n                if (active) {\n                    if (!sampled) {\n                        sampled = true;\n                        tAl = tAlarm.sampleNoTrans__();\n                    }\n                    if (tAl !== null) {\n                        current = new Event(tAl, sAlarm);\n                        this.eventQueue.add(current);\n                        cancelCurrent = this.impl.setTimer(tAl, () => {\n                                    // Open and close a transaction to trigger queued\n                                    // events to run.\n                                    Transaction.transactionally(() => {});\n                                });\n                    }\n                }\n            };\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\n                new Source(\n                    tAlarm.getVertex__(),\n                    () => {\n                        active = true;\n                        sampled = false;\n                        Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\n                        const kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), (oAlarm : number) => {\n                            tAl = oAlarm;\n                            sampled = true;\n                            updateTimer();\n                        }, false);\n                        return () => {\n                            active = false;\n                            updateTimer();\n                            kill();\n                        };\n                    }\n                )\n            ]\n        ));\n        return sAlarm;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/TimerSystem.ts","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using seconds as the time unit.\n */\nexport class SecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new SecondsTimerSystemImpl());\n    }\n}\n\nclass SecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, (t - this.now()) * 1000);\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now() * 0.001;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/SecondsTimerSystem.ts","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using milliseconds as the time unit.\n */\nexport class MillisecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new MillisecondsTimerSystemImpl());\n    }\n}\n\nclass MillisecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, t - this.now());\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/MillisecondsTimerSystem.ts","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Vertex, Source } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\n\nexport class IOAction {\n    /*!\n     * Convert a function that performs asynchronous I/O taking input A\n     * and returning a value of type B into an I/O action of type\n     * (sa : Stream<A>) => Stream<B>\n     */\n    static fromAsync<A,B>(performIO : (a : A, result : (b : B) => void) => void)\n            : (sa : Stream<A>) => Stream<B> {\n        return (sa : Stream<A>) => {\n            const out = new StreamWithSend<B>(null);\n            out.setVertex__(new Vertex(\"map\", 0, [\n                    new Source(\n                        sa.getVertex__(),\n                        () => {\n                            return sa.listen_(out.getVertex__(), (a : A) => {\n                                performIO(a, (b : B) => {\n                                    Transaction.transactionally(() => {\n                                        out.send_(b);\n                                    });\n                                });\n                            }, false);\n                        }\n                    )\n                ]\n            ));\n            return out;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/IOAction.ts"],"sourceRoot":""}