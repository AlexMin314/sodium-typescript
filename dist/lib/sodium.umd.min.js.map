{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///sodium.umd.min.js","webpack:///webpack/bootstrap d0ca2f6ab2cae73b1638","webpack:///./src/lib/Sodium.ts","webpack:///./src/lib/Lambda.ts","webpack:///./src/lib/Vertex.ts","webpack:///./src/lib/Stream.ts","webpack:///./src/lib/Transaction.ts","webpack:///./~/typescript-collections/dist/lib/index.js","webpack:///./~/typescript-collections/dist/lib/arrays.js","webpack:///./~/typescript-collections/dist/lib/util.js","webpack:///./~/typescript-collections/dist/lib/Bag.js","webpack:///./~/typescript-collections/dist/lib/Dictionary.js","webpack:///./~/typescript-collections/dist/lib/Set.js","webpack:///./~/typescript-collections/dist/lib/BSTree.js","webpack:///./~/typescript-collections/dist/lib/Queue.js","webpack:///./~/typescript-collections/dist/lib/LinkedList.js","webpack:///./~/typescript-collections/dist/lib/Heap.js","webpack:///./~/typescript-collections/dist/lib/LinkedDictionary.js","webpack:///./~/typescript-collections/dist/lib/MultiDictionary.js","webpack:///./~/typescript-collections/dist/lib/PriorityQueue.js","webpack:///./~/typescript-collections/dist/lib/Stack.js","webpack:///./src/lib/CoalesceHandler.ts","webpack:///./src/lib/Cell.ts","webpack:///./src/lib/Lazy.ts","webpack:///./src/lib/Operational.ts","webpack:///./src/lib/Unit.ts","webpack:///./src/lib/Listener.ts","webpack:///./src/lib/LazyCell.ts","webpack:///./src/lib/StreamSink.ts","webpack:///./src/lib/CellLoop.ts","webpack:///./src/lib/CellSink.ts","webpack:///./src/lib/Tuple2.ts","webpack:///./src/lib/TimerSystem.ts","webpack:///./src/lib/SecondsTimerSystem.ts","webpack:///./src/lib/MillisecondsTimerSystem.ts","webpack:///./src/lib/IOAction.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","Lambda_1","lambda1","lambda2","lambda3","lambda4","lambda5","lambda6","Stream_1","Stream","StreamLoop","StreamSink_1","StreamSink","Cell_1","Cell","CellLoop_1","CellLoop","CellSink_1","CellSink","Transaction_1","Transaction","Tuple2_1","Tuple2","Unit_1","Unit","Operational_1","Operational","Vertex_1","getTotalRegistrations","Vertex","TimerSystem_1","TimerSystemImpl","TimerSystem","SecondsTimerSystem_1","SecondsTimerSystem","MillisecondsTimerSystem_1","MillisecondsTimerSystem","IOAction_1","IOAction","f","deps","Lambda1","Lambda1_deps","Lambda1_toFunction","Lambda2","Lambda2_deps","Lambda2_toFunction","Lambda3","Lambda3_deps","Lambda3_toFunction","Lambda4","Lambda4_deps","Lambda4_toFunction","Lambda5","Lambda5_deps","Lambda5_toFunction","Lambda6","Lambda6_deps","Lambda6_toFunction","toSources","ss","i","length","dep","push","Source","getVertex__","totalRegistrations","setVerbose","v","verbose","describeAll","visited","contains","console","log","descr","add","chs","children","origin","register_","registered","deregister_","Error","prototype","register","target","_this","increment","decrement","deregister","Color","roots","nextID","name","rank","sources","targets","childrn","color","black","buffered","refCountAdj","refCount","collectCycles","incRefCount","anyChanged","ensureBiggerThan","decRefCount","matched","splice","addSource","src","limit","colStr","gray","white","purple","str","referrer","release","possibleRoots","free","markRoots","scanRoots","collectRoots","newRoots","markGray","scan","collectWhite","scanBlack","NULL","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","create","CoalesceHandler_1","Listener_1","Lazy_1","LazyCell_1","vertex","listeners","firings","map","out","StreamWithSend","ff","listen_","a","send_","concat","mapTo","orElse","s","merge","left","right","merge_","coalesce__","coalescer","CoalesceHandler","run","filter","filterNotNull","gate","snapshot","pred","snapshot1","sampleNoTrans__","f_","snapshot3","snapshot4","snapshot5","e","snapshot6","hold","initValue","holdLazy","LazyCell","collect","initState","collectLazy","Lazy","ea","es","ebs","eb","bs","es_out","loop","accum","accumLazy","once","me","listen","h","suppressEarlierFirings","currentTransaction","requestRegen","listener","Listener","firings_1","slice","prioritized","removed","_super","setVertex__","last","_loop_1","inCallback","err","assigned__","sa_out","typescript_collections_1","Entry","action","seq","nextSeq","toString","toRegen","prioritizedQ","PriorityQueue","entries","Set","lastQ","postQ","enqueue","post","childIx","existing","neu","checkRegen","clear","toArray","isActive","close","isEmpty","dequeue","remove","parent_1","onStart","r","onStartHooks","transWas","runningOnStartHooks","_arrays","arrays","Bag_1","Bag","default","BSTree_1","BSTree","Dictionary_1","Dictionary","Heap_1","Heap","LinkedDictionary_1","LinkedDictionary","LinkedList_1","LinkedList","MultiDictionary_1","MultiDictionary","Queue_1","Queue","PriorityQueue_1","Set_1","Stack_1","Stack","_util","util","indexOf","array","item","equalsFunction","equals","defaultEquals","lastIndexOf","index","frequency","freq","array1","array2","copy","swap","j","temp","forEach","callback","_i","array_1","ele","defaultCompare","defaultToString","isUndefined","isString","makeString","join","toret","first","prop","has","isFunction","func","obj","reverseCompareFunction","compareFunction","compareToEquals","_hasOwnProperty","toStrFunction","toStrF","dictionary","nElements","element","nCopies","getValue","copies","node","setValue","count","containsKey","values","values_1","toSet","elements","elements_1","k","size","table","toStr","key","pair","ret","previousElement","undefined","keys","name_1","name_2","name_3","toStringFunction","intersection","otherSet","set","union","difference","isSubsetOf","isSub","compare","insertNode","createNode","searchNode","removeNode","inorderTraversal","inorderTraversalAux","stop","preorderTraversal","preorderTraversalAux","postorderTraversal","postorderTraversalAux","levelTraversal","levelTraversalAux","minimum","minimumAux","maximum","maximumAux","height","heightAux","cmp","leftCh","rightCh","transplant","n1","n2","parent","y","signal","queue","Math","max","position","list","elem","el","removeElementAtIndex","peek","firstNode","lastNode","newNode","next","prev","nodeAtIndex","elementAtIndex","equalsF","currentNode","previous","other","eqF","equalsAux","reverse","current","collections","data","leftChildIndex","nodeIndex","rightChildIndex","parentIndex","floor","minIndex","leftChild","rightChild","siftUp","siftDown","min","removeRoot","equF","LinkedDictionaryPair","unlink","head","tail","appendToTail","entry","getLinkedDictionaryPair","replace","oldPair","newPair","existingPair","crawlNode","valuesEqualsFunction","allowDuplicateValues","dict","allowDuplicate","_a","v_1","w","heap","pop","accumValid","LazySample","cell","hasValue","ApplyState","f_present","a_present","setStream","valueUpdate","lazyInitValue","getStream__","sample","sampleLazy","sampleLazyNoTrans__","updates","lift","fn0","fn","cf","aa","bb","apply","lift3","mf","cc","lift4","dd","lift5","ee","lift6","ca","state","cf_value","ca_value","src1","src2","l","switchC","cca","za","ba","last_ca","cca_value","kill2","kill1","switchS","csa","h2","sa","get","sSpark","UNIT","sInitial","defer","split","as","send","a_out","Event","t","sAlarm","impl","eventQueue","tMinimum","timeSnk","now","time","ev","mev","state_1","at","tAlarm","cancelCurrent","active","tAl","sampled","updateTimer","setTimer","kill","oAlarm","SecondsTimerSystemImpl","arguments","timeout","setTimeout","clearTimeout","Date","MillisecondsTimerSystemImpl","fromAsync","performIO"],"mappings":"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","file":"sodium.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Sodium\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sodium\"] = factory();\n\telse\n\t\troot[\"Sodium\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Sodium\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sodium\"] = factory();\n\telse\n\t\troot[\"Sodium\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\texports.lambda1 = Lambda_1.lambda1;\r\n\texports.lambda2 = Lambda_1.lambda2;\r\n\texports.lambda3 = Lambda_1.lambda3;\r\n\texports.lambda4 = Lambda_1.lambda4;\r\n\texports.lambda5 = Lambda_1.lambda5;\r\n\texports.lambda6 = Lambda_1.lambda6;\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\texports.Stream = Stream_1.Stream;\r\n\texports.StreamLoop = Stream_1.StreamLoop;\r\n\tvar StreamSink_1 = __webpack_require__(26);\r\n\texports.StreamSink = StreamSink_1.StreamSink;\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\texports.Cell = Cell_1.Cell;\r\n\tvar CellLoop_1 = __webpack_require__(27);\r\n\texports.CellLoop = CellLoop_1.CellLoop;\r\n\tvar CellSink_1 = __webpack_require__(28);\r\n\texports.CellSink = CellSink_1.CellSink;\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\texports.Transaction = Transaction_1.Transaction;\r\n\tvar Tuple2_1 = __webpack_require__(29);\r\n\texports.Tuple2 = Tuple2_1.Tuple2;\r\n\tvar Unit_1 = __webpack_require__(23);\r\n\texports.Unit = Unit_1.Unit;\r\n\tvar Operational_1 = __webpack_require__(22);\r\n\texports.Operational = Operational_1.Operational;\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\texports.getTotalRegistrations = Vertex_1.getTotalRegistrations;\r\n\texports.Vertex = Vertex_1.Vertex;\r\n\tvar TimerSystem_1 = __webpack_require__(30);\r\n\texports.TimerSystemImpl = TimerSystem_1.TimerSystemImpl;\r\n\texports.TimerSystem = TimerSystem_1.TimerSystem;\r\n\tvar SecondsTimerSystem_1 = __webpack_require__(31);\r\n\texports.SecondsTimerSystem = SecondsTimerSystem_1.SecondsTimerSystem;\r\n\tvar MillisecondsTimerSystem_1 = __webpack_require__(32);\r\n\texports.MillisecondsTimerSystem = MillisecondsTimerSystem_1.MillisecondsTimerSystem;\r\n\tvar IOAction_1 = __webpack_require__(33);\r\n\texports.IOAction = IOAction_1.IOAction;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Lambda1 = (function () {\r\n\t    function Lambda1(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda1;\r\n\t}());\r\n\texports.Lambda1 = Lambda1;\r\n\tfunction lambda1(f, deps) {\r\n\t    return new Lambda1(f, deps);\r\n\t}\r\n\texports.lambda1 = lambda1;\r\n\tfunction Lambda1_deps(f) {\r\n\t    if (f instanceof Lambda1)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda1_deps = Lambda1_deps;\r\n\tfunction Lambda1_toFunction(f) {\r\n\t    if (f instanceof Lambda1)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda1_toFunction = Lambda1_toFunction;\r\n\tvar Lambda2 = (function () {\r\n\t    function Lambda2(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda2;\r\n\t}());\r\n\texports.Lambda2 = Lambda2;\r\n\tfunction lambda2(f, deps) {\r\n\t    return new Lambda2(f, deps);\r\n\t}\r\n\texports.lambda2 = lambda2;\r\n\tfunction Lambda2_deps(f) {\r\n\t    if (f instanceof Lambda2)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda2_deps = Lambda2_deps;\r\n\tfunction Lambda2_toFunction(f) {\r\n\t    if (f instanceof Lambda2)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda2_toFunction = Lambda2_toFunction;\r\n\tvar Lambda3 = (function () {\r\n\t    function Lambda3(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda3;\r\n\t}());\r\n\texports.Lambda3 = Lambda3;\r\n\tfunction lambda3(f, deps) {\r\n\t    return new Lambda3(f, deps);\r\n\t}\r\n\texports.lambda3 = lambda3;\r\n\tfunction Lambda3_deps(f) {\r\n\t    if (f instanceof Lambda3)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda3_deps = Lambda3_deps;\r\n\tfunction Lambda3_toFunction(f) {\r\n\t    if (f instanceof Lambda3)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda3_toFunction = Lambda3_toFunction;\r\n\tvar Lambda4 = (function () {\r\n\t    function Lambda4(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda4;\r\n\t}());\r\n\texports.Lambda4 = Lambda4;\r\n\tfunction lambda4(f, deps) {\r\n\t    return new Lambda4(f, deps);\r\n\t}\r\n\texports.lambda4 = lambda4;\r\n\tfunction Lambda4_deps(f) {\r\n\t    if (f instanceof Lambda4)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda4_deps = Lambda4_deps;\r\n\tfunction Lambda4_toFunction(f) {\r\n\t    if (f instanceof Lambda4)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda4_toFunction = Lambda4_toFunction;\r\n\tvar Lambda5 = (function () {\r\n\t    function Lambda5(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda5;\r\n\t}());\r\n\texports.Lambda5 = Lambda5;\r\n\tfunction lambda5(f, deps) {\r\n\t    return new Lambda5(f, deps);\r\n\t}\r\n\texports.lambda5 = lambda5;\r\n\tfunction Lambda5_deps(f) {\r\n\t    if (f instanceof Lambda5)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda5_deps = Lambda5_deps;\r\n\tfunction Lambda5_toFunction(f) {\r\n\t    if (f instanceof Lambda5)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda5_toFunction = Lambda5_toFunction;\r\n\tvar Lambda6 = (function () {\r\n\t    function Lambda6(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda6;\r\n\t}());\r\n\texports.Lambda6 = Lambda6;\r\n\tfunction lambda6(f, deps) {\r\n\t    return new Lambda6(f, deps);\r\n\t}\r\n\texports.lambda6 = lambda6;\r\n\tfunction Lambda6_deps(f) {\r\n\t    if (f instanceof Lambda6)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda6_deps = Lambda6_deps;\r\n\tfunction Lambda6_toFunction(f) {\r\n\t    if (f instanceof Lambda6)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda6_toFunction = Lambda6_toFunction;\r\n\tfunction toSources(deps) {\r\n\t    var ss = [];\r\n\t    for (var i = 0; i < deps.length; i++) {\r\n\t        var dep = deps[i];\r\n\t        ss.push(new Vertex_1.Source(dep.getVertex__(), null));\r\n\t    }\r\n\t    return ss;\r\n\t}\r\n\texports.toSources = toSources;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar totalRegistrations = 0;\r\n\tfunction getTotalRegistrations() {\r\n\t    return totalRegistrations;\r\n\t}\r\n\texports.getTotalRegistrations = getTotalRegistrations;\r\n\tvar Source = (function () {\r\n\t    function Source(origin, register_) {\r\n\t        this.registered = false;\r\n\t        this.deregister_ = null;\r\n\t        if (origin === null)\r\n\t            throw new Error(\"null origin!\");\r\n\t        this.origin = origin;\r\n\t        this.register_ = register_;\r\n\t    }\r\n\t    Source.prototype.register = function (target) {\r\n\t        var _this = this;\r\n\t        if (!this.registered) {\r\n\t            this.registered = true;\r\n\t            if (this.register_ !== null)\r\n\t                this.deregister_ = this.register_();\r\n\t            else {\r\n\t                this.origin.increment(target);\r\n\t                this.deregister_ = function () { return _this.origin.decrement(target); };\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Source.prototype.deregister = function (target) {\r\n\t        if (this.registered) {\r\n\t            this.registered = false;\r\n\t            if (this.deregister_ !== null)\r\n\t                this.deregister_();\r\n\t        }\r\n\t    };\r\n\t    return Source;\r\n\t}());\r\n\texports.Source = Source;\r\n\tvar Color;\r\n\t(function (Color) {\r\n\t    Color[Color[\"black\"] = 0] = \"black\";\r\n\t    Color[Color[\"gray\"] = 1] = \"gray\";\r\n\t    Color[Color[\"white\"] = 2] = \"white\";\r\n\t    Color[Color[\"purple\"] = 3] = \"purple\";\r\n\t})(Color = exports.Color || (exports.Color = {}));\r\n\t;\r\n\tvar roots = [];\r\n\tvar nextID = 0;\r\n\tvar verbose = false;\r\n\tfunction setVerbose(v) { verbose = v; }\r\n\texports.setVerbose = setVerbose;\r\n\tfunction describeAll(v, visited) {\r\n\t    if (visited.contains(v.id))\r\n\t        return;\r\n\t    console.log(v.descr());\r\n\t    visited.add(v.id);\r\n\t    var chs = v.children();\r\n\t    for (var i = 0; i < chs.length; i++)\r\n\t        describeAll(chs[i], visited);\r\n\t}\r\n\texports.describeAll = describeAll;\r\n\tvar Vertex = (function () {\r\n\t    function Vertex(name, rank, sources) {\r\n\t        this.targets = [];\r\n\t        this.childrn = [];\r\n\t        this.visited = false;\r\n\t        // --------------------------------------------------------\r\n\t        // Synchronous Cycle Collection algorithm presented in \"Concurrent\r\n\t        // Cycle Collection in Reference Counted Systems\" by David F. Bacon\r\n\t        // and V.T. Rajan.\r\n\t        this.color = Color.black;\r\n\t        this.buffered = false;\r\n\t        this.refCountAdj = 0;\r\n\t        this.name = name;\r\n\t        this.rank = rank;\r\n\t        this.sources = sources;\r\n\t        this.id = nextID++;\r\n\t    }\r\n\t    Vertex.prototype.refCount = function () { return this.targets.length; };\r\n\t    ;\r\n\t    Vertex.prototype.register = function (target) {\r\n\t        return this.increment(target);\r\n\t    };\r\n\t    Vertex.prototype.deregister = function (target) {\r\n\t        if (verbose)\r\n\t            console.log(\"deregister \" + this.descr() + \" => \" + target.descr());\r\n\t        this.decrement(target);\r\n\t        Vertex.collectCycles();\r\n\t    };\r\n\t    Vertex.prototype.incRefCount = function (target) {\r\n\t        var anyChanged = false;\r\n\t        if (this.refCount() == 0) {\r\n\t            for (var i = 0; i < this.sources.length; i++)\r\n\t                this.sources[i].register(this);\r\n\t        }\r\n\t        this.targets.push(target);\r\n\t        target.childrn.push(this);\r\n\t        if (target.ensureBiggerThan(this.rank))\r\n\t            anyChanged = true;\r\n\t        totalRegistrations++;\r\n\t        return anyChanged;\r\n\t    };\r\n\t    Vertex.prototype.decRefCount = function (target) {\r\n\t        if (verbose)\r\n\t            console.log(\"DEC \" + this.descr());\r\n\t        var matched = false;\r\n\t        for (var i = 0; i < target.childrn.length; i++)\r\n\t            if (target.childrn[i] === this) {\r\n\t                target.childrn.splice(i, 1);\r\n\t            }\r\n\t        for (var i = 0; i < this.targets.length; i++)\r\n\t            if (this.targets[i] === target) {\r\n\t                this.targets.splice(i, 1);\r\n\t                matched = true;\r\n\t                break;\r\n\t            }\r\n\t        if (matched) {\r\n\t            if (this.refCount() == 0) {\r\n\t                for (var i = 0; i < this.sources.length; i++)\r\n\t                    this.sources[i].deregister(this);\r\n\t            }\r\n\t            totalRegistrations--;\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.addSource = function (src) {\r\n\t        this.sources.push(src);\r\n\t        if (this.refCount() > 0)\r\n\t            src.register(this);\r\n\t    };\r\n\t    Vertex.prototype.ensureBiggerThan = function (limit) {\r\n\t        if (this.rank > limit || this.visited)\r\n\t            return false;\r\n\t        this.visited = true;\r\n\t        this.rank = limit + 1;\r\n\t        for (var i = 0; i < this.targets.length; i++)\r\n\t            this.targets[i].ensureBiggerThan(this.rank);\r\n\t        this.visited = false;\r\n\t        return true;\r\n\t    };\r\n\t    Vertex.prototype.descr = function () {\r\n\t        var colStr = null;\r\n\t        switch (this.color) {\r\n\t            case Color.black:\r\n\t                colStr = \"black\";\r\n\t                break;\r\n\t            case Color.gray:\r\n\t                colStr = \"gray\";\r\n\t                break;\r\n\t            case Color.white:\r\n\t                colStr = \"white\";\r\n\t                break;\r\n\t            case Color.purple:\r\n\t                colStr = \"purple\";\r\n\t                break;\r\n\t        }\r\n\t        var str = this.id + \" \" + this.name + \" [\" + this.refCount() + \"/\" + this.refCountAdj + \"] \" + colStr + \" ->\";\r\n\t        var chs = this.children();\r\n\t        for (var i = 0; i < chs.length; i++) {\r\n\t            str = str + \" \" + chs[i].id;\r\n\t        }\r\n\t        return str;\r\n\t    };\r\n\t    Vertex.prototype.children = function () { return this.childrn; };\r\n\t    Vertex.prototype.increment = function (referrer) {\r\n\t        return this.incRefCount(referrer);\r\n\t    };\r\n\t    Vertex.prototype.decrement = function (referrer) {\r\n\t        this.decRefCount(referrer);\r\n\t        if (this.refCount() == 0)\r\n\t            this.release();\r\n\t        else\r\n\t            this.possibleRoots();\r\n\t    };\r\n\t    Vertex.prototype.release = function () {\r\n\t        this.color = Color.black;\r\n\t        if (!this.buffered)\r\n\t            this.free();\r\n\t    };\r\n\t    Vertex.prototype.free = function () {\r\n\t        while (this.targets.length > 0)\r\n\t            this.decRefCount(this.targets[0]);\r\n\t    };\r\n\t    Vertex.prototype.possibleRoots = function () {\r\n\t        if (this.color != Color.purple) {\r\n\t            this.color = Color.purple;\r\n\t            if (!this.buffered) {\r\n\t                this.buffered = true;\r\n\t                roots.push(this);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Vertex.collectCycles = function () {\r\n\t        Vertex.markRoots();\r\n\t        Vertex.scanRoots();\r\n\t        Vertex.collectRoots();\r\n\t    };\r\n\t    Vertex.markRoots = function () {\r\n\t        var newRoots = [];\r\n\t        for (var i = 0; i < roots.length; i++) {\r\n\t            if (verbose)\r\n\t                console.log(\"markRoots \" + roots[i].descr()); // ###\r\n\t            if (roots[i].color == Color.purple) {\r\n\t                roots[i].markGray();\r\n\t                newRoots.push(roots[i]);\r\n\t            }\r\n\t            else {\r\n\t                roots[i].buffered = false;\r\n\t                if (roots[i].color == Color.black && roots[i].refCount() == 0)\r\n\t                    roots[i].free();\r\n\t            }\r\n\t        }\r\n\t        roots = newRoots;\r\n\t    };\r\n\t    Vertex.scanRoots = function () {\r\n\t        for (var i = 0; i < roots.length; i++)\r\n\t            roots[i].scan();\r\n\t    };\r\n\t    Vertex.collectRoots = function () {\r\n\t        for (var i = 0; i < roots.length; i++) {\r\n\t            roots[i].buffered = false;\r\n\t            roots[i].collectWhite();\r\n\t        }\r\n\t        roots = [];\r\n\t    };\r\n\t    Vertex.prototype.markGray = function () {\r\n\t        if (this.color != Color.gray) {\r\n\t            this.color = Color.gray;\r\n\t            var chs = this.children();\r\n\t            for (var i = 0; i < chs.length; i++) {\r\n\t                chs[i].refCountAdj--;\r\n\t                if (verbose)\r\n\t                    console.log(\"markGray \" + this.descr());\r\n\t                chs[i].markGray();\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.scan = function () {\r\n\t        if (verbose)\r\n\t            console.log(\"scan \" + this.descr());\r\n\t        if (this.color == Color.gray) {\r\n\t            if (this.refCount() + this.refCountAdj > 0)\r\n\t                this.scanBlack();\r\n\t            else {\r\n\t                this.color = Color.white;\r\n\t                if (verbose)\r\n\t                    console.log(\"scan WHITE \" + this.descr());\r\n\t                var chs = this.children();\r\n\t                for (var i = 0; i < chs.length; i++)\r\n\t                    chs[i].scan();\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.scanBlack = function () {\r\n\t        this.color = Color.black;\r\n\t        var chs = this.children();\r\n\t        for (var i = 0; i < chs.length; i++) {\r\n\t            chs[i].refCountAdj++;\r\n\t            if (verbose)\r\n\t                console.log(\"scanBlack \" + this.descr());\r\n\t            if (chs[i].color != Color.black)\r\n\t                chs[i].scanBlack();\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.collectWhite = function () {\r\n\t        if (this.color == Color.white && !this.buffered) {\r\n\t            if (verbose)\r\n\t                console.log(\"collectWhite \" + this.descr());\r\n\t            this.color = Color.black;\r\n\t            this.refCountAdj = 0;\r\n\t            var chs = this.children();\r\n\t            for (var i = 0; i < chs.length; i++)\r\n\t                chs[i].collectWhite();\r\n\t            this.free();\r\n\t        }\r\n\t    };\r\n\t    Vertex.NULL = new Vertex(\"user\", 1e12, []);\r\n\t    return Vertex;\r\n\t}());\r\n\texports.Vertex = Vertex;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar CoalesceHandler_1 = __webpack_require__(19);\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\t//import { StreamLoop } from \"./StreamLoop\";\r\n\tvar Listener_1 = __webpack_require__(24);\r\n\tvar Lazy_1 = __webpack_require__(21);\r\n\tvar LazyCell_1 = __webpack_require__(25);\r\n\tvar Stream = (function () {\r\n\t    function Stream(vertex) {\r\n\t        this.listeners = [];\r\n\t        this.firings = [];\r\n\t        this.vertex = vertex ? vertex : new Vertex_1.Vertex(\"Stream\", 0, []);\r\n\t    }\r\n\t    Stream.prototype.getVertex__ = function () {\r\n\t        return this.vertex;\r\n\t    };\r\n\t    /**\r\n\t     * Transform the stream's event values according to the supplied function, so the returned\r\n\t     * Stream's event values reflect the value of the function applied to the input\r\n\t     * Stream's event values.\r\n\t     * @param f Function to apply to convert the values. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n\t     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.map = function (f) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda1_toFunction(f);\r\n\t        out.vertex = new Vertex_1.Vertex(\"map\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a));\r\n\t                }, false);\r\n\t            })\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda1_deps(f))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Transform the stream's event values into the specified constant value.\r\n\t     * @param b Constant value.\r\n\t     */\r\n\t    Stream.prototype.mapTo = function (b) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        out.vertex = new Vertex_1.Vertex(\"mapTo\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(b);\r\n\t                }, false);\r\n\t            })\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\r\n\t     * in the simultaneous case.\r\n\t     * <p>\r\n\t     * In the case where two events are simultaneous (i.e. both\r\n\t     * within the same transaction), the event from <em>this</em> will take precedence, and\r\n\t     * the event from <em>s</em> will be dropped.\r\n\t     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\r\n\t     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\r\n\t     * <p>\r\n\t     * The name orElse() is used instead of merge() to make it really clear that care should\r\n\t     * be taken, because events can be dropped.\r\n\t     */\r\n\t    Stream.prototype.orElse = function (s) {\r\n\t        return this.merge(s, function (left, right) {\r\n\t            return left;\r\n\t        });\r\n\t    };\r\n\t    Stream.prototype.merge_ = function (s) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend();\r\n\t        var left = new Vertex_1.Vertex(\"merge\", 0, []);\r\n\t        left.sources.push(new Vertex_1.Source(this.vertex, function () {\r\n\t            return _this.listen_(left, function (a) {\r\n\t                out.send_(a);\r\n\t            }, false);\r\n\t        }));\r\n\t        out.vertex.sources = out.vertex.sources.concat([\r\n\t            new Vertex_1.Source(left, function () {\r\n\t                left.register(out.vertex);\r\n\t                return function () { left.deregister(out.vertex); };\r\n\t            }),\r\n\t            new Vertex_1.Source(s.vertex, function () {\r\n\t                return s.listen_(out.vertex, function (a) {\r\n\t                    out.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    Stream.prototype.coalesce__ = function (f) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend();\r\n\t        var coalescer = new CoalesceHandler_1.CoalesceHandler(f, out);\r\n\t        out.vertex.sources = out.vertex.sources.concat([\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    coalescer.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ]).concat(Lambda_1.toSources(Lambda_1.Lambda2_deps(f)));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Merge two streams of the same type into one, so that events on either input appear\r\n\t     * on the returned stream.\r\n\t     * <p>\r\n\t     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\r\n\t     * occurring in the same transaction), combine them into one using the specified combining function\r\n\t     * so that the returned stream is guaranteed only ever to have one event per transaction.\r\n\t     * The event from <em>this</em> will appear at the left input of the combining function, and\r\n\t     * the event from <em>s</em> will appear at the right.\r\n\t     * @param f Function to combine the values. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.merge = function (s, f) {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            return _this.merge_(s).coalesce__(f);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that only outputs events for which the predicate returns true.\r\n\t     */\r\n\t    Stream.prototype.filter = function (f) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda1_toFunction(f);\r\n\t        out.vertex = new Vertex_1.Vertex(\"filter\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    if (ff(a))\r\n\t                        out.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda1_deps(f))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that only outputs events that have present\r\n\t     * values, discarding null values.\r\n\t     */\r\n\t    Stream.prototype.filterNotNull = function () {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        out.vertex = new Vertex_1.Vertex(\"filterNotNull\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    if (a !== null)\r\n\t                        out.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that only outputs events from the input stream\r\n\t     * when the specified cell's value is true.\r\n\t     */\r\n\t    Stream.prototype.gate = function (c) {\r\n\t        return this.snapshot(c, function (a, pred) {\r\n\t            return pred ? a : null;\r\n\t        }).filterNotNull();\r\n\t    };\r\n\t    /**\r\n\t     * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\r\n\t     * at the time of the event firing, ignoring the stream's value.\r\n\t     */\r\n\t    Stream.prototype.snapshot1 = function (c) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot1\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(c.sampleNoTrans__());\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(c.getVertex__(), null)\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream whose events are the result of the combination using the specified\r\n\t     * function of the input stream's event value and the value of the cell at that time.\r\n\t     * <P>\r\n\t     * There is an implicit delay: State updates caused by event firings being held with\r\n\t     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n\t     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\r\n\t     * always sees the value of a cell as it was before any state changes from the current\r\n\t     * transaction.\r\n\t     */\r\n\t    Stream.prototype.snapshot = function (b, f_) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda2_toFunction(f_);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a, b.sampleNoTrans__()));\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(b.getVertex__(), null)\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda2_deps(f_))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream whose events are the result of the combination using the specified\r\n\t     * function of the input stream's event value and the value of the cells at that time.\r\n\t     * <P>\r\n\t     * There is an implicit delay: State updates caused by event firings being held with\r\n\t     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n\t     * the following transaction. To put this another way, snapshot()\r\n\t     * always sees the value of a cell as it was before any state changes from the current\r\n\t     * transaction.\r\n\t     */\r\n\t    Stream.prototype.snapshot3 = function (b, c, f_) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda3_toFunction(f_);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__()));\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(b.getVertex__(), null),\r\n\t            new Vertex_1.Source(c.getVertex__(), null)\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda3_deps(f_))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream whose events are the result of the combination using the specified\r\n\t     * function of the input stream's event value and the value of the cells at that time.\r\n\t     * <P>\r\n\t     * There is an implicit delay: State updates caused by event firings being held with\r\n\t     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n\t     * the following transaction. To put this another way, snapshot()\r\n\t     * always sees the value of a cell as it was before any state changes from the current\r\n\t     * transaction.\r\n\t     */\r\n\t    Stream.prototype.snapshot4 = function (b, c, d, f_) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda4_toFunction(f_);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__()));\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(b.getVertex__(), null),\r\n\t            new Vertex_1.Source(c.getVertex__(), null),\r\n\t            new Vertex_1.Source(d.getVertex__(), null)\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda4_deps(f_))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream whose events are the result of the combination using the specified\r\n\t     * function of the input stream's event value and the value of the cells at that time.\r\n\t     * <P>\r\n\t     * There is an implicit delay: State updates caused by event firings being held with\r\n\t     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n\t     * the following transaction. To put this another way, snapshot()\r\n\t     * always sees the value of a cell as it was before any state changes from the current\r\n\t     * transaction.\r\n\t     */\r\n\t    Stream.prototype.snapshot5 = function (b, c, d, e, f_) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda5_toFunction(f_);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__(), e.sampleNoTrans__()));\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(b.getVertex__(), null),\r\n\t            new Vertex_1.Source(c.getVertex__(), null),\r\n\t            new Vertex_1.Source(d.getVertex__(), null),\r\n\t            new Vertex_1.Source(e.getVertex__(), null)\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda5_deps(f_))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream whose events are the result of the combination using the specified\r\n\t     * function of the input stream's event value and the value of the cells at that time.\r\n\t     * <P>\r\n\t     * There is an implicit delay: State updates caused by event firings being held with\r\n\t     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n\t     * the following transaction. To put this another way, snapshot()\r\n\t     * always sees the value of a cell as it was before any state changes from the current\r\n\t     * transaction.\r\n\t     */\r\n\t    Stream.prototype.snapshot6 = function (b, c, d, e, f, f_) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda6_toFunction(f_);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__(), e.sampleNoTrans__(), f.sampleNoTrans__()));\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(b.getVertex__(), null),\r\n\t            new Vertex_1.Source(c.getVertex__(), null),\r\n\t            new Vertex_1.Source(d.getVertex__(), null),\r\n\t            new Vertex_1.Source(e.getVertex__(), null),\r\n\t            new Vertex_1.Source(f.getVertex__(), null)\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda6_deps(f_))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Create a {@link Cell} with the specified initial value, that is updated\r\n\t     * by this stream's event values.\r\n\t     * <p>\r\n\t     * There is an implicit delay: State updates caused by event firings don't become\r\n\t     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\r\n\t     * until the following transaction. To put this another way,\r\n\t     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\r\n\t     * any state changes from the current transaction.\r\n\t     */\r\n\t    Stream.prototype.hold = function (initValue) {\r\n\t        return new Cell_1.Cell(initValue, this);\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\r\n\t     */\r\n\t    Stream.prototype.holdLazy = function (initValue) {\r\n\t        return new LazyCell_1.LazyCell(initValue, this);\r\n\t    };\r\n\t    /**\r\n\t     * Transform an event with a generalized state loop (a Mealy machine). The function\r\n\t     * is passed the input and the old state and returns the new state and output value.\r\n\t     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n\t     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.collect = function (initState, f) {\r\n\t        return this.collectLazy(new Lazy_1.Lazy(function () { return initState; }), f);\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\r\n\t     * {@link Cell#sampleLazy()}.\r\n\t     */\r\n\t    Stream.prototype.collectLazy = function (initState, f) {\r\n\t        var ea = this;\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            var es = new StreamLoop(), s = es.holdLazy(initState), ebs = ea.snapshot(s, f), eb = ebs.map(function (bs) { return bs.a; }), es_out = ebs.map(function (bs) { return bs.b; });\r\n\t            es.loop(es_out);\r\n\t            return eb;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Accumulate on input event, outputting the new state each time.\r\n\t     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n\t     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.accum = function (initState, f) {\r\n\t        return this.accumLazy(new Lazy_1.Lazy(function () { return initState; }), f);\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\r\n\t     * {@link Cell#sampleLazy()}.\r\n\t     */\r\n\t    Stream.prototype.accumLazy = function (initState, f) {\r\n\t        var ea = this;\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            var es = new StreamLoop(), s = es.holdLazy(initState), es_out = ea.snapshot(s, f);\r\n\t            es.loop(es_out);\r\n\t            return es_out.holdLazy(initState);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that outputs only one value: the next event of the\r\n\t     * input stream, starting from the transaction in which once() was invoked.\r\n\t     */\r\n\t    Stream.prototype.once = function () {\r\n\t        /*\r\n\t            return Transaction.run(() => {\r\n\t                const ev = this,\r\n\t                    out = new StreamWithSend<A>();\r\n\t                let la : () => void = null;\r\n\t                la = ev.listen_(out.vertex, (a : A) => {\r\n\t                    if (la !== null) {\r\n\t                        out.send_(a);\r\n\t                        la();\r\n\t                        la = null;\r\n\t                    }\r\n\t                }, false);\r\n\t                return out;\r\n\t            });\r\n\t            */\r\n\t        // We can't use the implementation above, beacuse deregistering\r\n\t        // listeners triggers the exception\r\n\t        // \"send() was invoked before listeners were registered\"\r\n\t        // We can revisit this another time. For now we will use the less\r\n\t        // efficient implementation below.\r\n\t        var me = this;\r\n\t        return Transaction_1.Transaction.run(function () { return me.gate(me.mapTo(false).hold(true)); });\r\n\t    };\r\n\t    Stream.prototype.listen = function (h) {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            return _this.listen_(Vertex_1.Vertex.NULL, h, false);\r\n\t        });\r\n\t    };\r\n\t    Stream.prototype.listen_ = function (target, h, suppressEarlierFirings) {\r\n\t        var _this = this;\r\n\t        if (this.vertex.register(target))\r\n\t            Transaction_1.Transaction.currentTransaction.requestRegen();\r\n\t        var listener = new Listener_1.Listener(h, target);\r\n\t        this.listeners.push(listener);\r\n\t        if (!suppressEarlierFirings && this.firings.length != 0) {\r\n\t            var firings_1 = this.firings.slice();\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(target, function () {\r\n\t                // Anything sent already in this transaction must be sent now so that\r\n\t                // there's no order dependency between send and listen.\r\n\t                for (var i = 0; i < firings_1.length; i++)\r\n\t                    h(firings_1[i]);\r\n\t            });\r\n\t        }\r\n\t        return function () {\r\n\t            var removed = false;\r\n\t            for (var i = 0; i < _this.listeners.length; i++) {\r\n\t                if (_this.listeners[i] == listener) {\r\n\t                    _this.listeners.splice(i, 1);\r\n\t                    removed = true;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (removed)\r\n\t                _this.vertex.deregister(target);\r\n\t        };\r\n\t    };\r\n\t    return Stream;\r\n\t}());\r\n\texports.Stream = Stream;\r\n\tvar StreamWithSend = (function (_super) {\r\n\t    __extends(StreamWithSend, _super);\r\n\t    function StreamWithSend(vertex) {\r\n\t        return _super.call(this, vertex) || this;\r\n\t    }\r\n\t    StreamWithSend.prototype.setVertex__ = function (vertex) {\r\n\t        this.vertex = vertex;\r\n\t    };\r\n\t    StreamWithSend.prototype.send_ = function (a) {\r\n\t        var _this = this;\r\n\t        // We throw this error if we send into FRP logic that has been constructed\r\n\t        // but nothing is listening to it yet. We need to do it this way because\r\n\t        // it's the only way to manage memory in a language with no finalizers.\r\n\t        if (this.vertex.refCount() == 0)\r\n\t            throw new Error(\"send() was invoked before listeners were registered\");\r\n\t        if (this.firings.length == 0)\r\n\t            Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t                _this.firings = [];\r\n\t            });\r\n\t        this.firings.push(a);\r\n\t        var listeners = this.listeners.slice();\r\n\t        var _loop_1 = function (i) {\r\n\t            var h = listeners[i].h;\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(listeners[i].target, function () {\r\n\t                Transaction_1.Transaction.currentTransaction.inCallback++;\r\n\t                try {\r\n\t                    h(a);\r\n\t                    Transaction_1.Transaction.currentTransaction.inCallback--;\r\n\t                }\r\n\t                catch (err) {\r\n\t                    Transaction_1.Transaction.currentTransaction.inCallback--;\r\n\t                    throw err;\r\n\t                }\r\n\t            });\r\n\t        };\r\n\t        for (var i = 0; i < listeners.length; i++) {\r\n\t            _loop_1(i);\r\n\t        }\r\n\t    };\r\n\t    return StreamWithSend;\r\n\t}(Stream));\r\n\texports.StreamWithSend = StreamWithSend;\r\n\t/**\r\n\t * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\r\n\t */\r\n\tvar StreamLoop = (function (_super) {\r\n\t    __extends(StreamLoop, _super);\r\n\t    function StreamLoop() {\r\n\t        var _this = _super.call(this) || this;\r\n\t        _this.assigned__ = false; // to do: Figure out how to hide this\r\n\t        _this.vertex.name = \"StreamLoop\";\r\n\t        if (Transaction_1.Transaction.currentTransaction === null)\r\n\t            throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\r\n\t        return _this;\r\n\t    }\r\n\t    /**\r\n\t     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\r\n\t     * must be invoked inside the same transaction as the place where the StreamLoop is used.\r\n\t     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n\t     * or {@link Transaction#runVoid(Runnable)}.\r\n\t     */\r\n\t    StreamLoop.prototype.loop = function (sa_out) {\r\n\t        var _this = this;\r\n\t        if (this.assigned__)\r\n\t            throw new Error(\"StreamLoop looped more than once\");\r\n\t        this.assigned__ = true;\r\n\t        this.vertex.addSource(new Vertex_1.Source(sa_out.getVertex__(), function () {\r\n\t            return sa_out.listen_(_this.vertex, function (a) {\r\n\t                _this.send_(a);\r\n\t            }, false);\r\n\t        }));\r\n\t    };\r\n\t    return StreamLoop;\r\n\t}(StreamWithSend));\r\n\texports.StreamLoop = StreamLoop;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar typescript_collections_1 = __webpack_require__(5);\r\n\tvar Entry = (function () {\r\n\t    function Entry(rank, action) {\r\n\t        this.rank = rank;\r\n\t        this.action = action;\r\n\t        this.seq = Entry.nextSeq++;\r\n\t    }\r\n\t    Entry.prototype.toString = function () {\r\n\t        return this.seq.toString();\r\n\t    };\r\n\t    Entry.nextSeq = 0;\r\n\t    return Entry;\r\n\t}());\r\n\texports.Entry = Entry;\r\n\tvar Transaction = (function () {\r\n\t    function Transaction() {\r\n\t        this.inCallback = 0;\r\n\t        this.toRegen = false;\r\n\t        this.prioritizedQ = new typescript_collections_1.PriorityQueue(function (a, b) {\r\n\t            // Note: Low priority numbers are treated as \"greater\" according to this\r\n\t            // comparison, so that the lowest numbers are highest priority and go first.\r\n\t            if (a.rank.rank < b.rank.rank)\r\n\t                return 1;\r\n\t            if (a.rank.rank > b.rank.rank)\r\n\t                return -1;\r\n\t            if (a.seq < b.seq)\r\n\t                return 1;\r\n\t            if (a.seq > b.seq)\r\n\t                return -1;\r\n\t            return 0;\r\n\t        });\r\n\t        this.entries = new typescript_collections_1.Set(function (a) { return a.toString(); });\r\n\t        this.lastQ = [];\r\n\t        this.postQ = null;\r\n\t    }\r\n\t    Transaction.prototype.requestRegen = function () {\r\n\t        this.toRegen = true;\r\n\t    };\r\n\t    Transaction.prototype.prioritized = function (target, f) {\r\n\t        var e = new Entry(target, f);\r\n\t        this.prioritizedQ.enqueue(e);\r\n\t        this.entries.add(e);\r\n\t    };\r\n\t    Transaction.prototype.last = function (h) {\r\n\t        this.lastQ.push(h);\r\n\t    };\r\n\t    /**\r\n\t     * Add an action to run after all last() actions.\r\n\t     */\r\n\t    Transaction.prototype.post = function (childIx, action) {\r\n\t        if (this.postQ == null)\r\n\t            this.postQ = [];\r\n\t        // If an entry exists already, combine the old one with the new one.\r\n\t        while (this.postQ.length <= childIx)\r\n\t            this.postQ.push(null);\r\n\t        var existing = this.postQ[childIx], neu = existing === null ? action\r\n\t            : function () {\r\n\t                existing();\r\n\t                action();\r\n\t            };\r\n\t        this.postQ[childIx] = neu;\r\n\t    };\r\n\t    // If the priority queue has entries in it when we modify any of the nodes'\r\n\t    // ranks, then we need to re-generate it to make sure it's up-to-date.\r\n\t    Transaction.prototype.checkRegen = function () {\r\n\t        if (this.toRegen) {\r\n\t            this.toRegen = false;\r\n\t            this.prioritizedQ.clear();\r\n\t            var es = this.entries.toArray();\r\n\t            for (var i = 0; i < es.length; i++)\r\n\t                this.prioritizedQ.enqueue(es[i]);\r\n\t        }\r\n\t    };\r\n\t    Transaction.prototype.isActive = function () {\r\n\t        return Transaction.currentTransaction ? true : false;\r\n\t    };\r\n\t    Transaction.prototype.close = function () {\r\n\t        while (true) {\r\n\t            this.checkRegen();\r\n\t            if (this.prioritizedQ.isEmpty())\r\n\t                break;\r\n\t            var e = this.prioritizedQ.dequeue();\r\n\t            this.entries.remove(e);\r\n\t            e.action();\r\n\t        }\r\n\t        for (var i = 0; i < this.lastQ.length; i++)\r\n\t            this.lastQ[i]();\r\n\t        this.lastQ = [];\r\n\t        if (this.postQ != null) {\r\n\t            for (var i = 0; i < this.postQ.length; i++) {\r\n\t                if (this.postQ[i] != null) {\r\n\t                    var parent_1 = Transaction.currentTransaction;\r\n\t                    try {\r\n\t                        if (i > 0) {\r\n\t                            Transaction.currentTransaction = new Transaction();\r\n\t                            try {\r\n\t                                this.postQ[i]();\r\n\t                                Transaction.currentTransaction.close();\r\n\t                            }\r\n\t                            catch (err) {\r\n\t                                Transaction.currentTransaction.close();\r\n\t                                throw err;\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            Transaction.currentTransaction = null;\r\n\t                            this.postQ[i]();\r\n\t                        }\r\n\t                        Transaction.currentTransaction = parent_1;\r\n\t                    }\r\n\t                    catch (err) {\r\n\t                        Transaction.currentTransaction = parent_1;\r\n\t                        throw err;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            this.postQ = null;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Add a runnable that will be executed whenever a transaction is started.\r\n\t     * That runnable may start transactions itself, which will not cause the\r\n\t     * hooks to be run recursively.\r\n\t     *\r\n\t     * The main use case of this is the implementation of a time/alarm system.\r\n\t     */\r\n\t    Transaction.onStart = function (r) {\r\n\t        Transaction.onStartHooks.push(r);\r\n\t    };\r\n\t    Transaction.run = function (f) {\r\n\t        var transWas = Transaction.currentTransaction;\r\n\t        if (transWas === null) {\r\n\t            if (!Transaction.runningOnStartHooks) {\r\n\t                Transaction.runningOnStartHooks = true;\r\n\t                try {\r\n\t                    for (var i = 0; i < Transaction.onStartHooks.length; i++)\r\n\t                        Transaction.onStartHooks[i]();\r\n\t                }\r\n\t                finally {\r\n\t                    Transaction.runningOnStartHooks = false;\r\n\t                }\r\n\t            }\r\n\t            Transaction.currentTransaction = new Transaction();\r\n\t        }\r\n\t        try {\r\n\t            var a = f();\r\n\t            if (transWas === null) {\r\n\t                Transaction.currentTransaction.close();\r\n\t                Transaction.currentTransaction = null;\r\n\t            }\r\n\t            return a;\r\n\t        }\r\n\t        catch (err) {\r\n\t            if (transWas === null) {\r\n\t                Transaction.currentTransaction.close();\r\n\t                Transaction.currentTransaction = null;\r\n\t            }\r\n\t            throw err;\r\n\t        }\r\n\t    };\r\n\t    Transaction.currentTransaction = null;\r\n\t    Transaction.onStartHooks = [];\r\n\t    Transaction.runningOnStartHooks = false;\r\n\t    return Transaction;\r\n\t}());\r\n\texports.Transaction = Transaction;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n\t//\n\t// Licensed under MIT open source license http://opensource.org/licenses/MIT\n\t//\n\t// Orginal javascript code was by Mauricio Santos\n\t//\n\tvar _arrays = __webpack_require__(6);\n\texports.arrays = _arrays;\n\tvar Bag_1 = __webpack_require__(8);\n\texports.Bag = Bag_1.default;\n\tvar BSTree_1 = __webpack_require__(11);\n\texports.BSTree = BSTree_1.default;\n\tvar Dictionary_1 = __webpack_require__(9);\n\texports.Dictionary = Dictionary_1.default;\n\tvar Heap_1 = __webpack_require__(14);\n\texports.Heap = Heap_1.default;\n\tvar LinkedDictionary_1 = __webpack_require__(15);\n\texports.LinkedDictionary = LinkedDictionary_1.default;\n\tvar LinkedList_1 = __webpack_require__(13);\n\texports.LinkedList = LinkedList_1.default;\n\tvar MultiDictionary_1 = __webpack_require__(16);\n\texports.MultiDictionary = MultiDictionary_1.default;\n\tvar Queue_1 = __webpack_require__(12);\n\texports.Queue = Queue_1.default;\n\tvar PriorityQueue_1 = __webpack_require__(17);\n\texports.PriorityQueue = PriorityQueue_1.default;\n\tvar Set_1 = __webpack_require__(10);\n\texports.Set = Set_1.default;\n\tvar Stack_1 = __webpack_require__(18);\n\texports.Stack = Stack_1.default;\n\tvar _util = __webpack_require__(7);\n\texports.util = _util;\n\t//# sourceMappingURL=index.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\t/**\n\t * Returns the position of the first occurrence of the specified item\n\t * within the specified array.4\n\t * @param {*} array the array in which to search the element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between 2 elements.\n\t * @return {number} the position of the first occurrence of the specified element\n\t * within the specified array, or -1 if not found.\n\t */\n\tfunction indexOf(array, item, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    var length = array.length;\n\t    for (var i = 0; i < length; i++) {\n\t        if (equals(array[i], item)) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n\texports.indexOf = indexOf;\n\t/**\n\t * Returns the position of the last occurrence of the specified element\n\t * within the specified array.\n\t * @param {*} array the array in which to search the element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between 2 elements.\n\t * @return {number} the position of the last occurrence of the specified element\n\t * within the specified array or -1 if not found.\n\t */\n\tfunction lastIndexOf(array, item, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    var length = array.length;\n\t    for (var i = length - 1; i >= 0; i--) {\n\t        if (equals(array[i], item)) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n\texports.lastIndexOf = lastIndexOf;\n\t/**\n\t * Returns true if the specified array contains the specified element.\n\t * @param {*} array the array in which to search the element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function to\n\t * check equality between 2 elements.\n\t * @return {boolean} true if the specified array contains the specified element.\n\t */\n\tfunction contains(array, item, equalsFunction) {\n\t    return indexOf(array, item, equalsFunction) >= 0;\n\t}\n\texports.contains = contains;\n\t/**\n\t * Removes the first ocurrence of the specified element from the specified array.\n\t * @param {*} array the array in which to search element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function to\n\t * check equality between 2 elements.\n\t * @return {boolean} true if the array changed after this call.\n\t */\n\tfunction remove(array, item, equalsFunction) {\n\t    var index = indexOf(array, item, equalsFunction);\n\t    if (index < 0) {\n\t        return false;\n\t    }\n\t    array.splice(index, 1);\n\t    return true;\n\t}\n\texports.remove = remove;\n\t/**\n\t * Returns the number of elements in the specified array equal\n\t * to the specified object.\n\t * @param {Array} array the array in which to determine the frequency of the element.\n\t * @param {Object} item the element whose frequency is to be determined.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between 2 elements.\n\t * @return {number} the number of elements in the specified array\n\t * equal to the specified object.\n\t */\n\tfunction frequency(array, item, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    var length = array.length;\n\t    var freq = 0;\n\t    for (var i = 0; i < length; i++) {\n\t        if (equals(array[i], item)) {\n\t            freq++;\n\t        }\n\t    }\n\t    return freq;\n\t}\n\texports.frequency = frequency;\n\t/**\n\t * Returns true if the two specified arrays are equal to one another.\n\t * Two arrays are considered equal if both arrays contain the same number\n\t * of elements, and all corresponding pairs of elements in the two\n\t * arrays are equal and are in the same order.\n\t * @param {Array} array1 one array to be tested for equality.\n\t * @param {Array} array2 the other array to be tested for equality.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between elemements in the arrays.\n\t * @return {boolean} true if the two arrays are equal\n\t */\n\tfunction equals(array1, array2, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    if (array1.length !== array2.length) {\n\t        return false;\n\t    }\n\t    var length = array1.length;\n\t    for (var i = 0; i < length; i++) {\n\t        if (!equals(array1[i], array2[i])) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\texports.equals = equals;\n\t/**\n\t * Returns shallow a copy of the specified array.\n\t * @param {*} array the array to copy.\n\t * @return {Array} a copy of the specified array\n\t */\n\tfunction copy(array) {\n\t    return array.concat();\n\t}\n\texports.copy = copy;\n\t/**\n\t * Swaps the elements at the specified positions in the specified array.\n\t * @param {Array} array The array in which to swap elements.\n\t * @param {number} i the index of one element to be swapped.\n\t * @param {number} j the index of the other element to be swapped.\n\t * @return {boolean} true if the array is defined and the indexes are valid.\n\t */\n\tfunction swap(array, i, j) {\n\t    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n\t        return false;\n\t    }\n\t    var temp = array[i];\n\t    array[i] = array[j];\n\t    array[j] = temp;\n\t    return true;\n\t}\n\texports.swap = swap;\n\tfunction toString(array) {\n\t    return '[' + array.toString() + ']';\n\t}\n\texports.toString = toString;\n\t/**\n\t * Executes the provided function once for each element present in this array\n\t * starting from index 0 to length - 1.\n\t * @param {Array} array The array in which to iterate.\n\t * @param {function(Object):*} callback function to execute, it is\n\t * invoked with one argument: the element value, to break the iteration you can\n\t * optionally return false.\n\t */\n\tfunction forEach(array, callback) {\n\t    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n\t        var ele = array_1[_i];\n\t        if (callback(ele) === false) {\n\t            return;\n\t        }\n\t    }\n\t}\n\texports.forEach = forEach;\n\t//# sourceMappingURL=arrays.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\texports.has = function (obj, prop) {\n\t    return _hasOwnProperty.call(obj, prop);\n\t};\n\t/**\n\t * Default function to compare element order.\n\t * @function\n\t */\n\tfunction defaultCompare(a, b) {\n\t    if (a < b) {\n\t        return -1;\n\t    }\n\t    else if (a === b) {\n\t        return 0;\n\t    }\n\t    else {\n\t        return 1;\n\t    }\n\t}\n\texports.defaultCompare = defaultCompare;\n\t/**\n\t * Default function to test equality.\n\t * @function\n\t */\n\tfunction defaultEquals(a, b) {\n\t    return a === b;\n\t}\n\texports.defaultEquals = defaultEquals;\n\t/**\n\t * Default function to convert an object to a string.\n\t * @function\n\t */\n\tfunction defaultToString(item) {\n\t    if (item === null) {\n\t        return 'COLLECTION_NULL';\n\t    }\n\t    else if (isUndefined(item)) {\n\t        return 'COLLECTION_UNDEFINED';\n\t    }\n\t    else if (isString(item)) {\n\t        return '$s' + item;\n\t    }\n\t    else {\n\t        return '$o' + item.toString();\n\t    }\n\t}\n\texports.defaultToString = defaultToString;\n\t/**\n\t* Joins all the properies of the object using the provided join string\n\t*/\n\tfunction makeString(item, join) {\n\t    if (join === void 0) { join = ','; }\n\t    if (item === null) {\n\t        return 'COLLECTION_NULL';\n\t    }\n\t    else if (isUndefined(item)) {\n\t        return 'COLLECTION_UNDEFINED';\n\t    }\n\t    else if (isString(item)) {\n\t        return item.toString();\n\t    }\n\t    else {\n\t        var toret = '{';\n\t        var first = true;\n\t        for (var prop in item) {\n\t            if (exports.has(item, prop)) {\n\t                if (first) {\n\t                    first = false;\n\t                }\n\t                else {\n\t                    toret = toret + join;\n\t                }\n\t                toret = toret + prop + ':' + item[prop];\n\t            }\n\t        }\n\t        return toret + '}';\n\t    }\n\t}\n\texports.makeString = makeString;\n\t/**\n\t * Checks if the given argument is a function.\n\t * @function\n\t */\n\tfunction isFunction(func) {\n\t    return (typeof func) === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t/**\n\t * Checks if the given argument is undefined.\n\t * @function\n\t */\n\tfunction isUndefined(obj) {\n\t    return (typeof obj) === 'undefined';\n\t}\n\texports.isUndefined = isUndefined;\n\t/**\n\t * Checks if the given argument is a string.\n\t * @function\n\t */\n\tfunction isString(obj) {\n\t    return Object.prototype.toString.call(obj) === '[object String]';\n\t}\n\texports.isString = isString;\n\t/**\n\t * Reverses a compare function.\n\t * @function\n\t */\n\tfunction reverseCompareFunction(compareFunction) {\n\t    if (!isFunction(compareFunction)) {\n\t        return function (a, b) {\n\t            if (a < b) {\n\t                return 1;\n\t            }\n\t            else if (a === b) {\n\t                return 0;\n\t            }\n\t            else {\n\t                return -1;\n\t            }\n\t        };\n\t    }\n\t    else {\n\t        return function (d, v) {\n\t            return compareFunction(d, v) * -1;\n\t        };\n\t    }\n\t}\n\texports.reverseCompareFunction = reverseCompareFunction;\n\t/**\n\t * Returns an equal function given a compare function.\n\t * @function\n\t */\n\tfunction compareToEquals(compareFunction) {\n\t    return function (a, b) {\n\t        return compareFunction(a, b) === 0;\n\t    };\n\t}\n\texports.compareToEquals = compareToEquals;\n\t//# sourceMappingURL=util.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar Set_1 = __webpack_require__(10);\n\tvar Bag = (function () {\n\t    /**\n\t     * Creates an empty bag.\n\t     * @class <p>A bag is a special kind of set in which members are\n\t     * allowed to appear more than once.</p>\n\t     * <p>If the inserted elements are custom objects a function\n\t     * which converts elements to unique strings must be provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petToString(pet) {\n\t     *  return pet.name;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * @constructor\n\t     * @param {function(Object):string=} toStrFunction optional function used\n\t     * to convert elements to strings. If the elements aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives an object and returns a\n\t     * unique string must be provided.\n\t     */\n\t    function Bag(toStrFunction) {\n\t        this.toStrF = toStrFunction || util.defaultToString;\n\t        this.dictionary = new Dictionary_1.default(this.toStrF);\n\t        this.nElements = 0;\n\t    }\n\t    /**\n\t    * Adds nCopies of the specified object to this bag.\n\t    * @param {Object} element element to add.\n\t    * @param {number=} nCopies the number of copies to add, if this argument is\n\t    * undefined 1 copy is added.\n\t    * @return {boolean} true unless element is undefined.\n\t    */\n\t    Bag.prototype.add = function (element, nCopies) {\n\t        if (nCopies === void 0) { nCopies = 1; }\n\t        if (util.isUndefined(element) || nCopies <= 0) {\n\t            return false;\n\t        }\n\t        if (!this.contains(element)) {\n\t            var node = {\n\t                value: element,\n\t                copies: nCopies\n\t            };\n\t            this.dictionary.setValue(element, node);\n\t        }\n\t        else {\n\t            this.dictionary.getValue(element).copies += nCopies;\n\t        }\n\t        this.nElements += nCopies;\n\t        return true;\n\t    };\n\t    /**\n\t    * Counts the number of copies of the specified object in this bag.\n\t    * @param {Object} element the object to search for..\n\t    * @return {number} the number of copies of the object, 0 if not found\n\t    */\n\t    Bag.prototype.count = function (element) {\n\t        if (!this.contains(element)) {\n\t            return 0;\n\t        }\n\t        else {\n\t            return this.dictionary.getValue(element).copies;\n\t        }\n\t    };\n\t    /**\n\t     * Returns true if this bag contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this bag contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Bag.prototype.contains = function (element) {\n\t        return this.dictionary.containsKey(element);\n\t    };\n\t    /**\n\t    * Removes nCopies of the specified object to this bag.\n\t    * If the number of copies to remove is greater than the actual number\n\t    * of copies in the Bag, all copies are removed.\n\t    * @param {Object} element element to remove.\n\t    * @param {number=} nCopies the number of copies to remove, if this argument is\n\t    * undefined 1 copy is removed.\n\t    * @return {boolean} true if at least 1 element was removed.\n\t    */\n\t    Bag.prototype.remove = function (element, nCopies) {\n\t        if (nCopies === void 0) { nCopies = 1; }\n\t        if (util.isUndefined(element) || nCopies <= 0) {\n\t            return false;\n\t        }\n\t        if (!this.contains(element)) {\n\t            return false;\n\t        }\n\t        else {\n\t            var node = this.dictionary.getValue(element);\n\t            if (nCopies > node.copies) {\n\t                this.nElements -= node.copies;\n\t            }\n\t            else {\n\t                this.nElements -= nCopies;\n\t            }\n\t            node.copies -= nCopies;\n\t            if (node.copies <= 0) {\n\t                this.dictionary.remove(element);\n\t            }\n\t            return true;\n\t        }\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this big in arbitrary order,\n\t     * including multiple copies.\n\t     * @return {Array} an array containing all of the elements in this bag.\n\t     */\n\t    Bag.prototype.toArray = function () {\n\t        var a = [];\n\t        var values = this.dictionary.values();\n\t        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n\t            var node = values_1[_i];\n\t            var element = node.value;\n\t            var copies = node.copies;\n\t            for (var j = 0; j < copies; j++) {\n\t                a.push(element);\n\t            }\n\t        }\n\t        return a;\n\t    };\n\t    /**\n\t     * Returns a set of unique elements in this bag.\n\t     * @return {collections.Set<T>} a set of unique elements in this bag.\n\t     */\n\t    Bag.prototype.toSet = function () {\n\t        var toret = new Set_1.default(this.toStrF);\n\t        var elements = this.dictionary.values();\n\t        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n\t            var ele = elements_1[_i];\n\t            var value = ele.value;\n\t            toret.add(value);\n\t        }\n\t        return toret;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element\n\t     * present in this bag, including multiple copies.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element. To break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Bag.prototype.forEach = function (callback) {\n\t        this.dictionary.forEach(function (k, v) {\n\t            var value = v.value;\n\t            var copies = v.copies;\n\t            for (var i = 0; i < copies; i++) {\n\t                if (callback(value) === false) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Returns the number of elements in this bag.\n\t     * @return {number} the number of elements in this bag.\n\t     */\n\t    Bag.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this bag contains no elements.\n\t     * @return {boolean} true if this bag contains no elements.\n\t     */\n\t    Bag.prototype.isEmpty = function () {\n\t        return this.nElements === 0;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this bag.\n\t     */\n\t    Bag.prototype.clear = function () {\n\t        this.nElements = 0;\n\t        this.dictionary.clear();\n\t    };\n\t    return Bag;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Bag; // End of bag\n\t//# sourceMappingURL=Bag.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Dictionary = (function () {\n\t    /**\n\t     * Creates an empty dictionary.\n\t     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n\t     * This implementation accepts any kind of objects as keys.</p>\n\t     *\n\t     * <p>If the keys are custom objects a function which converts keys to unique\n\t     * strings must be provided. Example:</p>\n\t     * <pre>\n\t     * function petToString(pet) {\n\t     *  return pet.name;\n\t     * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object):string=} toStrFunction optional function used\n\t     * to convert keys to strings. If the keys aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives a key and returns a\n\t     * unique string must be provided.\n\t     */\n\t    function Dictionary(toStrFunction) {\n\t        this.table = {};\n\t        this.nElements = 0;\n\t        this.toStr = toStrFunction || util.defaultToString;\n\t    }\n\t    /**\n\t     * Returns the value to which this dictionary maps the specified key.\n\t     * Returns undefined if this dictionary contains no mapping for this key.\n\t     * @param {Object} key key whose associated value is to be returned.\n\t     * @return {*} the value to which this dictionary maps the specified key or\n\t     * undefined if the map contains no mapping for this key.\n\t     */\n\t    Dictionary.prototype.getValue = function (key) {\n\t        var pair = this.table['$' + this.toStr(key)];\n\t        if (util.isUndefined(pair)) {\n\t            return undefined;\n\t        }\n\t        return pair.value;\n\t    };\n\t    /**\n\t     * Associates the specified value with the specified key in this dictionary.\n\t     * If the dictionary previously contained a mapping for this key, the old\n\t     * value is replaced by the specified value.\n\t     * @param {Object} key key with which the specified value is to be\n\t     * associated.\n\t     * @param {Object} value value to be associated with the specified key.\n\t     * @return {*} previous value associated with the specified key, or undefined if\n\t     * there was no mapping for the key or if the key/value are undefined.\n\t     */\n\t    Dictionary.prototype.setValue = function (key, value) {\n\t        if (util.isUndefined(key) || util.isUndefined(value)) {\n\t            return undefined;\n\t        }\n\t        var ret;\n\t        var k = '$' + this.toStr(key);\n\t        var previousElement = this.table[k];\n\t        if (util.isUndefined(previousElement)) {\n\t            this.nElements++;\n\t            ret = undefined;\n\t        }\n\t        else {\n\t            ret = previousElement.value;\n\t        }\n\t        this.table[k] = {\n\t            key: key,\n\t            value: value\n\t        };\n\t        return ret;\n\t    };\n\t    /**\n\t     * Removes the mapping for this key from this dictionary if it is present.\n\t     * @param {Object} key key whose mapping is to be removed from the\n\t     * dictionary.\n\t     * @return {*} previous value associated with specified key, or undefined if\n\t     * there was no mapping for key.\n\t     */\n\t    Dictionary.prototype.remove = function (key) {\n\t        var k = '$' + this.toStr(key);\n\t        var previousElement = this.table[k];\n\t        if (!util.isUndefined(previousElement)) {\n\t            delete this.table[k];\n\t            this.nElements--;\n\t            return previousElement.value;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the keys in this dictionary.\n\t     * @return {Array} an array containing all of the keys in this dictionary.\n\t     */\n\t    Dictionary.prototype.keys = function () {\n\t        var array = [];\n\t        for (var name_1 in this.table) {\n\t            if (util.has(this.table, name_1)) {\n\t                var pair = this.table[name_1];\n\t                array.push(pair.key);\n\t            }\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the values in this dictionary.\n\t     * @return {Array} an array containing all of the values in this dictionary.\n\t     */\n\t    Dictionary.prototype.values = function () {\n\t        var array = [];\n\t        for (var name_2 in this.table) {\n\t            if (util.has(this.table, name_2)) {\n\t                var pair = this.table[name_2];\n\t                array.push(pair.value);\n\t            }\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t    * Executes the provided function once for each key-value pair\n\t    * present in this dictionary.\n\t    * @param {function(Object,Object):*} callback function to execute, it is\n\t    * invoked with two arguments: key and value. To break the iteration you can\n\t    * optionally return false.\n\t    */\n\t    Dictionary.prototype.forEach = function (callback) {\n\t        for (var name_3 in this.table) {\n\t            if (util.has(this.table, name_3)) {\n\t                var pair = this.table[name_3];\n\t                var ret = callback(pair.key, pair.value);\n\t                if (ret === false) {\n\t                    return;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Returns true if this dictionary contains a mapping for the specified key.\n\t     * @param {Object} key key whose presence in this dictionary is to be\n\t     * tested.\n\t     * @return {boolean} true if this dictionary contains a mapping for the\n\t     * specified key.\n\t     */\n\t    Dictionary.prototype.containsKey = function (key) {\n\t        return !util.isUndefined(this.getValue(key));\n\t    };\n\t    /**\n\t    * Removes all mappings from this dictionary.\n\t    * @this {collections.Dictionary}\n\t    */\n\t    Dictionary.prototype.clear = function () {\n\t        this.table = {};\n\t        this.nElements = 0;\n\t    };\n\t    /**\n\t     * Returns the number of keys in this dictionary.\n\t     * @return {number} the number of key-value mappings in this dictionary.\n\t     */\n\t    Dictionary.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this dictionary contains no mappings.\n\t     * @return {boolean} true if this dictionary contains no mappings.\n\t     */\n\t    Dictionary.prototype.isEmpty = function () {\n\t        return this.nElements <= 0;\n\t    };\n\t    Dictionary.prototype.toString = function () {\n\t        var toret = '{';\n\t        this.forEach(function (k, v) {\n\t            toret += \"\\n\\t\" + k + \" : \" + v;\n\t        });\n\t        return toret + '\\n}';\n\t    };\n\t    return Dictionary;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Dictionary; // End of dictionary\n\t//# sourceMappingURL=Dictionary.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar arrays = __webpack_require__(6);\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar Set = (function () {\n\t    /**\n\t     * Creates an empty set.\n\t     * @class <p>A set is a data structure that contains no duplicate items.</p>\n\t     * <p>If the inserted elements are custom objects a function\n\t     * which converts elements to strings must be provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petToString(pet) {\n\t     *  return pet.name;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * @constructor\n\t     * @param {function(Object):string=} toStringFunction optional function used\n\t     * to convert elements to strings. If the elements aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives a onject and returns a\n\t     * unique string must be provided.\n\t     */\n\t    function Set(toStringFunction) {\n\t        this.dictionary = new Dictionary_1.default(toStringFunction);\n\t    }\n\t    /**\n\t     * Returns true if this set contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this set contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Set.prototype.contains = function (element) {\n\t        return this.dictionary.containsKey(element);\n\t    };\n\t    /**\n\t     * Adds the specified element to this set if it is not already present.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if this set did not already contain the specified element.\n\t     */\n\t    Set.prototype.add = function (element) {\n\t        if (this.contains(element) || util.isUndefined(element)) {\n\t            return false;\n\t        }\n\t        else {\n\t            this.dictionary.setValue(element, element);\n\t            return true;\n\t        }\n\t    };\n\t    /**\n\t     * Performs an intersecion between this an another set.\n\t     * Removes all values that are not present this set and the given set.\n\t     * @param {collections.Set} otherSet other set.\n\t     */\n\t    Set.prototype.intersection = function (otherSet) {\n\t        var set = this;\n\t        this.forEach(function (element) {\n\t            if (!otherSet.contains(element)) {\n\t                set.remove(element);\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Performs a union between this an another set.\n\t     * Adds all values from the given set to this set.\n\t     * @param {collections.Set} otherSet other set.\n\t     */\n\t    Set.prototype.union = function (otherSet) {\n\t        var set = this;\n\t        otherSet.forEach(function (element) {\n\t            set.add(element);\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Performs a difference between this an another set.\n\t     * Removes from this set all the values that are present in the given set.\n\t     * @param {collections.Set} otherSet other set.\n\t     */\n\t    Set.prototype.difference = function (otherSet) {\n\t        var set = this;\n\t        otherSet.forEach(function (element) {\n\t            set.remove(element);\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Checks whether the given set contains all the elements in this set.\n\t     * @param {collections.Set} otherSet other set.\n\t     * @return {boolean} true if this set is a subset of the given set.\n\t     */\n\t    Set.prototype.isSubsetOf = function (otherSet) {\n\t        if (this.size() > otherSet.size()) {\n\t            return false;\n\t        }\n\t        var isSub = true;\n\t        this.forEach(function (element) {\n\t            if (!otherSet.contains(element)) {\n\t                isSub = false;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t        return isSub;\n\t    };\n\t    /**\n\t     * Removes the specified element from this set if it is present.\n\t     * @return {boolean} true if this set contained the specified element.\n\t     */\n\t    Set.prototype.remove = function (element) {\n\t        if (!this.contains(element)) {\n\t            return false;\n\t        }\n\t        else {\n\t            this.dictionary.remove(element);\n\t            return true;\n\t        }\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element\n\t     * present in this set.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one arguments: the element. To break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Set.prototype.forEach = function (callback) {\n\t        this.dictionary.forEach(function (k, v) {\n\t            return callback(v);\n\t        });\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this set in arbitrary order.\n\t     * @return {Array} an array containing all of the elements in this set.\n\t     */\n\t    Set.prototype.toArray = function () {\n\t        return this.dictionary.values();\n\t    };\n\t    /**\n\t     * Returns true if this set contains no elements.\n\t     * @return {boolean} true if this set contains no elements.\n\t     */\n\t    Set.prototype.isEmpty = function () {\n\t        return this.dictionary.isEmpty();\n\t    };\n\t    /**\n\t     * Returns the number of elements in this set.\n\t     * @return {number} the number of elements in this set.\n\t     */\n\t    Set.prototype.size = function () {\n\t        return this.dictionary.size();\n\t    };\n\t    /**\n\t     * Removes all of the elements from this set.\n\t     */\n\t    Set.prototype.clear = function () {\n\t        this.dictionary.clear();\n\t    };\n\t    /*\n\t    * Provides a string representation for display\n\t    */\n\t    Set.prototype.toString = function () {\n\t        return arrays.toString(this.toArray());\n\t    };\n\t    return Set;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Set; // end of Set\n\t//# sourceMappingURL=Set.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Queue_1 = __webpack_require__(12);\n\tvar BSTree = (function () {\n\t    /**\n\t     * Creates an empty binary search tree.\n\t     * @class <p>A binary search tree is a binary tree in which each\n\t     * internal node stores an element such that the elements stored in the\n\t     * left subtree are less than it and the elements\n\t     * stored in the right subtree are greater.</p>\n\t     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n\t     * has the following properties:</p>\n\t     * <ul>\n\t     * <li>The left subtree of a node contains only nodes with elements less\n\t     * than the node's element</li>\n\t     * <li>The right subtree of a node contains only nodes with elements greater\n\t     * than the node's element</li>\n\t     * <li>Both the left and right subtrees must also be binary search trees.</li>\n\t     * </ul>\n\t     * <p>If the inserted elements are custom objects a compare function must\n\t     * be provided at construction time, otherwise the <=, === and >= operators are\n\t     * used to compare elements. Example:</p>\n\t     * <pre>\n\t     * function compare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return -1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return 1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object,Object):number=} compareFunction optional\n\t     * function used to compare two elements. Must return a negative integer,\n\t     * zero, or a positive integer as the first argument is less than, equal to,\n\t     * or greater than the second.\n\t     */\n\t    function BSTree(compareFunction) {\n\t        this.root = null;\n\t        this.compare = compareFunction || util.defaultCompare;\n\t        this.nElements = 0;\n\t    }\n\t    /**\n\t     * Adds the specified element to this tree if it is not already present.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if this tree did not already contain the specified element.\n\t     */\n\t    BSTree.prototype.add = function (element) {\n\t        if (util.isUndefined(element)) {\n\t            return false;\n\t        }\n\t        if (this.insertNode(this.createNode(element)) !== null) {\n\t            this.nElements++;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this tree.\n\t     */\n\t    BSTree.prototype.clear = function () {\n\t        this.root = null;\n\t        this.nElements = 0;\n\t    };\n\t    /**\n\t     * Returns true if this tree contains no elements.\n\t     * @return {boolean} true if this tree contains no elements.\n\t     */\n\t    BSTree.prototype.isEmpty = function () {\n\t        return this.nElements === 0;\n\t    };\n\t    /**\n\t     * Returns the number of elements in this tree.\n\t     * @return {number} the number of elements in this tree.\n\t     */\n\t    BSTree.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this tree contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this tree contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    BSTree.prototype.contains = function (element) {\n\t        if (util.isUndefined(element)) {\n\t            return false;\n\t        }\n\t        return this.searchNode(this.root, element) !== null;\n\t    };\n\t    /**\n\t     * Removes the specified element from this tree if it is present.\n\t     * @return {boolean} true if this tree contained the specified element.\n\t     */\n\t    BSTree.prototype.remove = function (element) {\n\t        var node = this.searchNode(this.root, element);\n\t        if (node === null) {\n\t            return false;\n\t        }\n\t        this.removeNode(node);\n\t        this.nElements--;\n\t        return true;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in\n\t     * in-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.inorderTraversal = function (callback) {\n\t        this.inorderTraversalAux(this.root, callback, {\n\t            stop: false\n\t        });\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in pre-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.preorderTraversal = function (callback) {\n\t        this.preorderTraversalAux(this.root, callback, {\n\t            stop: false\n\t        });\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in post-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.postorderTraversal = function (callback) {\n\t        this.postorderTraversalAux(this.root, callback, {\n\t            stop: false\n\t        });\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in\n\t     * level-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.levelTraversal = function (callback) {\n\t        this.levelTraversalAux(this.root, callback);\n\t    };\n\t    /**\n\t     * Returns the minimum element of this tree.\n\t     * @return {*} the minimum element of this tree or undefined if this tree is\n\t     * is empty.\n\t     */\n\t    BSTree.prototype.minimum = function () {\n\t        if (this.isEmpty()) {\n\t            return undefined;\n\t        }\n\t        return this.minimumAux(this.root).element;\n\t    };\n\t    /**\n\t     * Returns the maximum element of this tree.\n\t     * @return {*} the maximum element of this tree or undefined if this tree is\n\t     * is empty.\n\t     */\n\t    BSTree.prototype.maximum = function () {\n\t        if (this.isEmpty()) {\n\t            return undefined;\n\t        }\n\t        return this.maximumAux(this.root).element;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in inorder.\n\t     * Equivalent to inorderTraversal.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    BSTree.prototype.forEach = function (callback) {\n\t        this.inorderTraversal(callback);\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this tree in in-order.\n\t     * @return {Array} an array containing all of the elements in this tree in in-order.\n\t     */\n\t    BSTree.prototype.toArray = function () {\n\t        var array = [];\n\t        this.inorderTraversal(function (element) {\n\t            array.push(element);\n\t            return true;\n\t        });\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns the height of this tree.\n\t     * @return {number} the height of this tree or -1 if is empty.\n\t     */\n\t    BSTree.prototype.height = function () {\n\t        return this.heightAux(this.root);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.searchNode = function (node, element) {\n\t        var cmp = null;\n\t        while (node !== null && cmp !== 0) {\n\t            cmp = this.compare(element, node.element);\n\t            if (cmp < 0) {\n\t                node = node.leftCh;\n\t            }\n\t            else if (cmp > 0) {\n\t                node = node.rightCh;\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.transplant = function (n1, n2) {\n\t        if (n1.parent === null) {\n\t            this.root = n2;\n\t        }\n\t        else if (n1 === n1.parent.leftCh) {\n\t            n1.parent.leftCh = n2;\n\t        }\n\t        else {\n\t            n1.parent.rightCh = n2;\n\t        }\n\t        if (n2 !== null) {\n\t            n2.parent = n1.parent;\n\t        }\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.removeNode = function (node) {\n\t        if (node.leftCh === null) {\n\t            this.transplant(node, node.rightCh);\n\t        }\n\t        else if (node.rightCh === null) {\n\t            this.transplant(node, node.leftCh);\n\t        }\n\t        else {\n\t            var y = this.minimumAux(node.rightCh);\n\t            if (y.parent !== node) {\n\t                this.transplant(y, y.rightCh);\n\t                y.rightCh = node.rightCh;\n\t                y.rightCh.parent = y;\n\t            }\n\t            this.transplant(node, y);\n\t            y.leftCh = node.leftCh;\n\t            y.leftCh.parent = y;\n\t        }\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {\n\t        if (node === null || signal.stop) {\n\t            return;\n\t        }\n\t        this.inorderTraversalAux(node.leftCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        signal.stop = callback(node.element) === false;\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.inorderTraversalAux(node.rightCh, callback, signal);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.levelTraversalAux = function (node, callback) {\n\t        var queue = new Queue_1.default();\n\t        if (node !== null) {\n\t            queue.enqueue(node);\n\t        }\n\t        while (!queue.isEmpty()) {\n\t            node = queue.dequeue();\n\t            if (callback(node.element) === false) {\n\t                return;\n\t            }\n\t            if (node.leftCh !== null) {\n\t                queue.enqueue(node.leftCh);\n\t            }\n\t            if (node.rightCh !== null) {\n\t                queue.enqueue(node.rightCh);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {\n\t        if (node === null || signal.stop) {\n\t            return;\n\t        }\n\t        signal.stop = callback(node.element) === false;\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.preorderTraversalAux(node.leftCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.preorderTraversalAux(node.rightCh, callback, signal);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {\n\t        if (node === null || signal.stop) {\n\t            return;\n\t        }\n\t        this.postorderTraversalAux(node.leftCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.postorderTraversalAux(node.rightCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        signal.stop = callback(node.element) === false;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.minimumAux = function (node) {\n\t        while (node.leftCh !== null) {\n\t            node = node.leftCh;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.maximumAux = function (node) {\n\t        while (node.rightCh !== null) {\n\t            node = node.rightCh;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t      * @private\n\t      */\n\t    BSTree.prototype.heightAux = function (node) {\n\t        if (node === null) {\n\t            return -1;\n\t        }\n\t        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n\t    };\n\t    /*\n\t    * @private\n\t    */\n\t    BSTree.prototype.insertNode = function (node) {\n\t        var parent = null;\n\t        var position = this.root;\n\t        var cmp = null;\n\t        while (position !== null) {\n\t            cmp = this.compare(node.element, position.element);\n\t            if (cmp === 0) {\n\t                return null;\n\t            }\n\t            else if (cmp < 0) {\n\t                parent = position;\n\t                position = position.leftCh;\n\t            }\n\t            else {\n\t                parent = position;\n\t                position = position.rightCh;\n\t            }\n\t        }\n\t        node.parent = parent;\n\t        if (parent === null) {\n\t            // tree is empty\n\t            this.root = node;\n\t        }\n\t        else if (this.compare(node.element, parent.element) < 0) {\n\t            parent.leftCh = node;\n\t        }\n\t        else {\n\t            parent.rightCh = node;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.createNode = function (element) {\n\t        return {\n\t            element: element,\n\t            leftCh: null,\n\t            rightCh: null,\n\t            parent: null\n\t        };\n\t    };\n\t    return BSTree;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = BSTree;\n\t//# sourceMappingURL=BSTree.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar LinkedList_1 = __webpack_require__(13);\n\tvar Queue = (function () {\n\t    /**\n\t     * Creates an empty queue.\n\t     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n\t     * element added to the queue will be the first one to be removed. This\n\t     * implementation uses a linked list as a container.\n\t     * @constructor\n\t     */\n\t    function Queue() {\n\t        this.list = new LinkedList_1.default();\n\t    }\n\t    /**\n\t     * Inserts the specified element into the end of this queue.\n\t     * @param {Object} elem the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    Queue.prototype.enqueue = function (elem) {\n\t        return this.list.add(elem);\n\t    };\n\t    /**\n\t     * Inserts the specified element into the end of this queue.\n\t     * @param {Object} elem the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    Queue.prototype.add = function (elem) {\n\t        return this.list.add(elem);\n\t    };\n\t    /**\n\t     * Retrieves and removes the head of this queue.\n\t     * @return {*} the head of this queue, or undefined if this queue is empty.\n\t     */\n\t    Queue.prototype.dequeue = function () {\n\t        if (this.list.size() !== 0) {\n\t            var el = this.list.first();\n\t            this.list.removeElementAtIndex(0);\n\t            return el;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Retrieves, but does not remove, the head of this queue.\n\t     * @return {*} the head of this queue, or undefined if this queue is empty.\n\t     */\n\t    Queue.prototype.peek = function () {\n\t        if (this.list.size() !== 0) {\n\t            return this.list.first();\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns the number of elements in this queue.\n\t     * @return {number} the number of elements in this queue.\n\t     */\n\t    Queue.prototype.size = function () {\n\t        return this.list.size();\n\t    };\n\t    /**\n\t     * Returns true if this queue contains the specified element.\n\t     * <p>If the elements inside this stack are\n\t     * not comparable with the === operator, a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName (pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} elem element to search for.\n\t     * @param {function(Object,Object):boolean=} equalsFunction optional\n\t     * function to check if two elements are equal.\n\t     * @return {boolean} true if this queue contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Queue.prototype.contains = function (elem, equalsFunction) {\n\t        return this.list.contains(elem, equalsFunction);\n\t    };\n\t    /**\n\t     * Checks if this queue is empty.\n\t     * @return {boolean} true if and only if this queue contains no items; false\n\t     * otherwise.\n\t     */\n\t    Queue.prototype.isEmpty = function () {\n\t        return this.list.size() <= 0;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this queue.\n\t     */\n\t    Queue.prototype.clear = function () {\n\t        this.list.clear();\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this queue in\n\t     * FIFO order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Queue.prototype.forEach = function (callback) {\n\t        this.list.forEach(callback);\n\t    };\n\t    return Queue;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Queue; // End of queue\n\t//# sourceMappingURL=Queue.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar arrays = __webpack_require__(6);\n\tvar LinkedList = (function () {\n\t    /**\n\t    * Creates an empty Linked List.\n\t    * @class A linked list is a data structure consisting of a group of nodes\n\t    * which together represent a sequence.\n\t    * @constructor\n\t    */\n\t    function LinkedList() {\n\t        /**\n\t        * First node in the list\n\t        * @type {Object}\n\t        * @private\n\t        */\n\t        this.firstNode = null;\n\t        /**\n\t        * Last node in the list\n\t        * @type {Object}\n\t        * @private\n\t        */\n\t        this.lastNode = null;\n\t        /**\n\t        * Number of elements in the list\n\t        * @type {number}\n\t        * @private\n\t        */\n\t        this.nElements = 0;\n\t    }\n\t    /**\n\t    * Adds an element to this list.\n\t    * @param {Object} item element to be added.\n\t    * @param {number=} index optional index to add the element. If no index is specified\n\t    * the element is added to the end of this list.\n\t    * @return {boolean} true if the element was added or false if the index is invalid\n\t    * or if the element is undefined.\n\t    */\n\t    LinkedList.prototype.add = function (item, index) {\n\t        if (util.isUndefined(index)) {\n\t            index = this.nElements;\n\t        }\n\t        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n\t            return false;\n\t        }\n\t        var newNode = this.createNode(item);\n\t        if (this.nElements === 0) {\n\t            // First node in the list.\n\t            this.firstNode = newNode;\n\t            this.lastNode = newNode;\n\t        }\n\t        else if (index === this.nElements) {\n\t            // Insert at the end.\n\t            this.lastNode.next = newNode;\n\t            this.lastNode = newNode;\n\t        }\n\t        else if (index === 0) {\n\t            // Change first node.\n\t            newNode.next = this.firstNode;\n\t            this.firstNode = newNode;\n\t        }\n\t        else {\n\t            var prev = this.nodeAtIndex(index - 1);\n\t            newNode.next = prev.next;\n\t            prev.next = newNode;\n\t        }\n\t        this.nElements++;\n\t        return true;\n\t    };\n\t    /**\n\t    * Returns the first element in this list.\n\t    * @return {*} the first element of the list or undefined if the list is\n\t    * empty.\n\t    */\n\t    LinkedList.prototype.first = function () {\n\t        if (this.firstNode !== null) {\n\t            return this.firstNode.element;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t    * Returns the last element in this list.\n\t    * @return {*} the last element in the list or undefined if the list is\n\t    * empty.\n\t    */\n\t    LinkedList.prototype.last = function () {\n\t        if (this.lastNode !== null) {\n\t            return this.lastNode.element;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns the element at the specified position in this list.\n\t     * @param {number} index desired index.\n\t     * @return {*} the element at the given index or undefined if the index is\n\t     * out of bounds.\n\t     */\n\t    LinkedList.prototype.elementAtIndex = function (index) {\n\t        var node = this.nodeAtIndex(index);\n\t        if (node === null) {\n\t            return undefined;\n\t        }\n\t        return node.element;\n\t    };\n\t    /**\n\t     * Returns the index in this list of the first occurrence of the\n\t     * specified element, or -1 if the List does not contain this element.\n\t     * <p>If the elements inside this list are\n\t     * not comparable with the === operator a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName = function(pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} item element to search for.\n\t     * @param {function(Object,Object):boolean=} equalsFunction Optional\n\t     * function used to check if two elements are equal.\n\t     * @return {number} the index in this list of the first occurrence\n\t     * of the specified element, or -1 if this list does not contain the\n\t     * element.\n\t     */\n\t    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n\t        var equalsF = equalsFunction || util.defaultEquals;\n\t        if (util.isUndefined(item)) {\n\t            return -1;\n\t        }\n\t        var currentNode = this.firstNode;\n\t        var index = 0;\n\t        while (currentNode !== null) {\n\t            if (equalsF(currentNode.element, item)) {\n\t                return index;\n\t            }\n\t            index++;\n\t            currentNode = currentNode.next;\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t       * Returns true if this list contains the specified element.\n\t       * <p>If the elements inside the list are\n\t       * not comparable with the === operator a custom equals function should be\n\t       * provided to perform searches, the function must receive two arguments and\n\t       * return true if they are equal, false otherwise. Example:</p>\n\t       *\n\t       * <pre>\n\t       * const petsAreEqualByName = function(pet1, pet2) {\n\t       *  return pet1.name === pet2.name;\n\t       * }\n\t       * </pre>\n\t       * @param {Object} item element to search for.\n\t       * @param {function(Object,Object):boolean=} equalsFunction Optional\n\t       * function used to check if two elements are equal.\n\t       * @return {boolean} true if this list contains the specified element, false\n\t       * otherwise.\n\t       */\n\t    LinkedList.prototype.contains = function (item, equalsFunction) {\n\t        return (this.indexOf(item, equalsFunction) >= 0);\n\t    };\n\t    /**\n\t     * Removes the first occurrence of the specified element in this list.\n\t     * <p>If the elements inside the list are\n\t     * not comparable with the === operator a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName = function(pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} item element to be removed from this list, if present.\n\t     * @return {boolean} true if the list contained the specified element.\n\t     */\n\t    LinkedList.prototype.remove = function (item, equalsFunction) {\n\t        var equalsF = equalsFunction || util.defaultEquals;\n\t        if (this.nElements < 1 || util.isUndefined(item)) {\n\t            return false;\n\t        }\n\t        var previous = null;\n\t        var currentNode = this.firstNode;\n\t        while (currentNode !== null) {\n\t            if (equalsF(currentNode.element, item)) {\n\t                if (currentNode === this.firstNode) {\n\t                    this.firstNode = this.firstNode.next;\n\t                    if (currentNode === this.lastNode) {\n\t                        this.lastNode = null;\n\t                    }\n\t                }\n\t                else if (currentNode === this.lastNode) {\n\t                    this.lastNode = previous;\n\t                    previous.next = currentNode.next;\n\t                    currentNode.next = null;\n\t                }\n\t                else {\n\t                    previous.next = currentNode.next;\n\t                    currentNode.next = null;\n\t                }\n\t                this.nElements--;\n\t                return true;\n\t            }\n\t            previous = currentNode;\n\t            currentNode = currentNode.next;\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this list.\n\t     */\n\t    LinkedList.prototype.clear = function () {\n\t        this.firstNode = null;\n\t        this.lastNode = null;\n\t        this.nElements = 0;\n\t    };\n\t    /**\n\t     * Returns true if this list is equal to the given list.\n\t     * Two lists are equal if they have the same elements in the same order.\n\t     * @param {LinkedList} other the other list.\n\t     * @param {function(Object,Object):boolean=} equalsFunction optional\n\t     * function used to check if two elements are equal. If the elements in the lists\n\t     * are custom objects you should provide a function, otherwise\n\t     * the === operator is used to check equality between elements.\n\t     * @return {boolean} true if this list is equal to the given list.\n\t     */\n\t    LinkedList.prototype.equals = function (other, equalsFunction) {\n\t        var eqF = equalsFunction || util.defaultEquals;\n\t        if (!(other instanceof LinkedList)) {\n\t            return false;\n\t        }\n\t        if (this.size() !== other.size()) {\n\t            return false;\n\t        }\n\t        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n\t        while (n1 !== null) {\n\t            if (!eqF(n1.element, n2.element)) {\n\t                return false;\n\t            }\n\t            n1 = n1.next;\n\t            n2 = n2.next;\n\t        }\n\t        return true;\n\t    };\n\t    /**\n\t     * Removes the element at the specified position in this list.\n\t     * @param {number} index given index.\n\t     * @return {*} removed element or undefined if the index is out of bounds.\n\t     */\n\t    LinkedList.prototype.removeElementAtIndex = function (index) {\n\t        if (index < 0 || index >= this.nElements) {\n\t            return undefined;\n\t        }\n\t        var element;\n\t        if (this.nElements === 1) {\n\t            //First node in the list.\n\t            element = this.firstNode.element;\n\t            this.firstNode = null;\n\t            this.lastNode = null;\n\t        }\n\t        else {\n\t            var previous = this.nodeAtIndex(index - 1);\n\t            if (previous === null) {\n\t                element = this.firstNode.element;\n\t                this.firstNode = this.firstNode.next;\n\t            }\n\t            else if (previous.next === this.lastNode) {\n\t                element = this.lastNode.element;\n\t                this.lastNode = previous;\n\t            }\n\t            if (previous !== null) {\n\t                element = previous.next.element;\n\t                previous.next = previous.next.next;\n\t            }\n\t        }\n\t        this.nElements--;\n\t        return element;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this list in order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    LinkedList.prototype.forEach = function (callback) {\n\t        var currentNode = this.firstNode;\n\t        while (currentNode !== null) {\n\t            if (callback(currentNode.element) === false) {\n\t                break;\n\t            }\n\t            currentNode = currentNode.next;\n\t        }\n\t    };\n\t    /**\n\t     * Reverses the order of the elements in this linked list (makes the last\n\t     * element first, and the first element last).\n\t     */\n\t    LinkedList.prototype.reverse = function () {\n\t        var previous = null;\n\t        var current = this.firstNode;\n\t        var temp = null;\n\t        while (current !== null) {\n\t            temp = current.next;\n\t            current.next = previous;\n\t            previous = current;\n\t            current = temp;\n\t        }\n\t        temp = this.firstNode;\n\t        this.firstNode = this.lastNode;\n\t        this.lastNode = temp;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this list in proper\n\t     * sequence.\n\t     * @return {Array.<*>} an array containing all of the elements in this list,\n\t     * in proper sequence.\n\t     */\n\t    LinkedList.prototype.toArray = function () {\n\t        var array = [];\n\t        var currentNode = this.firstNode;\n\t        while (currentNode !== null) {\n\t            array.push(currentNode.element);\n\t            currentNode = currentNode.next;\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns the number of elements in this list.\n\t     * @return {number} the number of elements in this list.\n\t     */\n\t    LinkedList.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this list contains no elements.\n\t     * @return {boolean} true if this list contains no elements.\n\t     */\n\t    LinkedList.prototype.isEmpty = function () {\n\t        return this.nElements <= 0;\n\t    };\n\t    LinkedList.prototype.toString = function () {\n\t        return arrays.toString(this.toArray());\n\t    };\n\t    /**\n\t     * @private\n\t     */\n\t    LinkedList.prototype.nodeAtIndex = function (index) {\n\t        if (index < 0 || index >= this.nElements) {\n\t            return null;\n\t        }\n\t        if (index === (this.nElements - 1)) {\n\t            return this.lastNode;\n\t        }\n\t        var node = this.firstNode;\n\t        for (var i = 0; i < index; i++) {\n\t            node = node.next;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t     * @private\n\t     */\n\t    LinkedList.prototype.createNode = function (item) {\n\t        return {\n\t            element: item,\n\t            next: null\n\t        };\n\t    };\n\t    return LinkedList;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = LinkedList; // End of linked list\n\t//# sourceMappingURL=LinkedList.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar collections = __webpack_require__(7);\n\tvar arrays = __webpack_require__(6);\n\tvar Heap = (function () {\n\t    /**\n\t     * Creates an empty Heap.\n\t     * @class\n\t     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n\t     * each node is smaller than each of its children and therefore a MinHeap\n\t     * This implementation uses an array to store elements.</p>\n\t     * <p>If the inserted elements are custom objects a compare function must be provided,\n\t     *  at construction time, otherwise the <=, === and >= operators are\n\t     * used to compare elements. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function compare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return -1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return 1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n\t     * reverse compare function to accomplish that behavior. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function reverseCompare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return 1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return -1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * @constructor\n\t     * @param {function(Object,Object):number=} compareFunction optional\n\t     * function used to compare two elements. Must return a negative integer,\n\t     * zero, or a positive integer as the first argument is less than, equal to,\n\t     * or greater than the second.\n\t     */\n\t    function Heap(compareFunction) {\n\t        /**\n\t         * Array used to store the elements od the heap.\n\t         * @type {Array.<Object>}\n\t         * @private\n\t         */\n\t        this.data = [];\n\t        this.compare = compareFunction || collections.defaultCompare;\n\t    }\n\t    /**\n\t     * Returns the index of the left child of the node at the given index.\n\t     * @param {number} nodeIndex The index of the node to get the left child\n\t     * for.\n\t     * @return {number} The index of the left child.\n\t     * @private\n\t     */\n\t    Heap.prototype.leftChildIndex = function (nodeIndex) {\n\t        return (2 * nodeIndex) + 1;\n\t    };\n\t    /**\n\t     * Returns the index of the right child of the node at the given index.\n\t     * @param {number} nodeIndex The index of the node to get the right child\n\t     * for.\n\t     * @return {number} The index of the right child.\n\t     * @private\n\t     */\n\t    Heap.prototype.rightChildIndex = function (nodeIndex) {\n\t        return (2 * nodeIndex) + 2;\n\t    };\n\t    /**\n\t     * Returns the index of the parent of the node at the given index.\n\t     * @param {number} nodeIndex The index of the node to get the parent for.\n\t     * @return {number} The index of the parent.\n\t     * @private\n\t     */\n\t    Heap.prototype.parentIndex = function (nodeIndex) {\n\t        return Math.floor((nodeIndex - 1) / 2);\n\t    };\n\t    /**\n\t     * Returns the index of the smaller child node (if it exists).\n\t     * @param {number} leftChild left child index.\n\t     * @param {number} rightChild right child index.\n\t     * @return {number} the index with the minimum value or -1 if it doesn't\n\t     * exists.\n\t     * @private\n\t     */\n\t    Heap.prototype.minIndex = function (leftChild, rightChild) {\n\t        if (rightChild >= this.data.length) {\n\t            if (leftChild >= this.data.length) {\n\t                return -1;\n\t            }\n\t            else {\n\t                return leftChild;\n\t            }\n\t        }\n\t        else {\n\t            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n\t                return leftChild;\n\t            }\n\t            else {\n\t                return rightChild;\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Moves the node at the given index up to its proper place in the heap.\n\t     * @param {number} index The index of the node to move up.\n\t     * @private\n\t     */\n\t    Heap.prototype.siftUp = function (index) {\n\t        var parent = this.parentIndex(index);\n\t        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n\t            arrays.swap(this.data, parent, index);\n\t            index = parent;\n\t            parent = this.parentIndex(index);\n\t        }\n\t    };\n\t    /**\n\t     * Moves the node at the given index down to its proper place in the heap.\n\t     * @param {number} nodeIndex The index of the node to move down.\n\t     * @private\n\t     */\n\t    Heap.prototype.siftDown = function (nodeIndex) {\n\t        //smaller child index\n\t        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n\t        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n\t            arrays.swap(this.data, min, nodeIndex);\n\t            nodeIndex = min;\n\t            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n\t        }\n\t    };\n\t    /**\n\t     * Retrieves but does not remove the root element of this heap.\n\t     * @return {*} The value at the root of the heap. Returns undefined if the\n\t     * heap is empty.\n\t     */\n\t    Heap.prototype.peek = function () {\n\t        if (this.data.length > 0) {\n\t            return this.data[0];\n\t        }\n\t        else {\n\t            return undefined;\n\t        }\n\t    };\n\t    /**\n\t     * Adds the given element into the heap.\n\t     * @param {*} element the element.\n\t     * @return true if the element was added or fals if it is undefined.\n\t     */\n\t    Heap.prototype.add = function (element) {\n\t        if (collections.isUndefined(element)) {\n\t            return undefined;\n\t        }\n\t        this.data.push(element);\n\t        this.siftUp(this.data.length - 1);\n\t        return true;\n\t    };\n\t    /**\n\t     * Retrieves and removes the root element of this heap.\n\t     * @return {*} The value removed from the root of the heap. Returns\n\t     * undefined if the heap is empty.\n\t     */\n\t    Heap.prototype.removeRoot = function () {\n\t        if (this.data.length > 0) {\n\t            var obj = this.data[0];\n\t            this.data[0] = this.data[this.data.length - 1];\n\t            this.data.splice(this.data.length - 1, 1);\n\t            if (this.data.length > 0) {\n\t                this.siftDown(0);\n\t            }\n\t            return obj;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns true if this heap contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this Heap contains the specified element, false\n\t     * otherwise.\n\t     */\n\t    Heap.prototype.contains = function (element) {\n\t        var equF = collections.compareToEquals(this.compare);\n\t        return arrays.contains(this.data, element, equF);\n\t    };\n\t    /**\n\t     * Returns the number of elements in this heap.\n\t     * @return {number} the number of elements in this heap.\n\t     */\n\t    Heap.prototype.size = function () {\n\t        return this.data.length;\n\t    };\n\t    /**\n\t     * Checks if this heap is empty.\n\t     * @return {boolean} true if and only if this heap contains no items; false\n\t     * otherwise.\n\t     */\n\t    Heap.prototype.isEmpty = function () {\n\t        return this.data.length <= 0;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this heap.\n\t     */\n\t    Heap.prototype.clear = function () {\n\t        this.data.length = 0;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this heap in\n\t     * no particular order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Heap.prototype.forEach = function (callback) {\n\t        arrays.forEach(this.data, callback);\n\t    };\n\t    return Heap;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Heap;\n\t//# sourceMappingURL=Heap.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar util = __webpack_require__(7);\n\t/**\n\t * This class is used by the LinkedDictionary Internally\n\t * Has to be a class, not an interface, because it needs to have\n\t * the 'unlink' function defined.\n\t */\n\tvar LinkedDictionaryPair = (function () {\n\t    function LinkedDictionaryPair(key, value) {\n\t        this.key = key;\n\t        this.value = value;\n\t    }\n\t    LinkedDictionaryPair.prototype.unlink = function () {\n\t        this.prev.next = this.next;\n\t        this.next.prev = this.prev;\n\t    };\n\t    return LinkedDictionaryPair;\n\t}());\n\tvar LinkedDictionary = (function (_super) {\n\t    __extends(LinkedDictionary, _super);\n\t    function LinkedDictionary(toStrFunction) {\n\t        _super.call(this, toStrFunction);\n\t        this.head = new LinkedDictionaryPair(null, null);\n\t        this.tail = new LinkedDictionaryPair(null, null);\n\t        this.head.next = this.tail;\n\t        this.tail.prev = this.head;\n\t    }\n\t    /**\n\t     * Inserts the new node to the 'tail' of the list, updating the\n\t     * neighbors, and moving 'this.tail' (the End of List indicator) that\n\t     * to the end.\n\t     */\n\t    LinkedDictionary.prototype.appendToTail = function (entry) {\n\t        var lastNode = this.tail.prev;\n\t        lastNode.next = entry;\n\t        entry.prev = lastNode;\n\t        entry.next = this.tail;\n\t        this.tail.prev = entry;\n\t    };\n\t    /**\n\t     * Retrieves a linked dictionary from the table internally\n\t     */\n\t    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n\t        if (util.isUndefined(key)) {\n\t            return undefined;\n\t        }\n\t        var k = '$' + this.toStr(key);\n\t        var pair = (this.table[k]);\n\t        return pair;\n\t    };\n\t    /**\n\t     * Returns the value to which this dictionary maps the specified key.\n\t     * Returns undefined if this dictionary contains no mapping for this key.\n\t     * @param {Object} key key whose associated value is to be returned.\n\t     * @return {*} the value to which this dictionary maps the specified key or\n\t     * undefined if the map contains no mapping for this key.\n\t     */\n\t    LinkedDictionary.prototype.getValue = function (key) {\n\t        var pair = this.getLinkedDictionaryPair(key);\n\t        if (!util.isUndefined(pair)) {\n\t            return pair.value;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Removes the mapping for this key from this dictionary if it is present.\n\t     * Also, if a value is present for this key, the entry is removed from the\n\t     * insertion ordering.\n\t     * @param {Object} key key whose mapping is to be removed from the\n\t     * dictionary.\n\t     * @return {*} previous value associated with specified key, or undefined if\n\t     * there was no mapping for key.\n\t     */\n\t    LinkedDictionary.prototype.remove = function (key) {\n\t        var pair = this.getLinkedDictionaryPair(key);\n\t        if (!util.isUndefined(pair)) {\n\t            _super.prototype.remove.call(this, key); // This will remove it from the table\n\t            pair.unlink(); // This will unlink it from the chain\n\t            return pair.value;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t    * Removes all mappings from this LinkedDictionary.\n\t    * @this {collections.LinkedDictionary}\n\t    */\n\t    LinkedDictionary.prototype.clear = function () {\n\t        _super.prototype.clear.call(this);\n\t        this.head.next = this.tail;\n\t        this.tail.prev = this.head;\n\t    };\n\t    /**\n\t     * Internal function used when updating an existing KeyValue pair.\n\t     * It places the new value indexed by key into the table, but maintains\n\t     * its place in the linked ordering.\n\t     */\n\t    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n\t        var k = '$' + this.toStr(newPair.key);\n\t        // set the new Pair's links to existingPair's links\n\t        newPair.next = oldPair.next;\n\t        newPair.prev = oldPair.prev;\n\t        // Delete Existing Pair from the table, unlink it from chain.\n\t        // As a result, the nElements gets decremented by this operation\n\t        this.remove(oldPair.key);\n\t        // Link new Pair in place of where oldPair was,\n\t        // by pointing the old pair's neighbors to it.\n\t        newPair.prev.next = newPair;\n\t        newPair.next.prev = newPair;\n\t        this.table[k] = newPair;\n\t        // To make up for the fact that the number of elements was decremented,\n\t        // We need to increase it by one.\n\t        ++this.nElements;\n\t    };\n\t    /**\n\t     * Associates the specified value with the specified key in this dictionary.\n\t     * If the dictionary previously contained a mapping for this key, the old\n\t     * value is replaced by the specified value.\n\t     * Updating of a key that already exists maintains its place in the\n\t     * insertion order into the map.\n\t     * @param {Object} key key with which the specified value is to be\n\t     * associated.\n\t     * @param {Object} value value to be associated with the specified key.\n\t     * @return {*} previous value associated with the specified key, or undefined if\n\t     * there was no mapping for the key or if the key/value are undefined.\n\t     */\n\t    LinkedDictionary.prototype.setValue = function (key, value) {\n\t        if (util.isUndefined(key) || util.isUndefined(value)) {\n\t            return undefined;\n\t        }\n\t        var existingPair = this.getLinkedDictionaryPair(key);\n\t        var newPair = new LinkedDictionaryPair(key, value);\n\t        var k = '$' + this.toStr(key);\n\t        // If there is already an element for that key, we\n\t        // keep it's place in the LinkedList\n\t        if (!util.isUndefined(existingPair)) {\n\t            this.replace(existingPair, newPair);\n\t            return existingPair.value;\n\t        }\n\t        else {\n\t            this.appendToTail(newPair);\n\t            this.table[k] = newPair;\n\t            ++this.nElements;\n\t            return undefined;\n\t        }\n\t    };\n\t    /**\n\t     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n\t     * by insertion order.\n\t     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n\t     * ordered by insertion order.\n\t     */\n\t    LinkedDictionary.prototype.keys = function () {\n\t        var array = [];\n\t        this.forEach(function (key, value) {\n\t            array.push(key);\n\t        });\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n\t     * insertion order.\n\t     * @return {Array} an array containing all of the values in this LinkedDictionary,\n\t     * ordered by insertion order.\n\t     */\n\t    LinkedDictionary.prototype.values = function () {\n\t        var array = [];\n\t        this.forEach(function (key, value) {\n\t            array.push(value);\n\t        });\n\t        return array;\n\t    };\n\t    /**\n\t    * Executes the provided function once for each key-value pair\n\t    * present in this LinkedDictionary. It is done in the order of insertion\n\t    * into the LinkedDictionary\n\t    * @param {function(Object,Object):*} callback function to execute, it is\n\t    * invoked with two arguments: key and value. To break the iteration you can\n\t    * optionally return false.\n\t    */\n\t    LinkedDictionary.prototype.forEach = function (callback) {\n\t        var crawlNode = this.head.next;\n\t        while (crawlNode.next != null) {\n\t            var ret = callback(crawlNode.key, crawlNode.value);\n\t            if (ret === false) {\n\t                return;\n\t            }\n\t            crawlNode = crawlNode.next;\n\t        }\n\t    };\n\t    return LinkedDictionary;\n\t}(Dictionary_1.default));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = LinkedDictionary; // End of LinkedDictionary\n\t// /**\n\t//  * Returns true if this dictionary is equal to the given dictionary.\n\t//  * Two dictionaries are equal if they contain the same mappings.\n\t//  * @param {collections.Dictionary} other the other dictionary.\n\t//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n\t//  * function used to check if two values are equal.\n\t//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n\t//  */\n\t// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n\t// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n\t// \tif(!(other instanceof collections.Dictionary)){\n\t// \t\treturn false;\n\t// \t}\n\t// \tif(this.size() !== other.size()){\n\t// \t\treturn false;\n\t// \t}\n\t// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n\t// }\n\t//# sourceMappingURL=LinkedDictionary.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar arrays = __webpack_require__(6);\n\tvar MultiDictionary = (function () {\n\t    /**\n\t     * Creates an empty multi dictionary.\n\t     * @class <p>A multi dictionary is a special kind of dictionary that holds\n\t     * multiple values against each key. Setting a value into the dictionary will\n\t     * add the value to an array at that key. Getting a key will return an array,\n\t     * holding all the values set to that key.\n\t     * You can configure to allow duplicates in the values.\n\t     * This implementation accepts any kind of objects as keys.</p>\n\t     *\n\t     * <p>If the keys are custom objects a function which converts keys to strings must be\n\t     * provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petToString(pet) {\n\t       *  return pet.name;\n\t       * }\n\t     * </pre>\n\t     * <p>If the values are custom objects a function to check equality between values\n\t     * must be provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petsAreEqualByAge(pet1,pet2) {\n\t       *  return pet1.age===pet2.age;\n\t       * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object):string=} toStrFunction optional function\n\t     * to convert keys to strings. If the keys aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives a key and returns a\n\t     * unique string must be provided.\n\t     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n\t     * function to check if two values are equal.\n\t     *\n\t     * @param allowDuplicateValues\n\t     */\n\t    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n\t        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n\t        this.dict = new Dictionary_1.default(toStrFunction);\n\t        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n\t        this.allowDuplicate = allowDuplicateValues;\n\t    }\n\t    /**\n\t    * Returns an array holding the values to which this dictionary maps\n\t    * the specified key.\n\t    * Returns an empty array if this dictionary contains no mappings for this key.\n\t    * @param {Object} key key whose associated values are to be returned.\n\t    * @return {Array} an array holding the values to which this dictionary maps\n\t    * the specified key.\n\t    */\n\t    MultiDictionary.prototype.getValue = function (key) {\n\t        var values = this.dict.getValue(key);\n\t        if (util.isUndefined(values)) {\n\t            return [];\n\t        }\n\t        return arrays.copy(values);\n\t    };\n\t    /**\n\t     * Adds the value to the array associated with the specified key, if\n\t     * it is not already present.\n\t     * @param {Object} key key with which the specified value is to be\n\t     * associated.\n\t     * @param {Object} value the value to add to the array at the key\n\t     * @return {boolean} true if the value was not already associated with that key.\n\t     */\n\t    MultiDictionary.prototype.setValue = function (key, value) {\n\t        if (util.isUndefined(key) || util.isUndefined(value)) {\n\t            return false;\n\t        }\n\t        if (!this.containsKey(key)) {\n\t            this.dict.setValue(key, [value]);\n\t            return true;\n\t        }\n\t        var array = this.dict.getValue(key);\n\t        if (!this.allowDuplicate) {\n\t            if (arrays.contains(array, value, this.equalsF)) {\n\t                return false;\n\t            }\n\t        }\n\t        array.push(value);\n\t        return true;\n\t    };\n\t    /**\n\t     * Removes the specified values from the array of values associated with the\n\t     * specified key. If a value isn't given, all values associated with the specified\n\t     * key are removed.\n\t     * @param {Object} key key whose mapping is to be removed from the\n\t     * dictionary.\n\t     * @param {Object=} value optional argument to specify the value to remove\n\t     * from the array associated with the specified key.\n\t     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n\t     * if the specified value isn't associated with the specified key.\n\t     */\n\t    MultiDictionary.prototype.remove = function (key, value) {\n\t        if (util.isUndefined(value)) {\n\t            var v = this.dict.remove(key);\n\t            return !util.isUndefined(v);\n\t        }\n\t        var array = this.dict.getValue(key);\n\t        if (arrays.remove(array, value, this.equalsF)) {\n\t            if (array.length === 0) {\n\t                this.dict.remove(key);\n\t            }\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the keys in this dictionary.\n\t     * @return {Array} an array containing all of the keys in this dictionary.\n\t     */\n\t    MultiDictionary.prototype.keys = function () {\n\t        return this.dict.keys();\n\t    };\n\t    /**\n\t     * Returns an array containing all of the values in this dictionary.\n\t     * @return {Array} an array containing all of the values in this dictionary.\n\t     */\n\t    MultiDictionary.prototype.values = function () {\n\t        var values = this.dict.values();\n\t        var array = [];\n\t        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n\t            var v = values_1[_i];\n\t            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n\t                var w = v_1[_a];\n\t                array.push(w);\n\t            }\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns true if this dictionary at least one value associatted the specified key.\n\t     * @param {Object} key key whose presence in this dictionary is to be\n\t     * tested.\n\t     * @return {boolean} true if this dictionary at least one value associatted\n\t     * the specified key.\n\t     */\n\t    MultiDictionary.prototype.containsKey = function (key) {\n\t        return this.dict.containsKey(key);\n\t    };\n\t    /**\n\t     * Removes all mappings from this dictionary.\n\t     */\n\t    MultiDictionary.prototype.clear = function () {\n\t        this.dict.clear();\n\t    };\n\t    /**\n\t     * Returns the number of keys in this dictionary.\n\t     * @return {number} the number of key-value mappings in this dictionary.\n\t     */\n\t    MultiDictionary.prototype.size = function () {\n\t        return this.dict.size();\n\t    };\n\t    /**\n\t     * Returns true if this dictionary contains no mappings.\n\t     * @return {boolean} true if this dictionary contains no mappings.\n\t     */\n\t    MultiDictionary.prototype.isEmpty = function () {\n\t        return this.dict.isEmpty();\n\t    };\n\t    return MultiDictionary;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = MultiDictionary; // end of multi dictionary\n\t//# sourceMappingURL=MultiDictionary.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Heap_1 = __webpack_require__(14);\n\tvar PriorityQueue = (function () {\n\t    /**\n\t     * Creates an empty priority queue.\n\t     * @class <p>In a priority queue each element is associated with a \"priority\",\n\t     * elements are dequeued in highest-priority-first order (the elements with the\n\t     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n\t     * If the inserted elements are custom objects a compare function must be provided,\n\t     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n\t     * <pre>\n\t     * function compare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return -1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return 1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object,Object):number=} compareFunction optional\n\t     * function used to compare two element priorities. Must return a negative integer,\n\t     * zero, or a positive integer as the first argument is less than, equal to,\n\t     * or greater than the second.\n\t     */\n\t    function PriorityQueue(compareFunction) {\n\t        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n\t    }\n\t    /**\n\t     * Inserts the specified element into this priority queue.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    PriorityQueue.prototype.enqueue = function (element) {\n\t        return this.heap.add(element);\n\t    };\n\t    /**\n\t     * Inserts the specified element into this priority queue.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    PriorityQueue.prototype.add = function (element) {\n\t        return this.heap.add(element);\n\t    };\n\t    /**\n\t     * Retrieves and removes the highest priority element of this queue.\n\t     * @return {*} the the highest priority element of this queue,\n\t     *  or undefined if this queue is empty.\n\t     */\n\t    PriorityQueue.prototype.dequeue = function () {\n\t        if (this.heap.size() !== 0) {\n\t            var el = this.heap.peek();\n\t            this.heap.removeRoot();\n\t            return el;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Retrieves, but does not remove, the highest priority element of this queue.\n\t     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n\t     */\n\t    PriorityQueue.prototype.peek = function () {\n\t        return this.heap.peek();\n\t    };\n\t    /**\n\t     * Returns true if this priority queue contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this priority queue contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    PriorityQueue.prototype.contains = function (element) {\n\t        return this.heap.contains(element);\n\t    };\n\t    /**\n\t     * Checks if this priority queue is empty.\n\t     * @return {boolean} true if and only if this priority queue contains no items; false\n\t     * otherwise.\n\t     */\n\t    PriorityQueue.prototype.isEmpty = function () {\n\t        return this.heap.isEmpty();\n\t    };\n\t    /**\n\t     * Returns the number of elements in this priority queue.\n\t     * @return {number} the number of elements in this priority queue.\n\t     */\n\t    PriorityQueue.prototype.size = function () {\n\t        return this.heap.size();\n\t    };\n\t    /**\n\t     * Removes all of the elements from this priority queue.\n\t     */\n\t    PriorityQueue.prototype.clear = function () {\n\t        this.heap.clear();\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this queue in\n\t     * no particular order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    PriorityQueue.prototype.forEach = function (callback) {\n\t        this.heap.forEach(callback);\n\t    };\n\t    return PriorityQueue;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = PriorityQueue; // end of priority queue\n\t//# sourceMappingURL=PriorityQueue.js.map\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar LinkedList_1 = __webpack_require__(13);\n\tvar Stack = (function () {\n\t    /**\n\t     * Creates an empty Stack.\n\t     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n\t     * element added to the stack will be the first one to be removed. This\n\t     * implementation uses a linked list as a container.\n\t     * @constructor\n\t     */\n\t    function Stack() {\n\t        this.list = new LinkedList_1.default();\n\t    }\n\t    /**\n\t     * Pushes an item onto the top of this stack.\n\t     * @param {Object} elem the element to be pushed onto this stack.\n\t     * @return {boolean} true if the element was pushed or false if it is undefined.\n\t     */\n\t    Stack.prototype.push = function (elem) {\n\t        return this.list.add(elem, 0);\n\t    };\n\t    /**\n\t     * Pushes an item onto the top of this stack.\n\t     * @param {Object} elem the element to be pushed onto this stack.\n\t     * @return {boolean} true if the element was pushed or false if it is undefined.\n\t     */\n\t    Stack.prototype.add = function (elem) {\n\t        return this.list.add(elem, 0);\n\t    };\n\t    /**\n\t     * Removes the object at the top of this stack and returns that object.\n\t     * @return {*} the object at the top of this stack or undefined if the\n\t     * stack is empty.\n\t     */\n\t    Stack.prototype.pop = function () {\n\t        return this.list.removeElementAtIndex(0);\n\t    };\n\t    /**\n\t     * Looks at the object at the top of this stack without removing it from the\n\t     * stack.\n\t     * @return {*} the object at the top of this stack or undefined if the\n\t     * stack is empty.\n\t     */\n\t    Stack.prototype.peek = function () {\n\t        return this.list.first();\n\t    };\n\t    /**\n\t     * Returns the number of elements in this stack.\n\t     * @return {number} the number of elements in this stack.\n\t     */\n\t    Stack.prototype.size = function () {\n\t        return this.list.size();\n\t    };\n\t    /**\n\t     * Returns true if this stack contains the specified element.\n\t     * <p>If the elements inside this stack are\n\t     * not comparable with the === operator, a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName (pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} elem element to search for.\n\t     * @param {function(Object,Object):boolean=} equalsFunction optional\n\t     * function to check if two elements are equal.\n\t     * @return {boolean} true if this stack contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Stack.prototype.contains = function (elem, equalsFunction) {\n\t        return this.list.contains(elem, equalsFunction);\n\t    };\n\t    /**\n\t     * Checks if this stack is empty.\n\t     * @return {boolean} true if and only if this stack contains no items; false\n\t     * otherwise.\n\t     */\n\t    Stack.prototype.isEmpty = function () {\n\t        return this.list.isEmpty();\n\t    };\n\t    /**\n\t     * Removes all of the elements from this stack.\n\t     */\n\t    Stack.prototype.clear = function () {\n\t        this.list.clear();\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this stack in\n\t     * LIFO order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Stack.prototype.forEach = function (callback) {\n\t        this.list.forEach(callback);\n\t    };\n\t    return Stack;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Stack; // End of stack\n\t//# sourceMappingURL=Stack.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar CoalesceHandler = (function () {\r\n\t    function CoalesceHandler(f, out) {\r\n\t        this.f = Lambda_1.Lambda2_toFunction(f);\r\n\t        this.out = out;\r\n\t        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(Lambda_1.toSources(Lambda_1.Lambda2_deps(f)));\r\n\t        this.accumValid = false;\r\n\t    }\r\n\t    CoalesceHandler.prototype.send_ = function (a) {\r\n\t        var _this = this;\r\n\t        if (this.accumValid)\r\n\t            this.accum = this.f(this.accum, a);\r\n\t        else {\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(this.out.getVertex__(), function () {\r\n\t                _this.out.send_(_this.accum);\r\n\t                _this.accumValid = false;\r\n\t                _this.accum = null;\r\n\t            });\r\n\t            this.accum = a;\r\n\t            this.accumValid = true;\r\n\t        }\r\n\t    };\r\n\t    return CoalesceHandler;\r\n\t}());\r\n\texports.CoalesceHandler = CoalesceHandler;\r\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar Lazy_1 = __webpack_require__(21);\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar Operational_1 = __webpack_require__(22);\r\n\tvar LazySample = (function () {\r\n\t    function LazySample(cell) {\r\n\t        this.hasValue = false;\r\n\t        this.value = null;\r\n\t        this.cell = cell;\r\n\t    }\r\n\t    return LazySample;\r\n\t}());\r\n\tvar ApplyState = (function () {\r\n\t    function ApplyState() {\r\n\t        this.f = null;\r\n\t        this.f_present = false;\r\n\t        this.a = null;\r\n\t        this.a_present = false;\r\n\t    }\r\n\t    return ApplyState;\r\n\t}());\r\n\tvar Cell = (function () {\r\n\t    function Cell(initValue, str) {\r\n\t        var _this = this;\r\n\t        this.value = initValue;\r\n\t        if (!str) {\r\n\t            this.str = new Stream_1.Stream();\r\n\t            this.vertex = new Vertex_1.Vertex(\"ConstCell\", 0, []);\r\n\t        }\r\n\t        else\r\n\t            Transaction_1.Transaction.run(function () { return _this.setStream(str); });\r\n\t    }\r\n\t    Cell.prototype.setStream = function (str) {\r\n\t        var _this = this;\r\n\t        this.str = str;\r\n\t        var me = this, src = new Vertex_1.Source(str.getVertex__(), function () {\r\n\t            return str.listen_(me.vertex, function (a) {\r\n\t                if (me.valueUpdate == null) {\r\n\t                    Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t                        me.value = me.valueUpdate;\r\n\t                        me.lazyInitValue = null;\r\n\t                        me.valueUpdate = null;\r\n\t                    });\r\n\t                }\r\n\t                me.valueUpdate = a;\r\n\t            }, false);\r\n\t        });\r\n\t        this.vertex = new Vertex_1.Vertex(\"Cell\", 0, [src]);\r\n\t        // We do a trick here of registering the source for the duration of the current\r\n\t        // transaction so that we are guaranteed to catch any stream events that\r\n\t        // occur in the same transaction.\r\n\t        this.vertex.register(Vertex_1.Vertex.NULL);\r\n\t        Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t            _this.vertex.deregister(Vertex_1.Vertex.NULL);\r\n\t        });\r\n\t    };\r\n\t    Cell.prototype.getVertex__ = function () {\r\n\t        return this.vertex;\r\n\t    };\r\n\t    Cell.prototype.getStream__ = function () {\r\n\t        return this.str;\r\n\t    };\r\n\t    /**\r\n\t     * Sample the cell's current value.\r\n\t     * <p>\r\n\t     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\r\n\t     * miss any updates, but in many circumstances it makes sense.\r\n\t     * <p>\r\n\t     * NOTE: In the Java and other versions of Sodium, using sample() inside map(), filter() and\r\n\t     * merge() is encouraged. In the Javascript/Typescript version, not so much, for the\r\n\t     * following reason: The memory management is different in the Javascript version, and this\r\n\t     * requires us to track all dependencies. In order for the use of sample() inside\r\n\t     * a closure to be correct, the cell that was sample()d inside the closure would have to be\r\n\t     * declared explicitly using the helpers lambda1(), lambda2(), etc. Because this is\r\n\t     * something that can be got wrong, we don't encourage this kind of use of sample() in\r\n\t     * Javascript. Better and simpler to use snapshot().\r\n\t     * <p>\r\n\t     * NOTE: If you need to sample() a cell, you have to make sure it's \"alive\" in terms of\r\n\t     * memory management or it will ignore updates. To make a cell work correctly\r\n\t     * with sample(), you have to ensure that it's being used. One way to guarantee this is\r\n\t     * to register a dummy listener on the cell. It will also work to have it referenced\r\n\t     * by something that is ultimately being listened to.\r\n\t     */\r\n\t    Cell.prototype.sample = function () {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.run(function () { return _this.sampleNoTrans__(); });\r\n\t    };\r\n\t    Cell.prototype.sampleNoTrans__ = function () {\r\n\t        return this.value;\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\r\n\t     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\r\n\t     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\r\n\t     */\r\n\t    Cell.prototype.sampleLazy = function () {\r\n\t        var me = this;\r\n\t        return Transaction_1.Transaction.run(function () { return me.sampleLazyNoTrans__(); });\r\n\t    };\r\n\t    Cell.prototype.sampleLazyNoTrans__ = function () {\r\n\t        var me = this, s = new LazySample(me);\r\n\t        Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\r\n\t            s.hasValue = true;\r\n\t            s.cell = null;\r\n\t        });\r\n\t        return new Lazy_1.Lazy(function () {\r\n\t            if (s.hasValue)\r\n\t                return s.value;\r\n\t            else\r\n\t                return s.cell.sample();\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Transform the cell's value according to the supplied function, so the returned Cell\r\n\t     * always reflects the value of the function applied to the input Cell's value.\r\n\t     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.map = function (f) {\r\n\t        var c = this;\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            return Operational_1.Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda_1.Lambda1_toFunction(f)));\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a binary function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift = function (b, fn0) {\r\n\t        var fn = Lambda_1.Lambda2_toFunction(fn0), cf = this.map(function (aa) { return function (bb) { return fn(aa, bb); }; });\r\n\t        return Cell.apply(cf, b, Lambda_1.toSources(Lambda_1.Lambda2_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a ternary function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift3 = function (b, c, fn0) {\r\n\t        var fn = Lambda_1.Lambda3_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return fn(aa, bb, cc); }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(cf, b), c, Lambda_1.toSources(Lambda_1.Lambda3_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a quaternary function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift4 = function (b, c, d, fn0) {\r\n\t        var fn = Lambda_1.Lambda4_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return fn(aa, bb, cc, dd); }; }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(Cell.apply(cf, b), c), d, Lambda_1.toSources(Lambda_1.Lambda4_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift5 = function (b, c, d, e, fn0) {\r\n\t        var fn = Lambda_1.Lambda5_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return fn(aa, bb, cc, dd, ee); }; }; }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e, Lambda_1.toSources(Lambda_1.Lambda5_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift6 = function (b, c, d, e, f, fn0) {\r\n\t        var fn = Lambda_1.Lambda6_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return function (ff) { return fn(aa, bb, cc, dd, ee, ff); }; }; }; }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e), f, Lambda_1.toSources(Lambda_1.Lambda6_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Apply a value inside a cell to a function inside a cell. This is the\r\n\t     * primitive for all function lifting.\r\n\t     */\r\n\t    Cell.apply = function (cf, ca, sources) {\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            var state = new ApplyState(), out = new Stream_1.StreamWithSend(), cf_value = Operational_1.Operational.value(cf), ca_value = Operational_1.Operational.value(ca), src1 = new Vertex_1.Source(cf_value.getVertex__(), function () {\r\n\t                return cf_value.listen_(out.getVertex__(), function (f) {\r\n\t                    state.f = f;\r\n\t                    state.f_present = true;\r\n\t                    if (state.a_present)\r\n\t                        out.send_(state.f(state.a));\r\n\t                }, false);\r\n\t            }), src2 = new Vertex_1.Source(ca_value.getVertex__(), function () {\r\n\t                return ca_value.listen_(out.getVertex__(), function (a) {\r\n\t                    state.a = a;\r\n\t                    state.a_present = true;\r\n\t                    if (state.f_present)\r\n\t                        out.send_(state.f(state.a));\r\n\t                }, false);\r\n\t            });\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"apply\", 0, [src1, src2].concat(sources ? sources : [])));\r\n\t            return out.coalesce__(function (l, r) { return r; }).holdLazy(new Lazy_1.Lazy(function () {\r\n\t                return cf.sampleNoTrans__()(ca.sampleNoTrans__());\r\n\t            }));\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Unwrap a cell inside another cell to give a time-varying cell implementation.\r\n\t     */\r\n\t    Cell.switchC = function (cca) {\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            var za = cca.sampleLazy().map(function (ba) { return ba.sample(); }), out = new Stream_1.StreamWithSend();\r\n\t            var last_ca = null;\r\n\t            var cca_value = Operational_1.Operational.value(cca), src = new Vertex_1.Source(cca_value.getVertex__(), function () {\r\n\t                var kill2 = last_ca === null ? null :\r\n\t                    Operational_1.Operational.value(last_ca).listen_(out.getVertex__(), function (a) { return out.send_(a); }, false);\r\n\t                var kill1 = cca_value.listen_(out.getVertex__(), function (ca) {\r\n\t                    // Note: If any switch takes place during a transaction, then the\r\n\t                    // coalesce__() below will always cause a sample to be fetched\r\n\t                    // from the one we just switched to. So anything from the old input cell\r\n\t                    // that might have happened during this transaction will be suppressed.\r\n\t                    last_ca = ca;\r\n\t                    if (kill2 !== null)\r\n\t                        kill2();\r\n\t                    kill2 = Operational_1.Operational.value(ca).listen_(out.getVertex__(), function (a) { return out.send_(a); }, false);\r\n\t                }, false);\r\n\t                return function () { kill1(); kill2(); };\r\n\t            });\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"switchC\", 0, [src]));\r\n\t            return out.coalesce__(function (l, r) { return r; }).holdLazy(za);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Unwrap a stream inside a cell to give a time-varying stream implementation.\r\n\t     */\r\n\t    Cell.switchS = function (csa) {\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            var out = new Stream_1.StreamWithSend(), h2 = function (a) {\r\n\t                out.send_(a);\r\n\t            }, src = new Vertex_1.Source(csa.getVertex__(), function () {\r\n\t                var kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\r\n\t                var kill1 = csa.getStream__().listen_(out.getVertex__(), function (sa) {\r\n\t                    kill2();\r\n\t                    kill2 = sa.listen_(out.getVertex__(), h2, true);\r\n\t                }, false);\r\n\t                return function () { kill1(); kill2(); };\r\n\t            });\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"switchS\", 0, [src]));\r\n\t            return out;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Listen for updates to the value of this cell. This is the observer pattern. The\r\n\t     * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\r\n\t     * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\r\n\t     * the world of I/O and for FRP.\r\n\t     * @param h The handler to execute when there's a new value.\r\n\t     *   You should make no assumptions about what thread you are called on, and the\r\n\t     *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\r\n\t     *   or {@link StreamSink#send(Object)} in the handler.\r\n\t     *   An exception will be thrown, because you are not meant to use this to create\r\n\t     *   your own primitives.\r\n\t     */\r\n\t    Cell.prototype.listen = function (h) {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            return Operational_1.Operational.value(_this).listen(h);\r\n\t        });\r\n\t    };\r\n\t    return Cell;\r\n\t}());\r\n\texports.Cell = Cell;\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * A representation for a value that may not be available until the current\r\n\t * transaction is closed.\r\n\t */\r\n\tvar Lazy = (function () {\r\n\t    function Lazy(f) {\r\n\t        this.f = f;\r\n\t    }\r\n\t    /**\r\n\t     * Get the value if available, throwing an exception if not.\r\n\t     * In the general case this should only be used in subsequent transactions to\r\n\t     * when the Lazy was obtained.\r\n\t     */\r\n\t    Lazy.prototype.get = function () {\r\n\t        return this.f();\r\n\t    };\r\n\t    /**\r\n\t     * Map the lazy value according to the specified function, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazy's value.\r\n\t     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Lazy.prototype.map = function (f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f()); });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a binary function into lazy values, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazys' values.\r\n\t     */\r\n\t    Lazy.prototype.lift = function (b, f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f(), b.f()); });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a ternary function into lazy values, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazys' values.\r\n\t     */\r\n\t    Lazy.prototype.lift3 = function (b, c, f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f(), b.f(), c.f()); });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a quaternary function into lazy values, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazys' values.\r\n\t     */\r\n\t    Lazy.prototype.lift4 = function (b, c, d, f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f(), b.f(), c.f(), d.f()); });\r\n\t    };\r\n\t    return Lazy;\r\n\t}());\r\n\texports.Lazy = Lazy;\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar Unit_1 = __webpack_require__(23);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Operational = (function () {\r\n\t    function Operational() {\r\n\t    }\r\n\t    /**\r\n\t     * A stream that gives the updates/steps for a {@link Cell}.\r\n\t     * <P>\r\n\t     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n\t     * API. It breaks the property of non-detectability of cell steps/updates.\r\n\t     * The rule with this primitive is that you should only use it in functions\r\n\t     * that do not allow the caller to detect the cell updates.\r\n\t     */\r\n\t    Operational.updates = function (c) {\r\n\t        /*  Don't think this is needed\r\n\t        const out = new StreamWithSend<A>(null);\r\n\t        out.setVertex__(new Vertex(\"updates\", 0, [\r\n\t                new Source(\r\n\t                    c.getStream__().getVertex__(),\r\n\t                    () => {\r\n\t                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\r\n\t                            out.send_(a);\r\n\t                        }, false);\r\n\t                    }\r\n\t                ),\r\n\t                new Source(\r\n\t                    c.getVertex__(),\r\n\t                    () => {\r\n\t                        return () => { };\r\n\t                    }\r\n\t                )\r\n\t            ]\r\n\t        ));\r\n\t        return out;\r\n\t        */\r\n\t        return c.getStream__();\r\n\t    };\r\n\t    /**\r\n\t     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\r\n\t     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\r\n\t     * firing for each update/step of the cell's value.\r\n\t     * <P>\r\n\t     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n\t     * API. It breaks the property of non-detectability of cell steps/updates.\r\n\t     * The rule with this primitive is that you should only use it in functions\r\n\t     * that do not allow the caller to detect the cell updates.\r\n\t     */\r\n\t    Operational.value = function (c) {\r\n\t        return Transaction_1.Transaction.run(function () {\r\n\t            var sSpark = new Stream_1.StreamWithSend();\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(sSpark.getVertex__(), function () {\r\n\t                sSpark.send_(Unit_1.Unit.UNIT);\r\n\t            });\r\n\t            var sInitial = sSpark.snapshot1(c);\r\n\t            return Operational.updates(c).orElse(sInitial);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Push each event onto a new transaction guaranteed to come before the next externally\r\n\t     * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\r\n\t     */\r\n\t    Operational.defer = function (s) {\r\n\t        return Operational.split(s.map(function (a) {\r\n\t            return [a];\r\n\t        }));\r\n\t    };\r\n\t    /**\r\n\t     * Push each event in the list onto a newly created transaction guaranteed\r\n\t     * to come before the next externally initiated transaction. Note that the semantics\r\n\t     * are such that two different invocations of split() can put events into the same\r\n\t     * new transaction, so the resulting stream's events could be simultaneous with\r\n\t     * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\r\n\t     */\r\n\t    Operational.split = function (s) {\r\n\t        var out = new Stream_1.StreamWithSend(null);\r\n\t        out.setVertex__(new Vertex_1.Vertex(\"split\", 0, [\r\n\t            new Vertex_1.Source(s.getVertex__(), function () {\r\n\t                return s.listen_(out.getVertex__(), function (as) {\r\n\t                    var _loop_1 = function (i) {\r\n\t                        Transaction_1.Transaction.currentTransaction.post(i, function () {\r\n\t                            Transaction_1.Transaction.run(function () {\r\n\t                                out.send_(as[i]);\r\n\t                            });\r\n\t                        });\r\n\t                    };\r\n\t                    for (var i = 0; i < as.length; i++) {\r\n\t                        _loop_1(i);\r\n\t                    }\r\n\t                }, false);\r\n\t            })\r\n\t        ]));\r\n\t        return out;\r\n\t    };\r\n\t    return Operational;\r\n\t}());\r\n\texports.Operational = Operational;\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Unit = (function () {\r\n\t    function Unit() {\r\n\t    }\r\n\t    Unit.UNIT = new Unit();\r\n\t    return Unit;\r\n\t}());\r\n\texports.Unit = Unit;\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Listener = (function () {\r\n\t    function Listener(h, target) {\r\n\t        this.h = h;\r\n\t        this.target = target;\r\n\t    }\r\n\t    return Listener;\r\n\t}());\r\n\texports.Listener = Listener;\r\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar LazyCell = (function (_super) {\r\n\t    __extends(LazyCell, _super);\r\n\t    function LazyCell(lazyInitValue, str) {\r\n\t        var _this = _super.call(this, null, null) || this;\r\n\t        Transaction_1.Transaction.run(function () {\r\n\t            if (str)\r\n\t                _this.setStream(str);\r\n\t            _this.lazyInitValue = lazyInitValue;\r\n\t        });\r\n\t        return _this;\r\n\t    }\r\n\t    LazyCell.prototype.sampleNoTrans__ = function () {\r\n\t        if (this.value == null && this.lazyInitValue != null) {\r\n\t            this.value = this.lazyInitValue.get();\r\n\t            this.lazyInitValue = null;\r\n\t        }\r\n\t        return this.value;\r\n\t    };\r\n\t    return LazyCell;\r\n\t}(Cell_1.Cell));\r\n\texports.LazyCell = LazyCell;\r\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar CoalesceHandler_1 = __webpack_require__(19);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\t/**\r\n\t * A stream that allows values to be pushed into it, acting as an interface between the\r\n\t * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\r\n\t * should downcast to {@link Stream}.\r\n\t */\r\n\tvar StreamSink = (function (_super) {\r\n\t    __extends(StreamSink, _super);\r\n\t    function StreamSink(f) {\r\n\t        var _this = _super.call(this) || this;\r\n\t        if (!f)\r\n\t            f = (function (l, r) {\r\n\t                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\r\n\t            });\r\n\t        _this.coalescer = new CoalesceHandler_1.CoalesceHandler(f, _this);\r\n\t        return _this;\r\n\t    }\r\n\t    StreamSink.prototype.send = function (a) {\r\n\t        var _this = this;\r\n\t        Transaction_1.Transaction.run(function () {\r\n\t            if (Transaction_1.Transaction.currentTransaction.inCallback > 0)\r\n\t                throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\r\n\t            _this.coalescer.send_(a);\r\n\t        });\r\n\t    };\r\n\t    return StreamSink;\r\n\t}(Stream_1.StreamWithSend));\r\n\texports.StreamSink = StreamSink;\r\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar LazyCell_1 = __webpack_require__(25);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\t/**\r\n\t * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\r\n\t */\r\n\tvar CellLoop = (function (_super) {\r\n\t    __extends(CellLoop, _super);\r\n\t    function CellLoop() {\r\n\t        return _super.call(this, null, new Stream_1.StreamLoop()) || this;\r\n\t    }\r\n\t    /**\r\n\t     * Resolve the loop to specify what the CellLoop was a forward reference to. It\r\n\t     * must be invoked inside the same transaction as the place where the CellLoop is used.\r\n\t     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n\t     * or {@link Transaction#runVoid(Runnable)}.\r\n\t     */\r\n\t    CellLoop.prototype.loop = function (a_out) {\r\n\t        var me = this;\r\n\t        Transaction_1.Transaction.run(function () {\r\n\t            me.getStream__().loop(a_out.getStream__());\r\n\t            me.lazyInitValue = a_out.sampleLazy();\r\n\t        });\r\n\t    };\r\n\t    CellLoop.prototype.sampleNoTrans__ = function () {\r\n\t        if (!this.getStream__().assigned__)\r\n\t            throw new Error(\"CellLoop sampled before it was looped\");\r\n\t        return _super.prototype.sampleNoTrans__.call(this);\r\n\t    };\r\n\t    return CellLoop;\r\n\t}(LazyCell_1.LazyCell));\r\n\texports.CellLoop = CellLoop;\r\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\tvar StreamSink_1 = __webpack_require__(26);\r\n\t/**\r\n\t * A cell that allows values to be pushed into it, acting as an interface between the\r\n\t * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\r\n\t * should downcast to {@link Cell}.\r\n\t */\r\n\tvar CellSink = (function (_super) {\r\n\t    __extends(CellSink, _super);\r\n\t    /**\r\n\t     * Construct a writable cell with the specified initial value. If multiple values are\r\n\t     * sent in the same transaction, the specified function is used to combine them.\r\n\t     *\r\n\t     * If the function is not supplied, then an exception will be thrown in this case.\r\n\t     */\r\n\t    function CellSink(initValue, f) {\r\n\t        return _super.call(this, initValue, new StreamSink_1.StreamSink(f)) || this;\r\n\t    }\r\n\t    /**\r\n\t     * Send a value, modifying the value of the cell. send(A) may not be used inside\r\n\t     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\r\n\t     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\r\n\t     * You are not meant to use this to define your own primitives.\r\n\t     * @param a Value to push into the cell.\r\n\t     */\r\n\t    CellSink.prototype.send = function (a) {\r\n\t        this.getStream__().send(a);\r\n\t    };\r\n\t    return CellSink;\r\n\t}(Cell_1.Cell));\r\n\texports.CellSink = CellSink;\r\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Tuple2 = (function () {\r\n\t    function Tuple2(a, b) {\r\n\t        this.a = a;\r\n\t        this.b = b;\r\n\t    }\r\n\t    return Tuple2;\r\n\t}());\r\n\texports.Tuple2 = Tuple2;\r\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar typescript_collections_1 = __webpack_require__(5);\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar CellSink_1 = __webpack_require__(28);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\t/**\r\n\t * An interface for implementations of FRP timer systems.\r\n\t */\r\n\tvar TimerSystemImpl = (function () {\r\n\t    function TimerSystemImpl() {\r\n\t    }\r\n\t    return TimerSystemImpl;\r\n\t}());\r\n\texports.TimerSystemImpl = TimerSystemImpl;\r\n\tvar nextSeq = 0;\r\n\tvar Event = (function () {\r\n\t    function Event(t, sAlarm) {\r\n\t        this.t = t;\r\n\t        this.sAlarm = sAlarm;\r\n\t        this.seq = ++nextSeq;\r\n\t    }\r\n\t    return Event;\r\n\t}());\r\n\tvar TimerSystem = (function () {\r\n\t    function TimerSystem(impl) {\r\n\t        var _this = this;\r\n\t        this.eventQueue = new typescript_collections_1.BSTree(function (a, b) {\r\n\t            if (a.t < b.t)\r\n\t                return -1;\r\n\t            if (a.t > b.t)\r\n\t                return 1;\r\n\t            if (a.seq < b.seq)\r\n\t                return -1;\r\n\t            if (a.seq > b.seq)\r\n\t                return 1;\r\n\t            return 0;\r\n\t        });\r\n\t        Transaction_1.Transaction.run(function () {\r\n\t            _this.impl = impl;\r\n\t            _this.tMinimum = 0;\r\n\t            var timeSnk = new CellSink_1.CellSink(impl.now());\r\n\t            _this.time = timeSnk;\r\n\t            // A dummy listener to time to keep it alive even when there are no other listeners.\r\n\t            _this.time.listen(function (t) { });\r\n\t            Transaction_1.Transaction.onStart(function () {\r\n\t                // Ensure the time is always increasing from the FRP's point of view.\r\n\t                var t = _this.tMinimum = Math.max(_this.tMinimum, impl.now());\r\n\t                var _loop_1 = function () {\r\n\t                    var ev = null;\r\n\t                    if (!_this.eventQueue.isEmpty()) {\r\n\t                        var mev = _this.eventQueue.minimum();\r\n\t                        if (mev.t <= t) {\r\n\t                            ev = mev;\r\n\t                            // TO DO: Detect infinite loops!\r\n\t                        }\r\n\t                    }\r\n\t                    if (ev != null) {\r\n\t                        timeSnk.send(ev.t);\r\n\t                        Transaction_1.Transaction.run(function () { return ev.sAlarm.send_(ev.t); });\r\n\t                    }\r\n\t                    else\r\n\t                        return \"break\";\r\n\t                };\r\n\t                // Pop and execute all events earlier than or equal to t (the current time).\r\n\t                while (true) {\r\n\t                    var state_1 = _loop_1();\r\n\t                    if (state_1 === \"break\")\r\n\t                        break;\r\n\t                }\r\n\t                timeSnk.send(t);\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t    /**\r\n\t     * A timer that fires at the specified time, which can be null, meaning\r\n\t     * that the alarm is not set.\r\n\t     */\r\n\t    TimerSystem.prototype.at = function (tAlarm) {\r\n\t        var _this = this;\r\n\t        var current = null, cancelCurrent = null, active = false, tAl = null, sampled = false;\r\n\t        var sAlarm = new Stream_1.StreamWithSend(null), updateTimer = function () {\r\n\t            if (cancelCurrent !== null) {\r\n\t                cancelCurrent();\r\n\t                _this.eventQueue.remove(current);\r\n\t            }\r\n\t            cancelCurrent = null;\r\n\t            current = null;\r\n\t            if (active) {\r\n\t                if (!sampled) {\r\n\t                    sampled = true;\r\n\t                    tAl = tAlarm.sampleNoTrans__();\r\n\t                }\r\n\t                if (tAl !== null) {\r\n\t                    current = new Event(tAl, sAlarm);\r\n\t                    _this.eventQueue.add(current);\r\n\t                    cancelCurrent = _this.impl.setTimer(tAl, function () {\r\n\t                        // Correction to ensure the clock time appears to be >= the\r\n\t                        // alarm time. It can be a few milliseconds early, and\r\n\t                        // this breaks things otherwise, because it doesn't think\r\n\t                        // it's time to fire the alarm yet.\r\n\t                        _this.tMinimum = Math.max(_this.tMinimum, tAl);\r\n\t                        // Open and close a transaction to trigger queued\r\n\t                        // events to run.\r\n\t                        Transaction_1.Transaction.run(function () { });\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\t        };\r\n\t        sAlarm.setVertex__(new Vertex_1.Vertex(\"at\", 0, [\r\n\t            new Vertex_1.Source(tAlarm.getVertex__(), function () {\r\n\t                active = true;\r\n\t                sampled = false;\r\n\t                Transaction_1.Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\r\n\t                var kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), function (oAlarm) {\r\n\t                    tAl = oAlarm;\r\n\t                    sampled = true;\r\n\t                    updateTimer();\r\n\t                }, false);\r\n\t                return function () {\r\n\t                    active = false;\r\n\t                    updateTimer();\r\n\t                    kill();\r\n\t                };\r\n\t            })\r\n\t        ]));\r\n\t        return sAlarm;\r\n\t    };\r\n\t    return TimerSystem;\r\n\t}());\r\n\texports.TimerSystem = TimerSystem;\r\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar TimerSystem_1 = __webpack_require__(30);\r\n\t/**\r\n\t * A timer system implementation using seconds as the time unit.\r\n\t */\r\n\tvar SecondsTimerSystem = (function (_super) {\r\n\t    __extends(SecondsTimerSystem, _super);\r\n\t    function SecondsTimerSystem() {\r\n\t        return _super.call(this, new SecondsTimerSystemImpl()) || this;\r\n\t    }\r\n\t    return SecondsTimerSystem;\r\n\t}(TimerSystem_1.TimerSystem));\r\n\texports.SecondsTimerSystem = SecondsTimerSystem;\r\n\tvar SecondsTimerSystemImpl = (function (_super) {\r\n\t    __extends(SecondsTimerSystemImpl, _super);\r\n\t    function SecondsTimerSystemImpl() {\r\n\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t    }\r\n\t    /**\r\n\t     * Set a timer that will execute the specified callback at the specified time.\r\n\t     * @return A function that can be used to cancel the timer.\r\n\t     */\r\n\t    SecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n\t        var timeout = setTimeout(callback, Math.max((t - this.now()) * 1000, 0));\r\n\t        return function () { clearTimeout(timeout); };\r\n\t    };\r\n\t    /**\r\n\t     * Return the current clock time.\r\n\t     */\r\n\t    SecondsTimerSystemImpl.prototype.now = function () {\r\n\t        return Date.now() * 0.001;\r\n\t    };\r\n\t    return SecondsTimerSystemImpl;\r\n\t}(TimerSystem_1.TimerSystemImpl));\r\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar TimerSystem_1 = __webpack_require__(30);\r\n\t/**\r\n\t * A timer system implementation using milliseconds as the time unit.\r\n\t */\r\n\tvar MillisecondsTimerSystem = (function (_super) {\r\n\t    __extends(MillisecondsTimerSystem, _super);\r\n\t    function MillisecondsTimerSystem() {\r\n\t        return _super.call(this, new MillisecondsTimerSystemImpl()) || this;\r\n\t    }\r\n\t    return MillisecondsTimerSystem;\r\n\t}(TimerSystem_1.TimerSystem));\r\n\texports.MillisecondsTimerSystem = MillisecondsTimerSystem;\r\n\tvar MillisecondsTimerSystemImpl = (function (_super) {\r\n\t    __extends(MillisecondsTimerSystemImpl, _super);\r\n\t    function MillisecondsTimerSystemImpl() {\r\n\t        return _super !== null && _super.apply(this, arguments) || this;\r\n\t    }\r\n\t    /**\r\n\t     * Set a timer that will execute the specified callback at the specified time.\r\n\t     * @return A function that can be used to cancel the timer.\r\n\t     */\r\n\t    MillisecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n\t        var timeout = setTimeout(callback, Math.max(t - this.now(), 0));\r\n\t        return function () { clearTimeout(timeout); };\r\n\t    };\r\n\t    /**\r\n\t     * Return the current clock time.\r\n\t     */\r\n\t    MillisecondsTimerSystemImpl.prototype.now = function () {\r\n\t        return Date.now();\r\n\t    };\r\n\t    return MillisecondsTimerSystemImpl;\r\n\t}(TimerSystem_1.TimerSystemImpl));\r\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar IOAction = (function () {\r\n\t    function IOAction() {\r\n\t    }\r\n\t    /*!\r\n\t     * Convert a function that performs asynchronous I/O taking input A\r\n\t     * and returning a value of type B into an I/O action of type\r\n\t     * (sa : Stream<A>) => Stream<B>\r\n\t     */\r\n\t    IOAction.fromAsync = function (performIO) {\r\n\t        return function (sa) {\r\n\t            var out = new Stream_1.StreamWithSend(null);\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"map\", 0, [\r\n\t                new Vertex_1.Source(sa.getVertex__(), function () {\r\n\t                    return sa.listen_(out.getVertex__(), function (a) {\r\n\t                        performIO(a, function (b) {\r\n\t                            Transaction_1.Transaction.run(function () {\r\n\t                                out.send_(b);\r\n\t                            });\r\n\t                        });\r\n\t                    }, false);\r\n\t                })\r\n\t            ]));\r\n\t            return out;\r\n\t        };\r\n\t    };\r\n\t    return IOAction;\r\n\t}());\r\n\texports.IOAction = IOAction;\r\n\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// sodium.umd.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0ca2f6ab2cae73b1638","export { lambda1, lambda2, lambda3, lambda4, lambda5, lambda6 } from \"./Lambda\";\nexport { Stream, StreamLoop } from \"./Stream\";\nexport { StreamSink } from \"./StreamSink\";\nexport { Cell } from \"./Cell\";\nexport { CellLoop } from \"./CellLoop\";\nexport { CellSink } from \"./CellSink\";\nexport { Transaction } from \"./Transaction\";\nexport { Tuple2 } from \"./Tuple2\";\nexport { Unit } from \"./Unit\";\nexport { Operational } from \"./Operational\";\nexport { getTotalRegistrations, Vertex } from \"./Vertex\";\nexport { TimerSystemImpl, TimerSystem } from \"./TimerSystem\";\nexport { SecondsTimerSystem } from \"./SecondsTimerSystem\";\nexport { MillisecondsTimerSystem } from \"./MillisecondsTimerSystem\";\nexport { IOAction } from \"./IOAction\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Sodium.ts","import { Stream } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Source } from \"./Vertex\";\n\nexport class Lambda1<A,B> {\n    constructor(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A) => B;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda1<A,B>(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda1<A,B>\n{\n    return new Lambda1(f, deps);\n}\n\nexport function Lambda1_deps<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda1)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda1_toFunction<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : (a : A) => B {\n    if (f instanceof Lambda1)\n        return f.f;\n    else\n        return <(a : A) => B>f;\n}\n\nexport class Lambda2<A,B,C> {\n    constructor(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B) => C;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda2<A,B,C>(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda2<A,B,C>\n{\n    return new Lambda2(f, deps);\n}\n\nexport function Lambda2_deps<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda2)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda2_toFunction<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : (a : A, b : B) => C {\n    if (f instanceof Lambda2)\n        return f.f;\n    else\n        return <(a : A, b : B) => C>f;\n}\n\nexport class Lambda3<A,B,C,D> {\n    constructor(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C) => D;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda3<A,B,C,D>(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda3<A,B,C,D>\n{\n    return new Lambda3(f, deps);\n}\n\nexport function Lambda3_deps<A,B,C,D>(f : ((a : A, b : B, c : C) => D)\n        | Lambda3<A,B,C,D>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda3)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda3_toFunction<A,B,C,D>(f : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : (a : A, b : B, c : C) => D {\n    if (f instanceof Lambda3)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C) => D>f;\n}\n\nexport class Lambda4<A,B,C,D,E> {\n    constructor(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D) => E;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda4<A,B,C,D,E>(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda4<A,B,C,D,E>\n{\n    return new Lambda4(f, deps);\n}\n\nexport function Lambda4_deps<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda4)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda4_toFunction<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : (a : A, b : B, c : C, d : D) => E {\n    if (f instanceof Lambda4)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D) => E>f;\n}\n\nexport class Lambda5<A,B,C,D,E,F> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E) => F;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda5<A,B,C,D,E,F>(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda5<A,B,C,D,E,F>\n{\n    return new Lambda5(f, deps);\n}\n\nexport function Lambda5_deps<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda5)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda5_toFunction<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : (a : A, b : B, c : C, d : D, e : E) => F {\n    if (f instanceof Lambda5)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E) => F>f;\n}\n\nexport class Lambda6<A,B,C,D,E,F,G> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E, f : F) => G;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda6<A,B,C,D,E,F,G>(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda6<A,B,C,D,E,F,G>\n{\n    return new Lambda6(f, deps);\n}\n\nexport function Lambda6_deps<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda6)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda6_toFunction<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : (a : A, b : B, c : C, d : D, e : E, f : F) => G {\n    if (f instanceof Lambda6)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E, f : F) => G>f;\n}\n\nexport function toSources(deps : Array<Stream<any>|Cell<any>>) : Source[] {\n    const ss : Source[] = [];\n    for (let i = 0; i < deps.length; i++) {\n        const dep = deps[i];\n        ss.push(new Source(dep.getVertex__(), null));\n    }\n    return ss;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Lambda.ts","import { Set } from \"typescript-collections\";\n\nlet totalRegistrations : number = 0;\nexport function getTotalRegistrations() : number {\n    return totalRegistrations;\n}\n\nexport class Source {\n    constructor(\n        origin : Vertex,\n        register_ : () => () => void\n    ) {\n        if (origin === null)\n            throw new Error(\"null origin!\");\n        this.origin = origin;\n        this.register_ = register_;\n    }\n    origin : Vertex;\n    private register_ : () => () => void;\n    private registered : boolean = false;\n    private deregister_ : () => void = null;\n\n    register(target : Vertex) : void {\n        if (!this.registered) {\n            this.registered = true;\n            if (this.register_ !== null)\n                this.deregister_ = this.register_();\n            else {\n                this.origin.increment(target);\n                this.deregister_ = () => this.origin.decrement(target);\n            }\n        }\n    }\n    deregister(target : Vertex) : void {\n        if (this.registered) {\n            this.registered = false;\n            if (this.deregister_ !== null)\n                this.deregister_();\n        }\n    }\n}\n\nexport enum Color { black, gray, white, purple };\nlet roots : Vertex[] = [];\nlet nextID : number = 0;\nlet verbose : boolean = false;\n\nexport function setVerbose(v : boolean) : void { verbose = v; }\n\nexport function describeAll(v : Vertex, visited : Set<number>)\n{\n    if (visited.contains(v.id)) return;\n    console.log(v.descr());\n    visited.add(v.id);\n    let chs = v.children();\n    for (let i = 0; i < chs.length; i++)\n        describeAll(chs[i], visited);\n}\n\nexport class Vertex {\n    static NULL : Vertex = new Vertex(\"user\", 1e12, []);\n    id : number;\n\n\tconstructor(name : string, rank : number, sources : Source[]) {\n\t    this.name = name;\n\t\tthis.rank = rank;\n\t\tthis.sources = sources;\n\t\tthis.id = nextID++;\n\t}\n\tname : string;\n    rank : number;\n    sources : Source[];\n    targets : Vertex[] = [];\n    childrn : Vertex[] = [];\n    refCount() : number { return this.targets.length; };\n    visited : boolean = false;\n    register(target : Vertex) : boolean {\n        return this.increment(target);\n    }\n    deregister(target : Vertex) : void {\n        if (verbose)\n            console.log(\"deregister \"+this.descr()+\" => \"+target.descr());\n        this.decrement(target);\n        Vertex.collectCycles();\n    }\n    private incRefCount(target : Vertex) : boolean {\n        let anyChanged : boolean = false;\n        if (this.refCount() == 0) {\n            for (let i = 0; i < this.sources.length; i++)\n                this.sources[i].register(this);\n        }\n        this.targets.push(target);\n        target.childrn.push(this);\n        if (target.ensureBiggerThan(this.rank))\n            anyChanged = true;\n        totalRegistrations++;\n        return anyChanged;\n    }\n\n    private decRefCount(target : Vertex) : void {\n        if (verbose)\n            console.log(\"DEC \"+this.descr());\n        let matched = false;\n        for (let i = 0; i < target.childrn.length; i++)\n            if (target.childrn[i] === this) {\n                target.childrn.splice(i, 1);\n            }\n        for (let i = 0; i < this.targets.length; i++)\n            if (this.targets[i] === target) {\n                this.targets.splice(i, 1);\n                matched = true;\n                break;\n            }\n        if (matched) {\n            if (this.refCount() == 0) {\n                for (let i = 0; i < this.sources.length; i++)\n                    this.sources[i].deregister(this);\n            }\n            totalRegistrations--;\n        }\n    }\n\n    addSource(src : Source) : void {\n        this.sources.push(src);\n        if (this.refCount() > 0)\n            src.register(this);\n    }\n\n\tprivate ensureBiggerThan(limit : number) : boolean {\n\t\tif (this.rank > limit || this.visited)\n\t\t\treturn false;\n\n        this.visited = true;\n\t\tthis.rank = limit + 1;\n\t\tfor (let i = 0; i < this.targets.length; i++)\n\t\t\tthis.targets[i].ensureBiggerThan(this.rank);\n        this.visited = false;\n\t\treturn true;\n\t}\n\n\tdescr() : string {\n        let colStr : string = null;\n        switch (this.color) {\n        case Color.black: colStr = \"black\"; break;\n        case Color.gray:  colStr = \"gray\"; break;\n        case Color.white: colStr = \"white\"; break;\n        case Color.purple: colStr = \"purple\"; break;\n        }\n        let str = this.id+\" \"+this.name+\" [\"+this.refCount()+\"/\"+this.refCountAdj+\"] \"+colStr+\" ->\";\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            str = str + \" \" + chs[i].id;\n        }\n        return str;\n\t}\n\n\t// --------------------------------------------------------\n\t// Synchronous Cycle Collection algorithm presented in \"Concurrent\n\t// Cycle Collection in Reference Counted Systems\" by David F. Bacon\n\t// and V.T. Rajan.\n\n    color : Color = Color.black;\n    buffered : boolean = false;\n    refCountAdj : number = 0;\n\n\tchildren() : Vertex[] { return this.childrn; }\n\n\tincrement(referrer : Vertex) : boolean {\n\t    return this.incRefCount(referrer);\n\t}\n\n\tdecrement(referrer : Vertex) : void {\n\t    this.decRefCount(referrer);\n\t    if (this.refCount() == 0)\n\t        this.release();\n        else\n            this.possibleRoots();\n\t}\n\n    release() : void {\n        this.color = Color.black;\n        if (!this.buffered)\n            this.free();\n    }\n\n    free() : void {\n        while (this.targets.length > 0)\n            this.decRefCount(this.targets[0]);\n    }\n\n\tpossibleRoots() : void {\n\t    if (this.color != Color.purple) {\n\t        this.color = Color.purple;\n\t        if (!this.buffered) {\n                this.buffered = true;\n                roots.push(this);\n            }\n        }\n\t}\n\n\tstatic collectCycles() : void {\n\t    Vertex.markRoots();\n\t    Vertex.scanRoots();\n\t    Vertex.collectRoots();\n\t}\n\n\tstatic markRoots() : void {\n\t    const newRoots : Vertex[] = [];\n\t    for (let i = 0; i < roots.length; i++) {\n            if (verbose)\n                console.log(\"markRoots \"+roots[i].descr());  // ###\n\t        if (roots[i].color == Color.purple) {\n\t            roots[i].markGray();\n\t            newRoots.push(roots[i]);\n            }\n\t        else {\n\t            roots[i].buffered = false;\n\t            if (roots[i].color == Color.black && roots[i].refCount() == 0)\n\t                roots[i].free();\n            }\n\t    }\n\t    roots = newRoots;\n\t}\n\n\tstatic scanRoots() : void {\n\t    for (let i = 0; i < roots.length; i++)\n\t        roots[i].scan();\n\t}\n\n\tstatic collectRoots() : void {\n\t    for (let i = 0; i < roots.length; i++) {\n\t        roots[i].buffered = false;\n\t        roots[i].collectWhite();\n\t    }\n\t    roots = [];\n\t}\n\n\tmarkGray() : void {\n\t    if (this.color != Color.gray) {\n\t        this.color = Color.gray;\n\t        let chs = this.children();\n\t        for (let i = 0; i < chs.length; i++) {\n\t            chs[i].refCountAdj--;\n                if (verbose)\n                    console.log(\"markGray \"+this.descr());\n\t            chs[i].markGray();\n            }\n\t    }\n\t}\n\n\tscan() : void {\n\t    if (verbose)\n            console.log(\"scan \"+this.descr());\n\t    if (this.color == Color.gray) {\n\t        if (this.refCount()+this.refCountAdj > 0)\n\t            this.scanBlack();\n\t        else {\n\t            this.color = Color.white;\n                if (verbose)\n                    console.log(\"scan WHITE \"+this.descr());\n                let chs = this.children();\n                for (let i = 0; i < chs.length; i++)\n                    chs[i].scan();\n\t        }\n\t    }\n\t}\n\n\tscanBlack() : void {\n\t    this.color = Color.black;\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            chs[i].refCountAdj++;\n            if (verbose)\n                console.log(\"scanBlack \"+this.descr());\n            if (chs[i].color != Color.black)\n                chs[i].scanBlack();\n        }\n\t}\n\n\tcollectWhite() : void {\n\t    if (this.color == Color.white && !this.buffered) {\n            if (verbose)\n                console.log(\"collectWhite \"+this.descr());\n\t        this.color = Color.black;\n\t        this.refCountAdj = 0;\n            let chs = this.children();\n            for (let i = 0; i < chs.length; i++)\n                chs[i].collectWhite();\n            this.free();\n\t    }\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Vertex.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Cell } from \"./Cell\";\n//import { StreamLoop } from \"./StreamLoop\";\nimport { Listener } from \"./Listener\";\nimport { Tuple2 } from \"./Tuple2\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\n\nexport class Stream<A> {\n    constructor(vertex? : Vertex) {\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    protected vertex : Vertex;\n    protected listeners : Array<Listener<A>> = [];\n    protected firings : A[] = [];\n\n    /**\n     * Transform the stream's event values according to the supplied function, so the returned\n     * Stream's event values reflect the value of the function applied to the input\n     * Stream's event values.\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"map\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a));\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Transform the stream's event values into the specified constant value.\n     * @param b Constant value.\n     */\n    mapTo<B>(b : B) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"mapTo\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(b);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\n     * in the simultaneous case.\n     * <p>\n     * In the case where two events are simultaneous (i.e. both\n     * within the same transaction), the event from <em>this</em> will take precedence, and\n     * the event from <em>s</em> will be dropped.\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\n     * <p>\n     * The name orElse() is used instead of merge() to make it really clear that care should\n     * be taken, because events can be dropped.\n     */\n    orElse(s : Stream<A>) : Stream<A> {\n        return this.merge(s, (left : A, right: A) => {\n            return left;\n        });\n    }\n\n    private merge_(s : Stream<A>) : Stream<A> {\n        const out = new StreamWithSend<A>();\n        const left = new Vertex(\"merge\", 0, []);\n        left.sources.push(new Source(this.vertex, () => {\n            return this.listen_(left, (a : A) => {\n                    out.send_(a);\n                }, false);\n        }));\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    left,\n                    () => {\n                        left.register(out.vertex);\n                        return () => { left.deregister(out.vertex); }\n                    }\n                ),\n                new Source(\n                    s.vertex,\n                    () => {\n                        return s.listen_(out.vertex, (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                )\n            ]);\n        return out;\n    }\n\n    coalesce__(f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {  // TO DO figure out how to hide this\n        const out = new StreamWithSend<A>();\n        const coalescer = new CoalesceHandler<A>(f, out);\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            coalescer.send_(a);\n                        }, false);\n                    }\n                )\n            ]).concat(toSources(Lambda2_deps(f)));\n        return out;\n    }\n\n    /**\n     * Merge two streams of the same type into one, so that events on either input appear\n     * on the returned stream.\n     * <p>\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\n     * occurring in the same transaction), combine them into one using the specified combining function\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\n     * The event from <em>this</em> will appear at the left input of the combining function, and\n     * the event from <em>s</em> will appear at the right.\n     * @param f Function to combine the values. It may construct FRP logic or use\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    merge(s : Stream<A>, f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {\n        return Transaction.run<Stream<A>>(() => {\n            return this.merge_(s).coalesce__(f);\n        });\n    }\n\n    /**\n     * Return a stream that only outputs events for which the predicate returns true.\n     */\n    filter(f : ((a : A) => boolean) | Lambda1<A,boolean>) : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"filter\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (ff(a))\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events that have present\n     * values, discarding null values.\n     */\n    filterNotNull() : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (a !== null)\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events from the input stream\n     * when the specified cell's value is true.\n     */\n    gate(c : Cell<boolean>) : Stream<A> {\n        return this.snapshot(c, (a : A, pred : boolean) => {\n            return pred ? a : null;\n        }).filterNotNull();\n    }\n\n\t/**\n\t * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\n\t * at the time of the event firing, ignoring the stream's value.\n\t */\n\tsnapshot1<B>(c : Cell<B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"snapshot1\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(c.sampleNoTrans__());\n                        }, false);\n                    }\n                ),\n                new Source(c.getVertex__(), null)\n            ]\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cell at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot<B,C>(b : Cell<B>, f_ : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Stream<C>\n\t{\n        const out = new StreamWithSend<C>(null);\n        const ff = Lambda2_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null)\n            ].concat(toSources(Lambda2_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot3<B,C,D>(b : Cell<B>, c : Cell<C>, f_ : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : Stream<D>\n\t{\n        const out = new StreamWithSend<D>(null);\n        const ff = Lambda3_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null)\n            ].concat(toSources(Lambda3_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\n\t    f_ : ((a : A, b : B, c : C, d : D) => E) | Lambda4<A,B,C,D,E>) : Stream<E>\n\t{\n        const out = new StreamWithSend<E>(null);\n        const ff = Lambda4_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\n                                            d.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null),\n                new Source(d.getVertex__(), null)\n            ].concat(toSources(Lambda4_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E) => F) | Lambda5<A,B,C,D,E,F>) : Stream<F>\n\t{\n        const out = new StreamWithSend<F>(null);\n        const ff = Lambda5_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\n                                            d.sampleNoTrans__(), e.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null),\n                new Source(d.getVertex__(), null),\n                new Source(e.getVertex__(), null)\n            ].concat(toSources(Lambda5_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) | Lambda6<A,B,C,D,E,F,G>) : Stream<G>\n\t{\n        const out = new StreamWithSend<G>(null);\n        const ff = Lambda6_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\n                                            d.sampleNoTrans__(), e.sampleNoTrans__(),\n                                            f.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null),\n                new Source(d.getVertex__(), null),\n                new Source(e.getVertex__(), null),\n                new Source(f.getVertex__(), null)\n            ].concat(toSources(Lambda6_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Create a {@link Cell} with the specified initial value, that is updated\n     * by this stream's event values.\n     * <p>\n     * There is an implicit delay: State updates caused by event firings don't become\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\n     * until the following transaction. To put this another way,\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\n     * any state changes from the current transaction.\n     */\n    hold(initValue : A) : Cell<A> {\n        return new Cell<A>(initValue, this);\n\t}\n\n\t/**\n\t * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\n\t */\n\tholdLazy(initValue : Lazy<A>) : Cell<A> {\n\t    return new LazyCell<A>(initValue, this);\n\t}\n\n    /**\n     * Transform an event with a generalized state loop (a Mealy machine). The function\n     * is passed the input and the old state and returns the new state and output value.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    collect<B,S>(initState : S, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        return this.collectLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    collectLazy<B,S>(initState : Lazy<S>, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        const ea = this;\n        return Transaction.run(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                ebs = ea.snapshot(s, f),\n                eb = ebs.map((bs : Tuple2<B,S>) => { return bs.a; }),\n                es_out = ebs.map((bs : Tuple2<B,S>) => { return bs.b; });\n            es.loop(es_out);\n            return eb;\n        });\n    }\n\n    /**\n     * Accumulate on input event, outputting the new state each time.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    accum<S>(initState : S, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        return this.accumLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    accumLazy<S>(initState : Lazy<S>, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        const ea = this;\n        return Transaction.run(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                es_out = ea.snapshot(s, f);\n            es.loop(es_out);\n            return es_out.holdLazy(initState);\n        });\n    }\n\n    /**\n     * Return a stream that outputs only one value: the next event of the\n     * input stream, starting from the transaction in which once() was invoked.\n     */\n    once() : Stream<A> {\n    /*\n        return Transaction.run(() => {\n            const ev = this,\n                out = new StreamWithSend<A>();\n            let la : () => void = null;\n            la = ev.listen_(out.vertex, (a : A) => {\n                if (la !== null) {\n                    out.send_(a);\n                    la();\n                    la = null;\n                }\n            }, false);\n            return out;\n        });\n        */\n        // We can't use the implementation above, beacuse deregistering\n        // listeners triggers the exception\n        // \"send() was invoked before listeners were registered\"\n        // We can revisit this another time. For now we will use the less\n        // efficient implementation below.\n        const me = this;\n        return Transaction.run(() => me.gate(me.mapTo(false).hold(true)));\n    }\n\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.run<() => void>(() => {\n            return this.listen_(Vertex.NULL, h, false);\n        });\n    }\n\n    listen_(target : Vertex,\n            h : (a : A) => void,\n            suppressEarlierFirings : boolean) : () => void {\n        if (this.vertex.register(target))\n            Transaction.currentTransaction.requestRegen();\n        const listener = new Listener<A>(h, target);\n        this.listeners.push(listener);\n        if (!suppressEarlierFirings && this.firings.length != 0) {\n            const firings = this.firings.slice();\n            Transaction.currentTransaction.prioritized(target, () => {\n                // Anything sent already in this transaction must be sent now so that\n                // there's no order dependency between send and listen.\n                for (let i = 0; i < firings.length; i++)\n                    h(firings[i]);\n            });\n        }\n        return () => {\n            let removed = false;\n            for (let i = 0; i < this.listeners.length; i++) {\n                if (this.listeners[i] == listener) {\n                    this.listeners.splice(i, 1);\n                    removed = true;\n                    break;\n                }\n            }\n            if (removed)\n                this.vertex.deregister(target);\n        };\n    }\n}\n\nexport class StreamWithSend<A> extends Stream<A> {\n    constructor(vertex? : Vertex) {\n        super(vertex);\n    }\n\n    setVertex__(vertex : Vertex) {  // TO DO figure out how to hide this\n        this.vertex = vertex;\n    }\n\n    send_(a : A) : void {\n        // We throw this error if we send into FRP logic that has been constructed\n        // but nothing is listening to it yet. We need to do it this way because\n        // it's the only way to manage memory in a language with no finalizers.\n        if (this.vertex.refCount() == 0)\n            throw new Error(\"send() was invoked before listeners were registered\");\n\t\tif (this.firings.length == 0)\n\t\t\tTransaction.currentTransaction.last(() => {\n\t\t\t    this.firings = [];\n            });\n\t\tthis.firings.push(a);\n\t\tconst listeners = this.listeners.slice();\n        for (let i = 0; i < listeners.length; i++) {\n            const h = listeners[i].h;\n            Transaction.currentTransaction.prioritized(listeners[i].target, () => {\n                Transaction.currentTransaction.inCallback++;\n                try {\n                    h(a);\n                    Transaction.currentTransaction.inCallback--;\n                }\n                catch (err) {\n                    Transaction.currentTransaction.inCallback--;\n                    throw err;\n                }\n            });\n        }\n    }\n}\n\n/**\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\n */\nexport class StreamLoop<A> extends StreamWithSend<A> {\n    assigned__ : boolean = false;  // to do: Figure out how to hide this\n\n    constructor()\n    {\n        super();\n        this.vertex.name = \"StreamLoop\";\n    \tif (Transaction.currentTransaction === null)\n    \t    throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\n    }\n\n    /**\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(sa_out : Stream<A>) : void {\n        if (this.assigned__)\n            throw new Error(\"StreamLoop looped more than once\");\n        this.assigned__ = true;\n        this.vertex.addSource(\n            new Source(\n                sa_out.getVertex__(),\n                () => {\n                    return sa_out.listen_(this.vertex, (a : A) => {\n                        this.send_(a);\n                    }, false);\n                }\n            )\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Stream.ts","import {Vertex} from './Vertex';\nimport {Set, PriorityQueue} from 'typescript-collections';\n\nexport class Entry\n{\n  constructor(rank: Vertex, action: () => void)\n  {\n    this.rank = rank;\n    this.action = action;\n    this.seq = Entry.nextSeq++;\n  }\n\n  private static nextSeq: number = 0;\n  rank: Vertex;\n  action: () => void;\n  seq: number;\n\n  toString(): string\n  {\n    return this.seq.toString();\n  }\n}\n\nexport class Transaction\n{\n  public static currentTransaction: Transaction = null;\n  private static onStartHooks: (() => void)[] = [];\n  private static runningOnStartHooks: boolean = false;\n\n  constructor() {}\n\n  inCallback: number = 0;\n  private toRegen: boolean = false;\n\n  requestRegen(): void\n  {\n    this.toRegen = true;\n  }\n\n  prioritizedQ: PriorityQueue<Entry> = new PriorityQueue<Entry>((a, b) =>\n  {\n    // Note: Low priority numbers are treated as \"greater\" according to this\n    // comparison, so that the lowest numbers are highest priority and go first.\n    if (a.rank.rank < b.rank.rank) return 1;\n    if (a.rank.rank > b.rank.rank) return -1;\n    if (a.seq < b.seq) return 1;\n    if (a.seq > b.seq) return -1;\n    return 0;\n  });\n  private entries: Set<Entry> = new Set<Entry>((a) => a.toString());\n  private lastQ: Array<() => void> = [];\n  private postQ: Array<() => void> = null;\n\n  prioritized(target: Vertex, f: () => void): void\n  {\n    const e = new Entry(target, f);\n    this.prioritizedQ.enqueue(e);\n    this.entries.add(e);\n  }\n\n  last(h: () => void): void\n  {\n    this.lastQ.push(h);\n  }\n\n  /**\n   * Add an action to run after all last() actions.\n   */\n  post(childIx: number, action: () => void): void\n  {\n    if (this.postQ == null)\n      this.postQ = [];\n    // If an entry exists already, combine the old one with the new one.\n    while (this.postQ.length <= childIx)\n      this.postQ.push(null);\n    const existing = this.postQ[childIx],\n      neu =\n        existing === null ? action\n          : () =>\n        {\n          existing();\n          action();\n        };\n    this.postQ[childIx] = neu;\n  }\n\n  // If the priority queue has entries in it when we modify any of the nodes'\n  // ranks, then we need to re-generate it to make sure it's up-to-date.\n  private checkRegen(): void\n  {\n    if (this.toRegen)\n    {\n      this.toRegen = false;\n      this.prioritizedQ.clear();\n      const es = this.entries.toArray();\n      for (let i: number = 0; i < es.length; i++)\n        this.prioritizedQ.enqueue(es[i]);\n    }\n  }\n\n  public isActive() : boolean\n  {\n    return Transaction.currentTransaction ? true : false;\n  }\n\n  close(): void\n  {\n    while (true)\n    {\n      this.checkRegen();\n      if (this.prioritizedQ.isEmpty()) break;\n      const e = this.prioritizedQ.dequeue();\n      this.entries.remove(e);\n      e.action();\n    }\n    for (let i = 0; i < this.lastQ.length; i++)\n      this.lastQ[i]();\n    this.lastQ = [];\n    if (this.postQ != null)\n    {\n      for (let i = 0; i < this.postQ.length; i++)\n      {\n        if (this.postQ[i] != null)\n        {\n          const parent = Transaction.currentTransaction;\n          try\n          {\n            if (i > 0)\n            {\n              Transaction.currentTransaction = new Transaction();\n              try\n              {\n                this.postQ[i]();\n                Transaction.currentTransaction.close();\n              }\n              catch (err)\n              {\n                Transaction.currentTransaction.close();\n                throw err;\n              }\n            }\n            else\n            {\n              Transaction.currentTransaction = null;\n              this.postQ[i]();\n            }\n            Transaction.currentTransaction = parent;\n          }\n          catch (err)\n          {\n            Transaction.currentTransaction = parent;\n            throw err;\n          }\n        }\n      }\n      this.postQ = null;\n    }\n  }\n\n  /**\n   * Add a runnable that will be executed whenever a transaction is started.\n   * That runnable may start transactions itself, which will not cause the\n   * hooks to be run recursively.\n   *\n   * The main use case of this is the implementation of a time/alarm system.\n   */\n  static onStart(r: () => void): void\n  {\n    Transaction.onStartHooks.push(r);\n  }\n\n  public static run<A>(f: () => A): A\n  {\n    const transWas: Transaction = Transaction.currentTransaction;\n    if (transWas === null)\n    {\n      if (!Transaction.runningOnStartHooks)\n      {\n        Transaction.runningOnStartHooks = true;\n        try\n        {\n          for (let i = 0; i < Transaction.onStartHooks.length; i++)\n            Transaction.onStartHooks[i]();\n        }\n        finally\n        {\n          Transaction.runningOnStartHooks = false;\n        }\n      }\n      Transaction.currentTransaction = new Transaction();\n    }\n    try\n    {\n      const a: A = f();\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      return a;\n    }\n    catch (err)\n    {\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      throw err;\n    }\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Transaction.ts","\"use strict\";\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require('./arrays');\nexports.arrays = _arrays;\nvar Bag_1 = require('./Bag');\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require('./BSTree');\nexports.BSTree = BSTree_1.default;\nvar Dictionary_1 = require('./Dictionary');\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require('./Heap');\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require('./LinkedDictionary');\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require('./LinkedList');\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require('./MultiDictionary');\nexports.MultiDictionary = MultiDictionary_1.default;\nvar Queue_1 = require('./Queue');\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require('./PriorityQueue');\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require('./Set');\nexports.Set = Set_1.default;\nvar Stack_1 = require('./Stack');\nexports.Stack = Stack_1.default;\nvar _util = require('./util');\nexports.util = _util;\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/index.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/arrays.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n* Joins all the properies of the object using the provided join string\n*/\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (!isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/util.js\n// module id = 7\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar Set_1 = require('./Set');\nvar Bag = (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n    * Adds nCopies of the specified object to this bag.\n    * @param {Object} element element to add.\n    * @param {number=} nCopies the number of copies to add, if this argument is\n    * undefined 1 copy is added.\n    * @return {boolean} true unless element is undefined.\n    */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n    * Counts the number of copies of the specified object in this bag.\n    * @param {Object} element the object to search for..\n    * @return {number} the number of copies of the object, 0 if not found\n    */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n    * Removes nCopies of the specified object to this bag.\n    * If the number of copies to remove is greater than the actual number\n    * of copies in the Bag, all copies are removed.\n    * @param {Object} element element to remove.\n    * @param {number=} nCopies the number of copies to remove, if this argument is\n    * undefined 1 copy is removed.\n    * @return {boolean} true if at least 1 element was removed.\n    */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Bag; // End of bag\n//# sourceMappingURL=Bag.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Bag.js\n// module id = 8\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary = (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this dictionary.\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n    * Removes all mappings from this dictionary.\n    * @this {collections.Dictionary}\n    */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Dictionary; // End of dictionary\n//# sourceMappingURL=Dictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Dictionary.js\n// module id = 9\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar Dictionary_1 = require('./Dictionary');\nvar Set = (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives a onject and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersecion between this an another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this an another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this an another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Set; // end of Set\n//# sourceMappingURL=Set.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Set.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Queue_1 = require('./Queue');\nvar BSTree = (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTree(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTree.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTree.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTree.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTree.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTree.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTree.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.minimum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.maximum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTree.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTree.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTree.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.searchNode = function (node, element) {\n        var cmp = null;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        while (!queue.isEmpty()) {\n            node = queue.dequeue();\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.minimumAux = function (node) {\n        while (node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.maximumAux = function (node) {\n        while (node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n      * @private\n      */\n    BSTree.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTree.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        var cmp = null;\n        while (position !== null) {\n            cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTree;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/BSTree.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Queue = (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Queue; // End of queue\n//# sourceMappingURL=Queue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Queue.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar LinkedList = (function () {\n    /**\n    * Creates an empty Linked List.\n    * @class A linked list is a data structure consisting of a group of nodes\n    * which together represent a sequence.\n    * @constructor\n    */\n    function LinkedList() {\n        /**\n        * First node in the list\n        * @type {Object}\n        * @private\n        */\n        this.firstNode = null;\n        /**\n        * Last node in the list\n        * @type {Object}\n        * @private\n        */\n        this.lastNode = null;\n        /**\n        * Number of elements in the list\n        * @type {number}\n        * @private\n        */\n        this.nElements = 0;\n    }\n    /**\n    * Adds an element to this list.\n    * @param {Object} item element to be added.\n    * @param {number=} index optional index to add the element. If no index is specified\n    * the element is added to the end of this list.\n    * @return {boolean} true if the element was added or false if the index is invalid\n    * or if the element is undefined.\n    */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n    * Returns the first element in this list.\n    * @return {*} the first element of the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n    * Returns the last element in this list.\n    * @return {*} the last element in the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n       * Returns true if this list contains the specified element.\n       * <p>If the elements inside the list are\n       * not comparable with the === operator a custom equals function should be\n       * provided to perform searches, the function must receive two arguments and\n       * return true if they are equal, false otherwise. Example:</p>\n       *\n       * <pre>\n       * const petsAreEqualByName = function(pet1, pet2) {\n       *  return pet1.name === pet2.name;\n       * }\n       * </pre>\n       * @param {Object} item element to search for.\n       * @param {function(Object,Object):boolean=} equalsFunction Optional\n       * function used to check if two elements are equal.\n       * @return {boolean} true if this list contains the specified element, false\n       * otherwise.\n       */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (currentNode === this.firstNode) {\n                    this.firstNode = this.firstNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n    * @private\n    */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedList; // End of linked list\n//# sourceMappingURL=LinkedList.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/LinkedList.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar collections = require('./util');\nvar arrays = require('./arrays');\nvar Heap = (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements od the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return undefined;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Heap.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Dictionary_1 = require('./Dictionary');\nvar util = require('./util');\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\nvar LinkedDictionary = (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        _super.call(this, toStrFunction);\n        this.head = new LinkedDictionaryPair(null, null);\n        this.tail = new LinkedDictionaryPair(null, null);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n    * Removes all mappings from this LinkedDictionary.\n    * @this {collections.LinkedDictionary}\n    */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this LinkedDictionary. It is done in the order of insertion\n    * into the LinkedDictionary\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (crawlNode.next != null) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedDictionary; // End of LinkedDictionary\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/LinkedDictionary.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar arrays = require('./arrays');\nvar MultiDictionary = (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n       *  return pet.name;\n       * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n       *  return pet1.age===pet2.age;\n       * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n    * Returns an array holding the values to which this dictionary maps\n    * the specified key.\n    * Returns an empty array if this dictionary contains no mappings for this key.\n    * @param {Object} key key whose associated values are to be returned.\n    * @return {Array} an array holding the values to which this dictionary maps\n    * the specified key.\n    */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        if (!this.containsKey(key)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        var array = this.dict.getValue(key);\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MultiDictionary; // end of multi dictionary\n//# sourceMappingURL=MultiDictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/MultiDictionary.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Heap_1 = require('./Heap');\nvar PriorityQueue = (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = PriorityQueue; // end of priority queue\n//# sourceMappingURL=PriorityQueue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/PriorityQueue.js\n// module id = 17\n// module chunks = 0","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Stack = (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Stack; // End of stack\n//# sourceMappingURL=Stack.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Stack.js\n// module id = 18\n// module chunks = 0","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         toSources } from \"./Lambda\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamWithSend } from \"./Stream\";\nimport { Vertex } from \"./Vertex\";\n\nexport class CoalesceHandler<A>\n{\n\tconstructor(f : ((l : A, r : A) => A) | Lambda2<A,A,A>, out : StreamWithSend<A>)\n\t{\n\t    this.f = Lambda2_toFunction(f);\n\t    this.out = out;\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(\n            toSources(Lambda2_deps(f)));\n        this.accumValid = false;\n    }\n\tprivate f : (l : A, r : A) => A;\n\tprivate out : StreamWithSend<A>;\n\tprivate accumValid : boolean;\n    private accum : A;\n    private verbose : boolean;\n    send_(a : A) {\n        if (this.accumValid)\n            this.accum = this.f(this.accum, a);\n        else {\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), () => {\n                this.out.send_(this.accum);\n                this.accumValid = false;\n                this.accum = null;\n            });\n            this.accum = a;\n            this.accumValid = true;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CoalesceHandler.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { Lazy } from \"./Lazy\";\nimport { Listener } from \"./Listener\";\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { Operational } from \"./Operational\";\n\nclass LazySample<A> {\n    constructor(cell : Cell<A>) {\n        this.cell = cell;\n    }\n    cell : Cell<A>;\n    hasValue : boolean = false;\n    value : A = null;\n}\n\nclass ApplyState<A,B> {\n    constructor() {}\n    f : (a : A) => B = null;\n    f_present : boolean = false;\n    a : A = null;\n    a_present : boolean = false;\n}\n\nexport class Cell<A> {\n\tprivate str : Stream<A>;\n\tprotected value : A;\n\tprotected valueUpdate : A;\n\tprivate cleanup : () => void;\n\tprotected lazyInitValue : Lazy<A>;  // Used by LazyCell\n\tprivate vertex : Vertex;\n\n    constructor(initValue : A, str? : Stream<A>) {\n        this.value = initValue;\n        if (!str) {\n            this.str = new Stream<A>();\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\n        }\n        else\n            Transaction.run(() => this.setStream(str));\n    }\n\n    protected setStream(str : Stream<A>) {\n        this.str = str;\n        const me = this,\n              src = new Source(\n                str.getVertex__(),\n                () => {\n                    return str.listen_(me.vertex, (a : A) => {\n                        if (me.valueUpdate == null) {\n                            Transaction.currentTransaction.last(() => {\n                                me.value = me.valueUpdate;\n                                me.lazyInitValue = null;\n                                me.valueUpdate = null;\n                            });\n                        }\n                        me.valueUpdate = a;\n                    }, false);\n                }\n            );\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\n        // We do a trick here of registering the source for the duration of the current\n        // transaction so that we are guaranteed to catch any stream events that\n        // occur in the same transaction.\n        this.vertex.register(Vertex.NULL);\n        Transaction.currentTransaction.last(() => {\n            this.vertex.deregister(Vertex.NULL);\n        });\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    getStream__() : Stream<A> {  // TO DO: Figure out how to hide this\n        return this.str;\n    }\n\n    /**\n     * Sample the cell's current value.\n     * <p>\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\n     * miss any updates, but in many circumstances it makes sense.\n     * <p>\n     * NOTE: In the Java and other versions of Sodium, using sample() inside map(), filter() and\n     * merge() is encouraged. In the Javascript/Typescript version, not so much, for the\n     * following reason: The memory management is different in the Javascript version, and this\n     * requires us to track all dependencies. In order for the use of sample() inside\n     * a closure to be correct, the cell that was sample()d inside the closure would have to be\n     * declared explicitly using the helpers lambda1(), lambda2(), etc. Because this is\n     * something that can be got wrong, we don't encourage this kind of use of sample() in\n     * Javascript. Better and simpler to use snapshot().\n     * <p>\n     * NOTE: If you need to sample() a cell, you have to make sure it's \"alive\" in terms of\n     * memory management or it will ignore updates. To make a cell work correctly\n     * with sample(), you have to ensure that it's being used. One way to guarantee this is\n     * to register a dummy listener on the cell. It will also work to have it referenced\n     * by something that is ultimately being listened to.\n     */\n    sample() : A {\n        return Transaction.run(() => { return this.sampleNoTrans__(); });\n    }\n\n    sampleNoTrans__() : A {  // TO DO figure out how to hide this\n        return this.value;\n    }\n\n    /**\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\n     */\n    sampleLazy() : Lazy<A> {\n        const me = this;\n        return Transaction.run(() => me.sampleLazyNoTrans__());\n    }\n\n    sampleLazyNoTrans__() : Lazy<A> {  // TO DO figure out how to hide this\n        const me = this,\n            s = new LazySample<A>(me);\n        Transaction.currentTransaction.last(() => {\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\n            s.hasValue = true;\n            s.cell = null;\n        });\n        return new Lazy<A>(() => {\n            if (s.hasValue)\n                return s.value;\n            else\n                return s.cell.sample();\n        });\n    }\n\n    /**\n     * Transform the cell's value according to the supplied function, so the returned Cell\n     * always reflects the value of the function applied to the input Cell's value.\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Cell<B> {\n        const c = this;\n        return Transaction.run(() =>\n            Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)))\n        );\n    }\n\n\t/**\n\t * Lift a binary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift<B,C>(b : Cell<B>,\n\t          fn0 : ((a : A, b : B) => C) |\n\t                Lambda2<A,B,C>) : Cell<C> {\n        const fn = Lambda2_toFunction(fn0),\n            cf = this.map((aa : A) => (bb : B) => fn(aa, bb));\n        return Cell.apply(cf, b,\n            toSources(Lambda2_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a ternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift3<B,C,D>(b : Cell<B>, c : Cell<C>,\n\t             fn0 : ((a : A, b : B, c : C) => D) |\n\t                   Lambda3<A,B,C,D>) : Cell<D> {\n        const fn = Lambda3_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => D =\n                 (aa : A) => (bb : B) => (cc : C) => fn(aa, bb, cc),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply<B, (c : C) => D>(cf, b),\n                   c,\n                   toSources(Lambda3_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a quaternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\n\t               fn0 : ((a : A, b : B, c : C, d : D) => E) |\n\t                     Lambda4<A,B,C,D,E>) : Cell<E> {\n        const fn = Lambda4_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => E =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => fn(aa, bb, cc, dd),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply<B, (c : C) => (d : D) => E>(cf, b),\n                       c),\n                   d,\n                   toSources(Lambda4_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\n\t                 fn0 : ((a : A, b : B, c : C, d : D, e : E) => F) |\n\t                       Lambda5<A,B,C,D,E,F>) : Cell<F> {\n        const fn = Lambda5_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => F =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => fn(aa, bb, cc, dd, ee),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply<B, (c : C) => (d : D) => (e : E) => F>(cf, b),\n                           c),\n                       d),\n                   e,\n                   toSources(Lambda5_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\n\t                   fn0 : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) |\n\t                         Lambda6<A,B,C,D,E,F,G>) : Cell<G> {\n        const fn = Lambda6_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => G =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => fn(aa, bb, cc, dd, ee, ff),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply(\n                               Cell.apply<B, (c : C) => (d : D) => (e : E) => (f : F) => G>(cf, b),\n                               c),\n                           d),\n                       e),\n                   f,\n                   toSources(Lambda6_deps(fn0)));\n\t}\n\n\t/**\n\t * Apply a value inside a cell to a function inside a cell. This is the\n\t * primitive for all function lifting.\n\t */\n\tstatic apply<A,B>(cf : Cell<(a : A) => B>, ca : Cell<A>, sources? : Source[]) : Cell<B> {\n    \treturn Transaction.run(() => {\n    \t    const state = new ApplyState<A,B>(),\n                out = new StreamWithSend<B>(),\n                cf_value = Operational.value(cf),\n                ca_value = Operational.value(ca),\n                src1 = new Source(\n                        cf_value.getVertex__(),\n                        () => {\n                            return cf_value.listen_(out.getVertex__(), (f : (a : A) => B) => {\n                                state.f = f;\n                                state.f_present = true;\n                                if (state.a_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    ),\n                src2 = new Source(\n                        ca_value.getVertex__(),\n                        () => {\n                            return ca_value.listen_(out.getVertex__(), (a : A) => {\n                                state.a = a;\n                                state.a_present = true;\n                                if (state.f_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    );\n            out.setVertex__(new Vertex(\"apply\", 0,\n                [src1, src2].concat(sources ? sources : [])\n            ));\n            return out.coalesce__((l, r) => r).holdLazy(new Lazy<B>(() =>\n                    cf.sampleNoTrans__()(ca.sampleNoTrans__())\n                ));\n        });\n\t}\n\n\t/**\n\t * Unwrap a cell inside another cell to give a time-varying cell implementation.\n\t */\n    static switchC<A>(cca : Cell<Cell<A>>) : Cell<A> {\n\t    return Transaction.run(() => {\n            const za = cca.sampleLazy().map((ba : Cell<A>) => ba.sample()),\n                out = new StreamWithSend<A>();\n            let last_ca : Cell<A> = null;\n            const cca_value = Operational.value(cca),\n                  src = new Source(\n                        cca_value.getVertex__(),\n                        () => {\n                            let kill2 : () => void = last_ca === null ? null :\n                                    Operational.value(last_ca).listen_(out.getVertex__(),\n                                        (a : A) => out.send_(a), false);\n                            const kill1 = cca_value.listen_(out.getVertex__(), (ca : Cell<A>) => {\n                                // Note: If any switch takes place during a transaction, then the\n                                // coalesce__() below will always cause a sample to be fetched\n                                // from the one we just switched to. So anything from the old input cell\n                                // that might have happened during this transaction will be suppressed.\n                                last_ca = ca;\n                                if (kill2 !== null)\n                                    kill2();\n                                kill2 = Operational.value(ca).listen_(out.getVertex__(),\n                                    (a : A) => out.send_(a), false);\n                            }, false);\n                            return () => { kill1(); kill2(); };\n                        }\n                    );\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\n            return out.coalesce__((l, r) => r).holdLazy(za);\n        });\n\t}\n\n\t/**\n\t * Unwrap a stream inside a cell to give a time-varying stream implementation.\n\t */\n\tstatic switchS<A>(csa : Cell<Stream<A>>) : Stream<A> {\n\t    return Transaction.run(() => {\n            const out = new StreamWithSend<A>(),\n                  h2 = (a : A) => {\n                          out.send_(a);\n                      },\n                  src = new Source(\n                      csa.getVertex__(),\n                      () => {\n                          let kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\n                          const kill1 = csa.getStream__().listen_(out.getVertex__(), (sa : Stream<A>) => {\n                              kill2();\n                              kill2 = sa.listen_(out.getVertex__(), h2, true);\n                          }, false);\n                          return () => { kill1(); kill2(); };\n                      }\n                  );\n\t        out.setVertex__(new Vertex(\"switchS\", 0, [src]));\n\t        return out;\n\t    });\n    }\n\n\t/**\n\t * Listen for updates to the value of this cell. This is the observer pattern. The\n\t * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\n\t * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\n\t * the world of I/O and for FRP.\n\t * @param h The handler to execute when there's a new value.\n\t *   You should make no assumptions about what thread you are called on, and the\n\t *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\n\t *   or {@link StreamSink#send(Object)} in the handler.\n\t *   An exception will be thrown, because you are not meant to use this to create\n\t *   your own primitives.\n     */\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.run(() => {\n            return Operational.value(this).listen(h);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Cell.ts","/**\n * A representation for a value that may not be available until the current\n * transaction is closed.\n */\nexport class Lazy<A> {\n    constructor(f : () => A) {\n        this.f = f;\n    }\n\n    private f : () => A;\n\n    /**\n     * Get the value if available, throwing an exception if not.\n     * In the general case this should only be used in subsequent transactions to\n     * when the Lazy was obtained.\n     */\n    get() : A {\n        return this.f();\n    }\n\n    /**\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\n     * the value of the function applied to the input Lazy's value.\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : (a : A) => B) {\n        return new Lazy<B>(() => { return f(this.f()); });\n    }\n\n\t/**\n\t * Lift a binary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift<B,C>(b : Lazy<B>, f : (a : A, b : B) => C) : Lazy<C> {\n        return new Lazy<C>(() => { return f(this.f(), b.f()); });\n    }\n\n\t/**\n\t * Lift a ternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift3<B,C,D>(b : Lazy<B>, c : Lazy<C>, f : (a : A, b : B, c : C) => D) : Lazy<D> {\n        return new Lazy<D>(() => { return f(this.f(), b.f(), c.f()); });\n    }\n\n\t/**\n\t * Lift a quaternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift4<B,C,D,E>(b : Lazy<B>, c : Lazy<C>, d : Lazy<D>, f : (a : A, b : B, c : C, d : D) => E) : Lazy<E> {\n        return new Lazy<E>(() => { return f(this.f(), b.f(), c.f(), d.f()); });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Lazy.ts","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Transaction } from \"./Transaction\";\nimport { Unit } from \"./Unit\";\nimport { Source, Vertex } from \"./Vertex\";\n\nexport class Operational {\n    /**\n     * A stream that gives the updates/steps for a {@link Cell}.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static updates<A>(c : Cell<A>) : Stream<A> {\n        /*  Don't think this is needed\n        const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"updates\", 0, [\n                new Source(\n                    c.getStream__().getVertex__(),\n                    () => {\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                ),\n                new Source(\n                    c.getVertex__(),\n                    () => {\n                        return () => { };\n                    }\n                )\n            ]\n        ));\n        return out;\n        */\n        return c.getStream__();\n    }\n\n    /**\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\n     * firing for each update/step of the cell's value.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static value<A>(c : Cell<A>) : Stream<A> {\n        return Transaction.run(() => {\n            const sSpark = new StreamWithSend<Unit>();\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), () => {\n                sSpark.send_(Unit.UNIT);\n            });\n            const sInitial = sSpark.snapshot1(c);\n            return Operational.updates(c).orElse(sInitial);\n        });\n    }\n\n\t/**\n\t * Push each event onto a new transaction guaranteed to come before the next externally\n\t * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\n\t */\n\tstatic defer<A>(s : Stream<A>) : Stream<A> {\n\t    return Operational.split<A>(s.map((a : A) => {\n\t        return [a];\n\t    }));\n    }\n\n\t/**\n\t * Push each event in the list onto a newly created transaction guaranteed\n\t * to come before the next externally initiated transaction. Note that the semantics\n\t * are such that two different invocations of split() can put events into the same\n\t * new transaction, so the resulting stream's events could be simultaneous with\n\t * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\n\t */\n\tstatic split<A>(s : Stream<Array<A>>) : Stream<A> {\n\t    const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"split\", 0, [\n                new Source(\n                    s.getVertex__(),\n                    () => {\n                        return s.listen_(out.getVertex__(), (as : Array<A>) => {\n                            for (let i = 0; i < as.length; i++) {\n                                Transaction.currentTransaction.post(i, () => {\n                                    Transaction.run(() => {\n                                        out.send_(as[i]);\n                                    });\n                                });\n                            }\n                        }, false);\n                    }\n                )\n            ]\n        ));\n        return out;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Operational.ts","export class Unit {\n    static UNIT : Unit = new Unit();\n    constructor() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Unit.ts","import { Source, Vertex } from \"./Vertex\";\n\nexport class Listener<A> {\n    constructor(h : (a : A) => void, target : Vertex) {\n        this.h = h;\n        this.target = target;\n    }\n    h : (a : A) => void;\n    target : Vertex;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Listener.ts","import { Lazy } from \"./Lazy\";\nimport { Cell } from \"./Cell\";\nimport { Stream } from \"./Stream\";\nimport { Transaction } from \"./Transaction\";\n\nexport class LazyCell<A> extends Cell<A> {\n    constructor(lazyInitValue : Lazy<A>, str? : Stream<A>) {\n        super(null, null);\n        Transaction.run(() => {\n            if (str)\n                this.setStream(str);\n            this.lazyInitValue = lazyInitValue;\n        });\n    }\n\n    sampleNoTrans__() : A {  // Override\n        if (this.value == null && this.lazyInitValue != null) {\n            this.value = this.lazyInitValue.get();\n            this.lazyInitValue = null;\n        }\n        return this.value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/LazyCell.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { StreamWithSend } from \"./Stream\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A stream that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\n * should downcast to {@link Stream}.\n */\nexport class StreamSink<A> extends StreamWithSend<A> {\n    constructor(f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n        super();\n        if (!f)\n            f = <(l : A, r : A) => A>((l : A, r : A) => {\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\n            });\n        this.coalescer = new CoalesceHandler<A>(f, this);\n    }\n\n    private coalescer : CoalesceHandler<A>;\n\n    send(a : A) : void {\n        Transaction.run<void>(\n            () => {\n                if (Transaction.currentTransaction.inCallback > 0)\n                    throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\n                this.coalescer.send_(a);\n            }\n        )\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/StreamSink.ts","import { Cell } from \"./Cell\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamLoop } from \"./Stream\";\n\n/**\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\n */\nexport class CellLoop<A> extends LazyCell<A> {\n    constructor() {\n    \tsuper(null, new StreamLoop<A>());\n    }\n\n    /**\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(a_out : Cell<A>) : void {\n        const me = this;\n        Transaction.run(() => {\n            (<StreamLoop<A>>me.getStream__()).loop(a_out.getStream__());\n            me.lazyInitValue = a_out.sampleLazy();\n        });\n    }\n\n    sampleNoTrans__() : A\n    {\n        if (!(<StreamLoop<A>>this.getStream__()).assigned__)\n            throw new Error(\"CellLoop sampled before it was looped\");\n        return super.sampleNoTrans__();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CellLoop.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { Cell } from \"./Cell\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A cell that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\n * should downcast to {@link Cell}.\n */\nexport class CellSink<A> extends Cell<A> {\n    /**\n     * Construct a writable cell with the specified initial value. If multiple values are\n     * sent in the same transaction, the specified function is used to combine them.\n     *\n     * If the function is not supplied, then an exception will be thrown in this case.\n     */\n    constructor(initValue : A, f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n    \tsuper(initValue, new StreamSink<A>(f));\n    }\n\n    /**\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\n     * You are not meant to use this to define your own primitives.\n     * @param a Value to push into the cell.\n     */\n    send(a : A) : void {\n        (<StreamSink<A>>this.getStream__()).send(a);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CellSink.ts","export class Tuple2<A,B> {\n    constructor(a : A, b : B) {\n        this.a = a;\n        this.b = b;\n    }\n    a : A;\n    b : B;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Tuple2.ts","import { Vertex, Source } from \"./Vertex\";\nimport { BSTree } from 'typescript-collections';\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Cell } from \"./Cell\";\nimport { CellSink } from \"./CellSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * An interface for implementations of FRP timer systems.\n */\nexport abstract class TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    abstract setTimer(t : number, callback : () => void) : () => void;\n\n    /**\n     * Return the current clock time.\n     */\n    abstract now() : number;\n}\n\nlet nextSeq : number = 0;\n\nclass Event {\n    constructor(t : number, sAlarm : StreamWithSend<number>) {\n        this.t = t;\n        this.sAlarm = sAlarm;\n        this.seq = ++nextSeq;\n    }\n    t : number;\n    sAlarm : StreamWithSend<number>;\n    seq : number;  // Used to guarantee uniqueness\n}\n\nexport class TimerSystem {\n    constructor(impl : TimerSystemImpl) {\n        Transaction.run(() => {\n            this.impl = impl;\n            this.tMinimum = 0;\n            const timeSnk = new CellSink<number>(impl.now());\n            this.time = timeSnk;\n            // A dummy listener to time to keep it alive even when there are no other listeners.\n            this.time.listen((t : number) => { });\n            Transaction.onStart(() => {\n                // Ensure the time is always increasing from the FRP's point of view.\n                const t = this.tMinimum = Math.max(this.tMinimum, impl.now());\n                // Pop and execute all events earlier than or equal to t (the current time).\n                while (true) {\n                    let ev : Event = null;\n                    if (!this.eventQueue.isEmpty()) {\n                        let mev = this.eventQueue.minimum();\n                        if (mev.t <= t) {\n                            ev = mev;\n                            // TO DO: Detect infinite loops!\n                        }\n                    }\n                    if (ev != null) {\n                        timeSnk.send(ev.t);\n                        Transaction.run(() => ev.sAlarm.send_(ev.t));\n                    }\n                    else\n                        break;\n                }\n                timeSnk.send(t);\n            });\n        });\n    }\n\n    private impl : TimerSystemImpl;\n    private tMinimum : number;  // A guard to allow us to guarantee that the time as\n                                // seen by the FRP is always increasing.\n\n    /**\n     * A cell giving the current clock time.\n     */\n    time : Cell<number>;\n\n    private eventQueue : BSTree<Event> = new BSTree<Event>((a, b) => {\n        if (a.t < b.t) return -1;\n        if (a.t > b.t) return 1;\n        if (a.seq < b.seq) return -1;\n        if (a.seq > b.seq) return 1;\n        return 0;\n    });\n\n    /**\n     * A timer that fires at the specified time, which can be null, meaning\n     * that the alarm is not set.\n     */\n    at(tAlarm : Cell<number>) : Stream<number> {\n        let current : Event = null,\n            cancelCurrent : () => void = null,\n            active : boolean = false,\n            tAl : number = null,\n            sampled : boolean = false;\n        const sAlarm = new StreamWithSend<number>(null),\n            updateTimer = () => {\n                if (cancelCurrent !== null) {\n                    cancelCurrent();\n                    this.eventQueue.remove(current);\n                }\n                cancelCurrent = null;\n                current = null;\n                if (active) {\n                    if (!sampled) {\n                        sampled = true;\n                        tAl = tAlarm.sampleNoTrans__();\n                    }\n                    if (tAl !== null) {\n                        current = new Event(tAl, sAlarm);\n                        this.eventQueue.add(current);\n                        cancelCurrent = this.impl.setTimer(tAl, () => {\n                                    // Correction to ensure the clock time appears to be >= the\n                                    // alarm time. It can be a few milliseconds early, and\n                                    // this breaks things otherwise, because it doesn't think\n                                    // it's time to fire the alarm yet.\n                                    this.tMinimum = Math.max(this.tMinimum, tAl);\n                                    // Open and close a transaction to trigger queued\n                                    // events to run.\n                                    Transaction.run(() => {});\n                                });\n                    }\n                }\n            };\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\n                new Source(\n                    tAlarm.getVertex__(),\n                    () => {\n                        active = true;\n                        sampled = false;\n                        Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\n                        const kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), (oAlarm : number) => {\n                            tAl = oAlarm;\n                            sampled = true;\n                            updateTimer();\n                        }, false);\n                        return () => {\n                            active = false;\n                            updateTimer();\n                            kill();\n                        };\n                    }\n                )\n            ]\n        ));\n        return sAlarm;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/TimerSystem.ts","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using seconds as the time unit.\n */\nexport class SecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new SecondsTimerSystemImpl());\n    }\n}\n\nclass SecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, Math.max((t - this.now()) * 1000, 0));\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now() * 0.001;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/SecondsTimerSystem.ts","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using milliseconds as the time unit.\n */\nexport class MillisecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new MillisecondsTimerSystemImpl());\n    }\n}\n\nclass MillisecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, Math.max(t - this.now(), 0));\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/MillisecondsTimerSystem.ts","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Vertex, Source } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\n\nexport class IOAction {\n    /*!\n     * Convert a function that performs asynchronous I/O taking input A\n     * and returning a value of type B into an I/O action of type\n     * (sa : Stream<A>) => Stream<B>\n     */\n    static fromAsync<A,B>(performIO : (a : A, result : (b : B) => void) => void)\n            : (sa : Stream<A>) => Stream<B> {\n        return (sa : Stream<A>) => {\n            const out = new StreamWithSend<B>(null);\n            out.setVertex__(new Vertex(\"map\", 0, [\n                    new Source(\n                        sa.getVertex__(),\n                        () => {\n                            return sa.listen_(out.getVertex__(), (a : A) => {\n                                performIO(a, (b : B) => {\n                                    Transaction.run(() => {\n                                        out.send_(b);\n                                    });\n                                });\n                            }, false);\n                        }\n                    )\n                ]\n            ));\n            return out;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/IOAction.ts"],"sourceRoot":""}