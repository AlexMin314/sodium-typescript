{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///sodium.umd.min.js","webpack:///webpack/bootstrap 68af005a70a2c400e812","webpack:///./src/lib/Sodium.ts","webpack:///./src/lib/Lambda.ts","webpack:///./src/lib/Vertex.ts","webpack:///./src/lib/Stream.ts","webpack:///./src/lib/Transaction.ts","webpack:///./~/typescript-collections/dist/lib/index.js","webpack:///./~/typescript-collections/dist/lib/arrays.js","webpack:///./~/typescript-collections/dist/lib/util.js","webpack:///./~/typescript-collections/dist/lib/Bag.js","webpack:///./~/typescript-collections/dist/lib/Dictionary.js","webpack:///./~/typescript-collections/dist/lib/Set.js","webpack:///./~/typescript-collections/dist/lib/BSTree.js","webpack:///./~/typescript-collections/dist/lib/Queue.js","webpack:///./~/typescript-collections/dist/lib/LinkedList.js","webpack:///./~/typescript-collections/dist/lib/Heap.js","webpack:///./~/typescript-collections/dist/lib/LinkedDictionary.js","webpack:///./~/typescript-collections/dist/lib/MultiDictionary.js","webpack:///./~/typescript-collections/dist/lib/PriorityQueue.js","webpack:///./~/typescript-collections/dist/lib/Stack.js","webpack:///./src/lib/CoalesceHandler.ts","webpack:///./src/lib/Cell.ts","webpack:///./src/lib/Lazy.ts","webpack:///./src/lib/Operational.ts","webpack:///./src/lib/Unit.ts","webpack:///./src/lib/Listener.ts","webpack:///./src/lib/LazyCell.ts","webpack:///./src/lib/StreamSink.ts","webpack:///./src/lib/CellLoop.ts","webpack:///./src/lib/CellSink.ts","webpack:///./src/lib/Tuple2.ts","webpack:///./src/lib/TimerSystem.ts","webpack:///./src/lib/SecondsTimerSystem.ts","webpack:///./src/lib/MillisecondsTimerSystem.ts","webpack:///./src/lib/IOAction.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Lambda_1","lambda1","lambda2","lambda3","lambda4","lambda5","lambda6","Stream_1","Stream","StreamLoop","StreamSink_1","StreamSink","Cell_1","Cell","CellLoop_1","CellLoop","CellSink_1","CellSink","Transaction_1","Transaction","Tuple2_1","Tuple2","Unit_1","Unit","Operational_1","Operational","Vertex_1","getTotalRegistrations","Vertex","TimerSystem_1","TimerSystemImpl","TimerSystem","SecondsTimerSystem_1","SecondsTimerSystem","MillisecondsTimerSystem_1","MillisecondsTimerSystem","IOAction_1","IOAction","f","deps","Lambda1","Lambda1_deps","Lambda1_toFunction","Lambda2","Lambda2_deps","Lambda2_toFunction","Lambda3","Lambda3_deps","Lambda3_toFunction","Lambda4","Lambda4_deps","Lambda4_toFunction","Lambda5","Lambda5_deps","Lambda5_toFunction","Lambda6","Lambda6_deps","Lambda6_toFunction","toSources","ss","i","length","dep","push","Source","getVertex__","totalRegistrations","setVerbose","v","verbose","describeAll","visited","contains","console","log","descr","add","chs","children","origin","register_","registered","deregister_","Error","prototype","register","target","_this","increment","decrement","deregister","Color","roots","nextID","name","rank","sources","targets","childrn","color","black","buffered","refCountAdj","refCount","collectCycles","incRefCount","anyChanged","ensureBiggerThan","decRefCount","matched","splice","addSource","src","limit","colStr","gray","white","purple","str","referrer","release","possibleRoots","free","markRoots","scanRoots","collectRoots","newRoots","markGray","scan","collectWhite","scanBlack","NULL","__extends","d","b","__","constructor","hasOwnProperty","Object","create","CoalesceHandler_1","Listener_1","Lazy_1","LazyCell_1","vertex","listeners","firings","map","out","StreamWithSend","ff","listen_","a","send_","concat","mapTo","orElse","s","merge","left","right","merge_","coalesce__","coalescer","CoalesceHandler","transactionally","filter","filterNotNull","gate","snapshot","pred","snapshot1","sampleNoTrans__","hold","initValue","holdLazy","LazyCell","collect","initState","collectLazy","Lazy","ea","es","ebs","eb","bs","es_out","loop","accum","accumLazy","once","me","listen","h","suppressEarlierFirings","currentTransaction","requestRegen","listener","Listener","firings_1","slice","prioritized","removed","_super","setVertex__","last","_loop_1","inCallback","err","assigned__","sa_out","typescript_collections_1","Entry","action","seq","nextSeq","toString","toRegen","prioritizedQ","PriorityQueue","entries","Set","lastQ","postQ","e","enqueue","post","childIx","existing","neu","checkRegen","clear","toArray","isActive","close","isEmpty","dequeue","remove","parent_1","onStart","r","onStartHooks","transWas","runningOnStartHooks","_arrays","arrays","Bag_1","Bag","default","BSTree_1","BSTree","Dictionary_1","Dictionary","Heap_1","Heap","LinkedDictionary_1","LinkedDictionary","LinkedList_1","LinkedList","MultiDictionary_1","MultiDictionary","Queue_1","Queue","PriorityQueue_1","Set_1","Stack_1","Stack","_util","util","indexOf","array","item","equalsFunction","equals","defaultEquals","lastIndexOf","index","frequency","freq","array1","array2","copy","swap","j","temp","forEach","callback","_i","array_1","ele","defaultCompare","defaultToString","isUndefined","isString","makeString","join","toret","first","prop","has","isFunction","func","obj","reverseCompareFunction","compareFunction","compareToEquals","_hasOwnProperty","toStrFunction","toStrF","dictionary","nElements","element","nCopies","getValue","copies","node","value","setValue","count","containsKey","values","values_1","toSet","elements","elements_1","k","size","defineProperty","table","toStr","key","pair","ret","previousElement","undefined","keys","name_1","name_2","name_3","toStringFunction","intersection","otherSet","set","union","difference","isSubsetOf","isSub","compare","insertNode","createNode","searchNode","removeNode","inorderTraversal","inorderTraversalAux","stop","preorderTraversal","preorderTraversalAux","postorderTraversal","postorderTraversalAux","levelTraversal","levelTraversalAux","minimum","minimumAux","maximum","maximumAux","height","heightAux","cmp","leftCh","rightCh","transplant","n1","n2","parent","y","signal","queue","Math","max","position","list","elem","el","removeElementAtIndex","peek","firstNode","lastNode","newNode","next","prev","nodeAtIndex","elementAtIndex","equalsF","currentNode","previous","other","eqF","equalsAux","reverse","current","collections","data","leftChildIndex","nodeIndex","rightChildIndex","parentIndex","floor","minIndex","leftChild","rightChild","siftUp","siftDown","min","removeRoot","equF","LinkedDictionaryPair","unlink","head","tail","appendToTail","entry","getLinkedDictionaryPair","replace","oldPair","newPair","existingPair","crawlNode","valuesEqualsFunction","allowDuplicateValues","dict","allowDuplicate","_a","v_1","w","heap","pop","accumValid","LazySample","cell","hasValue","ApplyState","f_present","a_present","setStream","valueUpdate","lazyInitValue","getStream__","sample","sampleLazy","sampleLazyNoTrans__","updates","lift","fn0","fn","cf","aa","bb","apply","lift3","mf","cc","lift4","dd","lift5","ee","lift6","ca","state","cf_value","ca_value","src1","src2","l","switchC","cca","za","ba","last_ca","cca_value","kill2","kill1","switchS","csa","h2","sa","get","sSpark","UNIT","sInitial","defer","split","as","send","a_out","Event","t","sAlarm","impl","eventQueue","timeSnk","now","time","ev","mev","state_1","at","tAlarm","cancelCurrent","active","tAl","sampled","updateTimer","setTimer","kill","oAlarm","SecondsTimerSystemImpl","arguments","timeout","setTimeout","clearTimeout","Date","MillisecondsTimerSystemImpl","fromAsync","performIO"],"mappings":"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","file":"sodium.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Sodium\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sodium\"] = factory();\n\telse\n\t\troot[\"Sodium\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Sodium\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sodium\"] = factory();\n\telse\n\t\troot[\"Sodium\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\texports.lambda1 = Lambda_1.lambda1;\r\n\texports.lambda2 = Lambda_1.lambda2;\r\n\texports.lambda3 = Lambda_1.lambda3;\r\n\texports.lambda4 = Lambda_1.lambda4;\r\n\texports.lambda5 = Lambda_1.lambda5;\r\n\texports.lambda6 = Lambda_1.lambda6;\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\texports.Stream = Stream_1.Stream;\r\n\texports.StreamLoop = Stream_1.StreamLoop;\r\n\tvar StreamSink_1 = __webpack_require__(26);\r\n\texports.StreamSink = StreamSink_1.StreamSink;\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\texports.Cell = Cell_1.Cell;\r\n\tvar CellLoop_1 = __webpack_require__(27);\r\n\texports.CellLoop = CellLoop_1.CellLoop;\r\n\tvar CellSink_1 = __webpack_require__(28);\r\n\texports.CellSink = CellSink_1.CellSink;\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\texports.Transaction = Transaction_1.Transaction;\r\n\tvar Tuple2_1 = __webpack_require__(29);\r\n\texports.Tuple2 = Tuple2_1.Tuple2;\r\n\tvar Unit_1 = __webpack_require__(23);\r\n\texports.Unit = Unit_1.Unit;\r\n\tvar Operational_1 = __webpack_require__(22);\r\n\texports.Operational = Operational_1.Operational;\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\texports.getTotalRegistrations = Vertex_1.getTotalRegistrations;\r\n\texports.Vertex = Vertex_1.Vertex;\r\n\tvar TimerSystem_1 = __webpack_require__(30);\r\n\texports.TimerSystemImpl = TimerSystem_1.TimerSystemImpl;\r\n\texports.TimerSystem = TimerSystem_1.TimerSystem;\r\n\tvar SecondsTimerSystem_1 = __webpack_require__(31);\r\n\texports.SecondsTimerSystem = SecondsTimerSystem_1.SecondsTimerSystem;\r\n\tvar MillisecondsTimerSystem_1 = __webpack_require__(32);\r\n\texports.MillisecondsTimerSystem = MillisecondsTimerSystem_1.MillisecondsTimerSystem;\r\n\tvar IOAction_1 = __webpack_require__(33);\r\n\texports.IOAction = IOAction_1.IOAction;\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Lambda1 = (function () {\r\n\t    function Lambda1(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda1;\r\n\t}());\r\n\texports.Lambda1 = Lambda1;\r\n\tfunction lambda1(f, deps) {\r\n\t    return new Lambda1(f, deps);\r\n\t}\r\n\texports.lambda1 = lambda1;\r\n\tfunction Lambda1_deps(f) {\r\n\t    if (f instanceof Lambda1)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda1_deps = Lambda1_deps;\r\n\tfunction Lambda1_toFunction(f) {\r\n\t    if (f instanceof Lambda1)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda1_toFunction = Lambda1_toFunction;\r\n\tvar Lambda2 = (function () {\r\n\t    function Lambda2(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda2;\r\n\t}());\r\n\texports.Lambda2 = Lambda2;\r\n\tfunction lambda2(f, deps) {\r\n\t    return new Lambda2(f, deps);\r\n\t}\r\n\texports.lambda2 = lambda2;\r\n\tfunction Lambda2_deps(f) {\r\n\t    if (f instanceof Lambda2)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda2_deps = Lambda2_deps;\r\n\tfunction Lambda2_toFunction(f) {\r\n\t    if (f instanceof Lambda2)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda2_toFunction = Lambda2_toFunction;\r\n\tvar Lambda3 = (function () {\r\n\t    function Lambda3(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda3;\r\n\t}());\r\n\texports.Lambda3 = Lambda3;\r\n\tfunction lambda3(f, deps) {\r\n\t    return new Lambda3(f, deps);\r\n\t}\r\n\texports.lambda3 = lambda3;\r\n\tfunction Lambda3_deps(f) {\r\n\t    if (f instanceof Lambda3)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda3_deps = Lambda3_deps;\r\n\tfunction Lambda3_toFunction(f) {\r\n\t    if (f instanceof Lambda3)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda3_toFunction = Lambda3_toFunction;\r\n\tvar Lambda4 = (function () {\r\n\t    function Lambda4(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda4;\r\n\t}());\r\n\texports.Lambda4 = Lambda4;\r\n\tfunction lambda4(f, deps) {\r\n\t    return new Lambda4(f, deps);\r\n\t}\r\n\texports.lambda4 = lambda4;\r\n\tfunction Lambda4_deps(f) {\r\n\t    if (f instanceof Lambda4)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda4_deps = Lambda4_deps;\r\n\tfunction Lambda4_toFunction(f) {\r\n\t    if (f instanceof Lambda4)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda4_toFunction = Lambda4_toFunction;\r\n\tvar Lambda5 = (function () {\r\n\t    function Lambda5(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda5;\r\n\t}());\r\n\texports.Lambda5 = Lambda5;\r\n\tfunction lambda5(f, deps) {\r\n\t    return new Lambda5(f, deps);\r\n\t}\r\n\texports.lambda5 = lambda5;\r\n\tfunction Lambda5_deps(f) {\r\n\t    if (f instanceof Lambda5)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda5_deps = Lambda5_deps;\r\n\tfunction Lambda5_toFunction(f) {\r\n\t    if (f instanceof Lambda5)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda5_toFunction = Lambda5_toFunction;\r\n\tvar Lambda6 = (function () {\r\n\t    function Lambda6(f, deps) {\r\n\t        this.f = f;\r\n\t        this.deps = deps;\r\n\t    }\r\n\t    return Lambda6;\r\n\t}());\r\n\texports.Lambda6 = Lambda6;\r\n\tfunction lambda6(f, deps) {\r\n\t    return new Lambda6(f, deps);\r\n\t}\r\n\texports.lambda6 = lambda6;\r\n\tfunction Lambda6_deps(f) {\r\n\t    if (f instanceof Lambda6)\r\n\t        return f.deps;\r\n\t    else\r\n\t        return [];\r\n\t}\r\n\texports.Lambda6_deps = Lambda6_deps;\r\n\tfunction Lambda6_toFunction(f) {\r\n\t    if (f instanceof Lambda6)\r\n\t        return f.f;\r\n\t    else\r\n\t        return f;\r\n\t}\r\n\texports.Lambda6_toFunction = Lambda6_toFunction;\r\n\tfunction toSources(deps) {\r\n\t    var ss = [];\r\n\t    for (var i = 0; i < deps.length; i++) {\r\n\t        var dep = deps[i];\r\n\t        ss.push(new Vertex_1.Source(dep.getVertex__(), null));\r\n\t    }\r\n\t    return ss;\r\n\t}\r\n\texports.toSources = toSources;\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar totalRegistrations = 0;\r\n\tfunction getTotalRegistrations() {\r\n\t    return totalRegistrations;\r\n\t}\r\n\texports.getTotalRegistrations = getTotalRegistrations;\r\n\tvar Source = (function () {\r\n\t    function Source(origin, register_) {\r\n\t        this.registered = false;\r\n\t        this.deregister_ = null;\r\n\t        if (origin === null)\r\n\t            throw new Error(\"null origin!\");\r\n\t        this.origin = origin;\r\n\t        this.register_ = register_;\r\n\t    }\r\n\t    Source.prototype.register = function (target) {\r\n\t        var _this = this;\r\n\t        if (!this.registered) {\r\n\t            this.registered = true;\r\n\t            if (this.register_ !== null)\r\n\t                this.deregister_ = this.register_();\r\n\t            else {\r\n\t                this.origin.increment(target);\r\n\t                this.deregister_ = function () { return _this.origin.decrement(target); };\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Source.prototype.deregister = function (target) {\r\n\t        if (this.registered) {\r\n\t            this.registered = false;\r\n\t            if (this.deregister_ !== null)\r\n\t                this.deregister_();\r\n\t        }\r\n\t    };\r\n\t    return Source;\r\n\t}());\r\n\texports.Source = Source;\r\n\t(function (Color) {\r\n\t    Color[Color[\"black\"] = 0] = \"black\";\r\n\t    Color[Color[\"gray\"] = 1] = \"gray\";\r\n\t    Color[Color[\"white\"] = 2] = \"white\";\r\n\t    Color[Color[\"purple\"] = 3] = \"purple\";\r\n\t})(exports.Color || (exports.Color = {}));\r\n\tvar Color = exports.Color;\r\n\t;\r\n\tvar roots = [];\r\n\tvar nextID = 0;\r\n\tvar verbose = false;\r\n\tfunction setVerbose(v) { verbose = v; }\r\n\texports.setVerbose = setVerbose;\r\n\tfunction describeAll(v, visited) {\r\n\t    if (visited.contains(v.id))\r\n\t        return;\r\n\t    console.log(v.descr());\r\n\t    visited.add(v.id);\r\n\t    var chs = v.children();\r\n\t    for (var i = 0; i < chs.length; i++)\r\n\t        describeAll(chs[i], visited);\r\n\t}\r\n\texports.describeAll = describeAll;\r\n\tvar Vertex = (function () {\r\n\t    function Vertex(name, rank, sources) {\r\n\t        this.targets = [];\r\n\t        this.childrn = [];\r\n\t        this.visited = false;\r\n\t        // --------------------------------------------------------\r\n\t        // Synchronous Cycle Collection algorithm presented in \"Concurrent\r\n\t        // Cycle Collection in Reference Counted Systems\" by David F. Bacon\r\n\t        // and V.T. Rajan.\r\n\t        this.color = Color.black;\r\n\t        this.buffered = false;\r\n\t        this.refCountAdj = 0;\r\n\t        this.name = name;\r\n\t        this.rank = rank;\r\n\t        this.sources = sources;\r\n\t        this.id = nextID++;\r\n\t    }\r\n\t    Vertex.prototype.refCount = function () { return this.targets.length; };\r\n\t    ;\r\n\t    Vertex.prototype.register = function (target) {\r\n\t        return this.increment(target);\r\n\t    };\r\n\t    Vertex.prototype.deregister = function (target) {\r\n\t        if (verbose)\r\n\t            console.log(\"deregister \" + this.descr() + \" => \" + target.descr());\r\n\t        this.decrement(target);\r\n\t        Vertex.collectCycles();\r\n\t    };\r\n\t    Vertex.prototype.incRefCount = function (target) {\r\n\t        var anyChanged = false;\r\n\t        if (this.refCount() == 0) {\r\n\t            for (var i = 0; i < this.sources.length; i++)\r\n\t                this.sources[i].register(this);\r\n\t        }\r\n\t        this.targets.push(target);\r\n\t        target.childrn.push(this);\r\n\t        if (target.ensureBiggerThan(this.rank))\r\n\t            anyChanged = true;\r\n\t        totalRegistrations++;\r\n\t        return anyChanged;\r\n\t    };\r\n\t    Vertex.prototype.decRefCount = function (target) {\r\n\t        if (verbose)\r\n\t            console.log(\"DEC \" + this.descr());\r\n\t        var matched = false;\r\n\t        for (var i = 0; i < target.childrn.length; i++)\r\n\t            if (target.childrn[i] === this) {\r\n\t                target.childrn.splice(i, 1);\r\n\t            }\r\n\t        for (var i = 0; i < this.targets.length; i++)\r\n\t            if (this.targets[i] === target) {\r\n\t                this.targets.splice(i, 1);\r\n\t                matched = true;\r\n\t                break;\r\n\t            }\r\n\t        if (matched) {\r\n\t            if (this.refCount() == 0) {\r\n\t                for (var i = 0; i < this.sources.length; i++)\r\n\t                    this.sources[i].deregister(this);\r\n\t            }\r\n\t            totalRegistrations--;\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.addSource = function (src) {\r\n\t        this.sources.push(src);\r\n\t        if (this.refCount() > 0)\r\n\t            src.register(this);\r\n\t    };\r\n\t    Vertex.prototype.ensureBiggerThan = function (limit) {\r\n\t        if (this.rank > limit || this.visited)\r\n\t            return false;\r\n\t        this.visited = true;\r\n\t        this.rank = limit + 1;\r\n\t        for (var i = 0; i < this.targets.length; i++)\r\n\t            this.targets[i].ensureBiggerThan(this.rank);\r\n\t        this.visited = false;\r\n\t        return true;\r\n\t    };\r\n\t    Vertex.prototype.descr = function () {\r\n\t        var colStr = null;\r\n\t        switch (this.color) {\r\n\t            case Color.black:\r\n\t                colStr = \"black\";\r\n\t                break;\r\n\t            case Color.gray:\r\n\t                colStr = \"gray\";\r\n\t                break;\r\n\t            case Color.white:\r\n\t                colStr = \"white\";\r\n\t                break;\r\n\t            case Color.purple:\r\n\t                colStr = \"purple\";\r\n\t                break;\r\n\t        }\r\n\t        var str = this.id + \" \" + this.name + \" [\" + this.refCount() + \"/\" + this.refCountAdj + \"] \" + colStr + \" ->\";\r\n\t        var chs = this.children();\r\n\t        for (var i = 0; i < chs.length; i++) {\r\n\t            str = str + \" \" + chs[i].id;\r\n\t        }\r\n\t        return str;\r\n\t    };\r\n\t    Vertex.prototype.children = function () { return this.childrn; };\r\n\t    Vertex.prototype.increment = function (referrer) {\r\n\t        return this.incRefCount(referrer);\r\n\t    };\r\n\t    Vertex.prototype.decrement = function (referrer) {\r\n\t        this.decRefCount(referrer);\r\n\t        if (this.refCount() == 0)\r\n\t            this.release();\r\n\t        else\r\n\t            this.possibleRoots();\r\n\t    };\r\n\t    Vertex.prototype.release = function () {\r\n\t        this.color = Color.black;\r\n\t        if (!this.buffered)\r\n\t            this.free();\r\n\t    };\r\n\t    Vertex.prototype.free = function () {\r\n\t        while (this.targets.length > 0)\r\n\t            this.decRefCount(this.targets[0]);\r\n\t    };\r\n\t    Vertex.prototype.possibleRoots = function () {\r\n\t        if (this.color != Color.purple) {\r\n\t            this.color = Color.purple;\r\n\t            if (!this.buffered) {\r\n\t                this.buffered = true;\r\n\t                roots.push(this);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Vertex.collectCycles = function () {\r\n\t        Vertex.markRoots();\r\n\t        Vertex.scanRoots();\r\n\t        Vertex.collectRoots();\r\n\t    };\r\n\t    Vertex.markRoots = function () {\r\n\t        var newRoots = [];\r\n\t        for (var i = 0; i < roots.length; i++) {\r\n\t            if (verbose)\r\n\t                console.log(\"markRoots \" + roots[i].descr()); // ###\r\n\t            if (roots[i].color == Color.purple) {\r\n\t                roots[i].markGray();\r\n\t                newRoots.push(roots[i]);\r\n\t            }\r\n\t            else {\r\n\t                roots[i].buffered = false;\r\n\t                if (roots[i].color == Color.black && roots[i].refCount() == 0)\r\n\t                    roots[i].free();\r\n\t            }\r\n\t        }\r\n\t        roots = newRoots;\r\n\t    };\r\n\t    Vertex.scanRoots = function () {\r\n\t        for (var i = 0; i < roots.length; i++)\r\n\t            roots[i].scan();\r\n\t    };\r\n\t    Vertex.collectRoots = function () {\r\n\t        for (var i = 0; i < roots.length; i++) {\r\n\t            roots[i].buffered = false;\r\n\t            roots[i].collectWhite();\r\n\t        }\r\n\t        roots = [];\r\n\t    };\r\n\t    Vertex.prototype.markGray = function () {\r\n\t        if (this.color != Color.gray) {\r\n\t            this.color = Color.gray;\r\n\t            var chs = this.children();\r\n\t            for (var i = 0; i < chs.length; i++) {\r\n\t                chs[i].refCountAdj--;\r\n\t                if (verbose)\r\n\t                    console.log(\"markGray \" + this.descr());\r\n\t                chs[i].markGray();\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.scan = function () {\r\n\t        if (verbose)\r\n\t            console.log(\"scan \" + this.descr());\r\n\t        if (this.color == Color.gray) {\r\n\t            if (this.refCount() + this.refCountAdj > 0)\r\n\t                this.scanBlack();\r\n\t            else {\r\n\t                this.color = Color.white;\r\n\t                if (verbose)\r\n\t                    console.log(\"scan WHITE \" + this.descr());\r\n\t                var chs = this.children();\r\n\t                for (var i = 0; i < chs.length; i++)\r\n\t                    chs[i].scan();\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.scanBlack = function () {\r\n\t        this.color = Color.black;\r\n\t        var chs = this.children();\r\n\t        for (var i = 0; i < chs.length; i++) {\r\n\t            chs[i].refCountAdj++;\r\n\t            if (verbose)\r\n\t                console.log(\"scanBlack \" + this.descr());\r\n\t            if (chs[i].color != Color.black)\r\n\t                chs[i].scanBlack();\r\n\t        }\r\n\t    };\r\n\t    Vertex.prototype.collectWhite = function () {\r\n\t        if (this.color == Color.white && !this.buffered) {\r\n\t            if (verbose)\r\n\t                console.log(\"collectWhite \" + this.descr());\r\n\t            this.color = Color.black;\r\n\t            this.refCountAdj = 0;\r\n\t            var chs = this.children();\r\n\t            for (var i = 0; i < chs.length; i++)\r\n\t                chs[i].collectWhite();\r\n\t            this.free();\r\n\t        }\r\n\t    };\r\n\t    Vertex.NULL = new Vertex(\"user\", 1e12, []);\r\n\t    return Vertex;\r\n\t}());\r\n\texports.Vertex = Vertex;\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar CoalesceHandler_1 = __webpack_require__(19);\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\t//import { StreamLoop } from \"./StreamLoop\";\r\n\tvar Listener_1 = __webpack_require__(24);\r\n\tvar Lazy_1 = __webpack_require__(21);\r\n\tvar LazyCell_1 = __webpack_require__(25);\r\n\tvar Stream = (function () {\r\n\t    function Stream(vertex) {\r\n\t        this.listeners = [];\r\n\t        this.firings = [];\r\n\t        this.vertex = vertex ? vertex : new Vertex_1.Vertex(\"Stream\", 0, []);\r\n\t    }\r\n\t    Stream.prototype.getVertex__ = function () {\r\n\t        return this.vertex;\r\n\t    };\r\n\t    /**\r\n\t     * Transform the stream's event values according to the supplied function, so the returned\r\n\t     * Stream's event values reflect the value of the function applied to the input\r\n\t     * Stream's event values.\r\n\t     * @param f Function to apply to convert the values. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n\t     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.map = function (f) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda1_toFunction(f);\r\n\t        out.vertex = new Vertex_1.Vertex(\"map\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a));\r\n\t                }, false);\r\n\t            })\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda1_deps(f))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Transform the stream's event values into the specified constant value.\r\n\t     * @param b Constant value.\r\n\t     */\r\n\t    Stream.prototype.mapTo = function (b) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        out.vertex = new Vertex_1.Vertex(\"mapTo\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(b);\r\n\t                }, false);\r\n\t            })\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\r\n\t     * in the simultaneous case.\r\n\t     * <p>\r\n\t     * In the case where two events are simultaneous (i.e. both\r\n\t     * within the same transaction), the event from <em>this</em> will take precedence, and\r\n\t     * the event from <em>s</em> will be dropped.\r\n\t     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\r\n\t     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\r\n\t     * <p>\r\n\t     * The name orElse() is used instead of merge() to make it really clear that care should\r\n\t     * be taken, because events can be dropped.\r\n\t     */\r\n\t    Stream.prototype.orElse = function (s) {\r\n\t        return this.merge(s, function (left, right) {\r\n\t            return left;\r\n\t        });\r\n\t    };\r\n\t    Stream.prototype.merge_ = function (s) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend();\r\n\t        var left = new Vertex_1.Vertex(\"merge\", 0, []);\r\n\t        left.sources.push(new Vertex_1.Source(this.vertex, function () {\r\n\t            return _this.listen_(left, function (a) {\r\n\t                out.send_(a);\r\n\t            }, false);\r\n\t        }));\r\n\t        out.vertex.sources = out.vertex.sources.concat([\r\n\t            new Vertex_1.Source(left, function () {\r\n\t                left.register(out.vertex);\r\n\t                return function () { left.deregister(out.vertex); };\r\n\t            }),\r\n\t            new Vertex_1.Source(s.vertex, function () {\r\n\t                return s.listen_(out.vertex, function (a) {\r\n\t                    out.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    Stream.prototype.coalesce__ = function (f) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend();\r\n\t        var coalescer = new CoalesceHandler_1.CoalesceHandler(f, out);\r\n\t        out.vertex.sources = out.vertex.sources.concat([\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    coalescer.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ]).concat(Lambda_1.toSources(Lambda_1.Lambda2_deps(f)));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Merge two streams of the same type into one, so that events on either input appear\r\n\t     * on the returned stream.\r\n\t     * <p>\r\n\t     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\r\n\t     * occurring in the same transaction), combine them into one using the specified combining function\r\n\t     * so that the returned stream is guaranteed only ever to have one event per transaction.\r\n\t     * The event from <em>this</em> will appear at the left input of the combining function, and\r\n\t     * the event from <em>s</em> will appear at the right.\r\n\t     * @param f Function to combine the values. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.merge = function (s, f) {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            return _this.merge_(s).coalesce__(f);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that only outputs events for which the predicate returns true.\r\n\t     */\r\n\t    Stream.prototype.filter = function (f) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda1_toFunction(f);\r\n\t        out.vertex = new Vertex_1.Vertex(\"filter\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    if (ff(a))\r\n\t                        out.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda1_deps(f))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that only outputs events that have present\r\n\t     * values, discarding null values.\r\n\t     */\r\n\t    Stream.prototype.filterNotNull = function () {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        out.vertex = new Vertex_1.Vertex(\"filterNotNull\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    if (a !== null)\r\n\t                        out.send_(a);\r\n\t                }, false);\r\n\t            })\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that only outputs events from the input stream\r\n\t     * when the specified cell's value is true.\r\n\t     */\r\n\t    Stream.prototype.gate = function (c) {\r\n\t        return this.snapshot(c, function (a, pred) {\r\n\t            return pred ? a : null;\r\n\t        }).filterNotNull();\r\n\t    };\r\n\t    /**\r\n\t     * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\r\n\t     * at the time of the event firing, ignoring the stream's value.\r\n\t     */\r\n\t    Stream.prototype.snapshot1 = function (c) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot1\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(c.sampleNoTrans__());\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(c.getVertex__(), null)\r\n\t        ]);\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream whose events are the result of the combination using the specified\r\n\t     * function of the input stream's event value and the value of the cell at that time.\r\n\t     * <P>\r\n\t     * There is an implicit delay: State updates caused by event firings being held with\r\n\t     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n\t     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\r\n\t     * always sees the value of a cell as it was before any state changes from the current\r\n\t     * transaction.\r\n\t     */\r\n\t    Stream.prototype.snapshot = function (c, f) {\r\n\t        var _this = this;\r\n\t        var out = new StreamWithSend(null);\r\n\t        var ff = Lambda_1.Lambda2_toFunction(f);\r\n\t        out.vertex = new Vertex_1.Vertex(\"snapshot\", 0, [\r\n\t            new Vertex_1.Source(this.vertex, function () {\r\n\t                return _this.listen_(out.vertex, function (a) {\r\n\t                    out.send_(ff(a, c.sampleNoTrans__()));\r\n\t                }, false);\r\n\t            }),\r\n\t            new Vertex_1.Source(c.getVertex__(), null)\r\n\t        ].concat(Lambda_1.toSources(Lambda_1.Lambda2_deps(f))));\r\n\t        return out;\r\n\t    };\r\n\t    /**\r\n\t     * Create a {@link Cell} with the specified initial value, that is updated\r\n\t     * by this stream's event values.\r\n\t     * <p>\r\n\t     * There is an implicit delay: State updates caused by event firings don't become\r\n\t     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\r\n\t     * until the following transaction. To put this another way,\r\n\t     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\r\n\t     * any state changes from the current transaction.\r\n\t     */\r\n\t    Stream.prototype.hold = function (initValue) {\r\n\t        return new Cell_1.Cell(initValue, this);\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\r\n\t     */\r\n\t    Stream.prototype.holdLazy = function (initValue) {\r\n\t        return new LazyCell_1.LazyCell(initValue, this);\r\n\t    };\r\n\t    /**\r\n\t     * Transform an event with a generalized state loop (a Mealy machine). The function\r\n\t     * is passed the input and the old state and returns the new state and output value.\r\n\t     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n\t     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.collect = function (initState, f) {\r\n\t        return this.collectLazy(new Lazy_1.Lazy(function () { return initState; }), f);\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\r\n\t     * {@link Cell#sampleLazy()}.\r\n\t     */\r\n\t    Stream.prototype.collectLazy = function (initState, f) {\r\n\t        var ea = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            var es = new StreamLoop(), s = es.holdLazy(initState), ebs = ea.snapshot(s, f), eb = ebs.map(function (bs) { return bs.a; }), es_out = ebs.map(function (bs) { return bs.b; });\r\n\t            es.loop(es_out);\r\n\t            return eb;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Accumulate on input event, outputting the new state each time.\r\n\t     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n\t     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n\t     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Stream.prototype.accum = function (initState, f) {\r\n\t        return this.accumLazy(new Lazy_1.Lazy(function () { return initState; }), f);\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\r\n\t     * {@link Cell#sampleLazy()}.\r\n\t     */\r\n\t    Stream.prototype.accumLazy = function (initState, f) {\r\n\t        var ea = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            var es = new StreamLoop(), s = es.holdLazy(initState), es_out = ea.snapshot(s, f);\r\n\t            es.loop(es_out);\r\n\t            return es_out.holdLazy(initState);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Return a stream that outputs only one value: the next event of the\r\n\t     * input stream, starting from the transaction in which once() was invoked.\r\n\t     */\r\n\t    Stream.prototype.once = function () {\r\n\t        /*\r\n\t            return Transaction.transactionally(() => {\r\n\t                const ev = this,\r\n\t                    out = new StreamWithSend<A>();\r\n\t                let la : () => void = null;\r\n\t                la = ev.listen_(out.vertex, (a : A) => {\r\n\t                    if (la !== null) {\r\n\t                        out.send_(a);\r\n\t                        la();\r\n\t                        la = null;\r\n\t                    }\r\n\t                }, false);\r\n\t                return out;\r\n\t            });\r\n\t            */\r\n\t        // We can't use the implementation above, beacuse deregistering\r\n\t        // listeners triggers the exception\r\n\t        // \"send() was invoked before listeners were registered\"\r\n\t        // We can revisit this another time. For now we will use the less\r\n\t        // efficient implementation below.\r\n\t        var me = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () { return me.gate(me.mapTo(false).hold(true)); });\r\n\t    };\r\n\t    Stream.prototype.listen = function (h) {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            return _this.listen_(Vertex_1.Vertex.NULL, h, false);\r\n\t        });\r\n\t    };\r\n\t    Stream.prototype.listen_ = function (target, h, suppressEarlierFirings) {\r\n\t        var _this = this;\r\n\t        if (this.vertex.register(target))\r\n\t            Transaction_1.Transaction.currentTransaction.requestRegen();\r\n\t        var listener = new Listener_1.Listener(h, target);\r\n\t        this.listeners.push(listener);\r\n\t        if (!suppressEarlierFirings && this.firings.length != 0) {\r\n\t            var firings_1 = this.firings.slice();\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(target, function () {\r\n\t                // Anything sent already in this transaction must be sent now so that\r\n\t                // there's no order dependency between send and listen.\r\n\t                for (var i = 0; i < firings_1.length; i++)\r\n\t                    h(firings_1[i]);\r\n\t            });\r\n\t        }\r\n\t        return function () {\r\n\t            var removed = false;\r\n\t            for (var i = 0; i < _this.listeners.length; i++) {\r\n\t                if (_this.listeners[i] == listener) {\r\n\t                    _this.listeners.splice(i, 1);\r\n\t                    removed = true;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (removed)\r\n\t                _this.vertex.deregister(target);\r\n\t        };\r\n\t    };\r\n\t    return Stream;\r\n\t}());\r\n\texports.Stream = Stream;\r\n\tvar StreamWithSend = (function (_super) {\r\n\t    __extends(StreamWithSend, _super);\r\n\t    function StreamWithSend(vertex) {\r\n\t        _super.call(this, vertex);\r\n\t    }\r\n\t    StreamWithSend.prototype.setVertex__ = function (vertex) {\r\n\t        this.vertex = vertex;\r\n\t    };\r\n\t    StreamWithSend.prototype.send_ = function (a) {\r\n\t        var _this = this;\r\n\t        // We throw this error if we send into FRP logic that has been constructed\r\n\t        // but nothing is listening to it yet. We need to do it this way because\r\n\t        // it's the only way to manage memory in a language with no finalizers.\r\n\t        if (this.vertex.refCount() == 0)\r\n\t            throw new Error(\"send() was invoked before listeners were registered\");\r\n\t        if (this.firings.length == 0)\r\n\t            Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t                _this.firings = [];\r\n\t            });\r\n\t        this.firings.push(a);\r\n\t        var listeners = this.listeners.slice();\r\n\t        var _loop_1 = function(i) {\r\n\t            var h = listeners[i].h;\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(listeners[i].target, function () {\r\n\t                Transaction_1.Transaction.currentTransaction.inCallback++;\r\n\t                try {\r\n\t                    h(a);\r\n\t                    Transaction_1.Transaction.currentTransaction.inCallback--;\r\n\t                }\r\n\t                catch (err) {\r\n\t                    Transaction_1.Transaction.currentTransaction.inCallback--;\r\n\t                    throw err;\r\n\t                }\r\n\t            });\r\n\t        };\r\n\t        for (var i = 0; i < listeners.length; i++) {\r\n\t            _loop_1(i);\r\n\t        }\r\n\t    };\r\n\t    return StreamWithSend;\r\n\t}(Stream));\r\n\texports.StreamWithSend = StreamWithSend;\r\n\t/**\r\n\t * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\r\n\t */\r\n\tvar StreamLoop = (function (_super) {\r\n\t    __extends(StreamLoop, _super);\r\n\t    function StreamLoop() {\r\n\t        _super.call(this);\r\n\t        this.assigned__ = false; // to do: Figure out how to hide this\r\n\t        this.vertex.name = \"StreamLoop\";\r\n\t        if (Transaction_1.Transaction.currentTransaction === null)\r\n\t            throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\r\n\t    }\r\n\t    /**\r\n\t     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\r\n\t     * must be invoked inside the same transaction as the place where the StreamLoop is used.\r\n\t     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n\t     * or {@link Transaction#runVoid(Runnable)}.\r\n\t     */\r\n\t    StreamLoop.prototype.loop = function (sa_out) {\r\n\t        var _this = this;\r\n\t        if (this.assigned__)\r\n\t            throw new Error(\"StreamLoop looped more than once\");\r\n\t        this.assigned__ = true;\r\n\t        this.vertex.addSource(new Vertex_1.Source(sa_out.getVertex__(), function () {\r\n\t            return sa_out.listen_(_this.vertex, function (a) {\r\n\t                _this.send_(a);\r\n\t            }, false);\r\n\t        }));\r\n\t    };\r\n\t    return StreamLoop;\r\n\t}(StreamWithSend));\r\n\texports.StreamLoop = StreamLoop;\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar typescript_collections_1 = __webpack_require__(5);\r\n\tvar Entry = (function () {\r\n\t    function Entry(rank, action) {\r\n\t        this.rank = rank;\r\n\t        this.action = action;\r\n\t        this.seq = Entry.nextSeq++;\r\n\t    }\r\n\t    Entry.prototype.toString = function () {\r\n\t        return this.seq.toString();\r\n\t    };\r\n\t    Entry.nextSeq = 0;\r\n\t    return Entry;\r\n\t}());\r\n\texports.Entry = Entry;\r\n\tvar Transaction = (function () {\r\n\t    function Transaction() {\r\n\t        this.inCallback = 0;\r\n\t        this.toRegen = false;\r\n\t        this.prioritizedQ = new typescript_collections_1.PriorityQueue(function (a, b) {\r\n\t            // Note: Low priority numbers are treated as \"greater\" according to this\r\n\t            // comparison, so that the lowest numbers are highest priority and go first.\r\n\t            if (a.rank.rank < b.rank.rank)\r\n\t                return 1;\r\n\t            if (a.rank.rank > b.rank.rank)\r\n\t                return -1;\r\n\t            if (a.seq < b.seq)\r\n\t                return 1;\r\n\t            if (a.seq > b.seq)\r\n\t                return -1;\r\n\t            return 0;\r\n\t        });\r\n\t        this.entries = new typescript_collections_1.Set(function (a) { return a.toString(); });\r\n\t        this.lastQ = [];\r\n\t        this.postQ = null;\r\n\t    }\r\n\t    Transaction.prototype.requestRegen = function () {\r\n\t        this.toRegen = true;\r\n\t    };\r\n\t    Transaction.prototype.prioritized = function (target, f) {\r\n\t        var e = new Entry(target, f);\r\n\t        this.prioritizedQ.enqueue(e);\r\n\t        this.entries.add(e);\r\n\t    };\r\n\t    Transaction.prototype.last = function (h) {\r\n\t        this.lastQ.push(h);\r\n\t    };\r\n\t    /**\r\n\t     * Add an action to run after all last() actions.\r\n\t     */\r\n\t    Transaction.prototype.post = function (childIx, action) {\r\n\t        if (this.postQ == null)\r\n\t            this.postQ = [];\r\n\t        // If an entry exists already, combine the old one with the new one.\r\n\t        while (this.postQ.length <= childIx)\r\n\t            this.postQ.push(null);\r\n\t        var existing = this.postQ[childIx], neu = existing === null ? action\r\n\t            : function () {\r\n\t                existing();\r\n\t                action();\r\n\t            };\r\n\t        this.postQ[childIx] = neu;\r\n\t    };\r\n\t    // If the priority queue has entries in it when we modify any of the nodes'\r\n\t    // ranks, then we need to re-generate it to make sure it's up-to-date.\r\n\t    Transaction.prototype.checkRegen = function () {\r\n\t        if (this.toRegen) {\r\n\t            this.toRegen = false;\r\n\t            this.prioritizedQ.clear();\r\n\t            var es = this.entries.toArray();\r\n\t            for (var i = 0; i < es.length; i++)\r\n\t                this.prioritizedQ.enqueue(es[i]);\r\n\t        }\r\n\t    };\r\n\t    Transaction.prototype.isActive = function () {\r\n\t        return Transaction.currentTransaction ? true : false;\r\n\t    };\r\n\t    Transaction.prototype.close = function () {\r\n\t        while (true) {\r\n\t            this.checkRegen();\r\n\t            if (this.prioritizedQ.isEmpty())\r\n\t                break;\r\n\t            var e = this.prioritizedQ.dequeue();\r\n\t            this.entries.remove(e);\r\n\t            e.action();\r\n\t        }\r\n\t        for (var i = 0; i < this.lastQ.length; i++)\r\n\t            this.lastQ[i]();\r\n\t        this.lastQ = [];\r\n\t        if (this.postQ != null) {\r\n\t            for (var i = 0; i < this.postQ.length; i++) {\r\n\t                if (this.postQ[i] != null) {\r\n\t                    var parent_1 = Transaction.currentTransaction;\r\n\t                    try {\r\n\t                        if (i > 0) {\r\n\t                            Transaction.currentTransaction = new Transaction();\r\n\t                            try {\r\n\t                                this.postQ[i]();\r\n\t                                Transaction.currentTransaction.close();\r\n\t                            }\r\n\t                            catch (err) {\r\n\t                                Transaction.currentTransaction.close();\r\n\t                                throw err;\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            Transaction.currentTransaction = null;\r\n\t                            this.postQ[i]();\r\n\t                        }\r\n\t                        Transaction.currentTransaction = parent_1;\r\n\t                    }\r\n\t                    catch (err) {\r\n\t                        Transaction.currentTransaction = parent_1;\r\n\t                        throw err;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            this.postQ = null;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Add a runnable that will be executed whenever a transaction is started.\r\n\t     * That runnable may start transactions itself, which will not cause the\r\n\t     * hooks to be run recursively.\r\n\t     *\r\n\t     * The main use case of this is the implementation of a time/alarm system.\r\n\t     */\r\n\t    Transaction.onStart = function (r) {\r\n\t        Transaction.onStartHooks.push(r);\r\n\t    };\r\n\t    Transaction.transactionally = function (f) {\r\n\t        var transWas = Transaction.currentTransaction;\r\n\t        if (transWas === null) {\r\n\t            if (!Transaction.runningOnStartHooks) {\r\n\t                Transaction.runningOnStartHooks = true;\r\n\t                try {\r\n\t                    for (var i = 0; i < Transaction.onStartHooks.length; i++)\r\n\t                        Transaction.onStartHooks[i]();\r\n\t                }\r\n\t                finally {\r\n\t                    Transaction.runningOnStartHooks = false;\r\n\t                }\r\n\t            }\r\n\t            Transaction.currentTransaction = new Transaction();\r\n\t        }\r\n\t        try {\r\n\t            var a = f();\r\n\t            if (transWas === null) {\r\n\t                Transaction.currentTransaction.close();\r\n\t                Transaction.currentTransaction = null;\r\n\t            }\r\n\t            return a;\r\n\t        }\r\n\t        catch (err) {\r\n\t            if (transWas === null) {\r\n\t                Transaction.currentTransaction.close();\r\n\t                Transaction.currentTransaction = null;\r\n\t            }\r\n\t            throw err;\r\n\t        }\r\n\t    };\r\n\t    Transaction.currentTransaction = null;\r\n\t    Transaction.onStartHooks = [];\r\n\t    Transaction.runningOnStartHooks = false;\r\n\t    return Transaction;\r\n\t}());\r\n\texports.Transaction = Transaction;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n\t//\n\t// Licensed under MIT open source license http://opensource.org/licenses/MIT\n\t//\n\t// Orginal javascript code was by Mauricio Santos\n\t//\n\tvar _arrays = __webpack_require__(6);\n\texports.arrays = _arrays;\n\tvar Bag_1 = __webpack_require__(8);\n\texports.Bag = Bag_1.default;\n\tvar BSTree_1 = __webpack_require__(11);\n\texports.BSTree = BSTree_1.default;\n\tvar Dictionary_1 = __webpack_require__(9);\n\texports.Dictionary = Dictionary_1.default;\n\tvar Heap_1 = __webpack_require__(14);\n\texports.Heap = Heap_1.default;\n\tvar LinkedDictionary_1 = __webpack_require__(15);\n\texports.LinkedDictionary = LinkedDictionary_1.default;\n\tvar LinkedList_1 = __webpack_require__(13);\n\texports.LinkedList = LinkedList_1.default;\n\tvar MultiDictionary_1 = __webpack_require__(16);\n\texports.MultiDictionary = MultiDictionary_1.default;\n\tvar Queue_1 = __webpack_require__(12);\n\texports.Queue = Queue_1.default;\n\tvar PriorityQueue_1 = __webpack_require__(17);\n\texports.PriorityQueue = PriorityQueue_1.default;\n\tvar Set_1 = __webpack_require__(10);\n\texports.Set = Set_1.default;\n\tvar Stack_1 = __webpack_require__(18);\n\texports.Stack = Stack_1.default;\n\tvar _util = __webpack_require__(7);\n\texports.util = _util;\n\t//# sourceMappingURL=index.js.map\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\t/**\n\t * Returns the position of the first occurrence of the specified item\n\t * within the specified array.4\n\t * @param {*} array the array in which to search the element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between 2 elements.\n\t * @return {number} the position of the first occurrence of the specified element\n\t * within the specified array, or -1 if not found.\n\t */\n\tfunction indexOf(array, item, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    var length = array.length;\n\t    for (var i = 0; i < length; i++) {\n\t        if (equals(array[i], item)) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n\texports.indexOf = indexOf;\n\t/**\n\t * Returns the position of the last occurrence of the specified element\n\t * within the specified array.\n\t * @param {*} array the array in which to search the element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between 2 elements.\n\t * @return {number} the position of the last occurrence of the specified element\n\t * within the specified array or -1 if not found.\n\t */\n\tfunction lastIndexOf(array, item, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    var length = array.length;\n\t    for (var i = length - 1; i >= 0; i--) {\n\t        if (equals(array[i], item)) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n\texports.lastIndexOf = lastIndexOf;\n\t/**\n\t * Returns true if the specified array contains the specified element.\n\t * @param {*} array the array in which to search the element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function to\n\t * check equality between 2 elements.\n\t * @return {boolean} true if the specified array contains the specified element.\n\t */\n\tfunction contains(array, item, equalsFunction) {\n\t    return indexOf(array, item, equalsFunction) >= 0;\n\t}\n\texports.contains = contains;\n\t/**\n\t * Removes the first ocurrence of the specified element from the specified array.\n\t * @param {*} array the array in which to search element.\n\t * @param {Object} item the element to search.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function to\n\t * check equality between 2 elements.\n\t * @return {boolean} true if the array changed after this call.\n\t */\n\tfunction remove(array, item, equalsFunction) {\n\t    var index = indexOf(array, item, equalsFunction);\n\t    if (index < 0) {\n\t        return false;\n\t    }\n\t    array.splice(index, 1);\n\t    return true;\n\t}\n\texports.remove = remove;\n\t/**\n\t * Returns the number of elements in the specified array equal\n\t * to the specified object.\n\t * @param {Array} array the array in which to determine the frequency of the element.\n\t * @param {Object} item the element whose frequency is to be determined.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between 2 elements.\n\t * @return {number} the number of elements in the specified array\n\t * equal to the specified object.\n\t */\n\tfunction frequency(array, item, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    var length = array.length;\n\t    var freq = 0;\n\t    for (var i = 0; i < length; i++) {\n\t        if (equals(array[i], item)) {\n\t            freq++;\n\t        }\n\t    }\n\t    return freq;\n\t}\n\texports.frequency = frequency;\n\t/**\n\t * Returns true if the two specified arrays are equal to one another.\n\t * Two arrays are considered equal if both arrays contain the same number\n\t * of elements, and all corresponding pairs of elements in the two\n\t * arrays are equal and are in the same order.\n\t * @param {Array} array1 one array to be tested for equality.\n\t * @param {Array} array2 the other array to be tested for equality.\n\t * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n\t * check equality between elemements in the arrays.\n\t * @return {boolean} true if the two arrays are equal\n\t */\n\tfunction equals(array1, array2, equalsFunction) {\n\t    var equals = equalsFunction || util.defaultEquals;\n\t    if (array1.length !== array2.length) {\n\t        return false;\n\t    }\n\t    var length = array1.length;\n\t    for (var i = 0; i < length; i++) {\n\t        if (!equals(array1[i], array2[i])) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\texports.equals = equals;\n\t/**\n\t * Returns shallow a copy of the specified array.\n\t * @param {*} array the array to copy.\n\t * @return {Array} a copy of the specified array\n\t */\n\tfunction copy(array) {\n\t    return array.concat();\n\t}\n\texports.copy = copy;\n\t/**\n\t * Swaps the elements at the specified positions in the specified array.\n\t * @param {Array} array The array in which to swap elements.\n\t * @param {number} i the index of one element to be swapped.\n\t * @param {number} j the index of the other element to be swapped.\n\t * @return {boolean} true if the array is defined and the indexes are valid.\n\t */\n\tfunction swap(array, i, j) {\n\t    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n\t        return false;\n\t    }\n\t    var temp = array[i];\n\t    array[i] = array[j];\n\t    array[j] = temp;\n\t    return true;\n\t}\n\texports.swap = swap;\n\tfunction toString(array) {\n\t    return '[' + array.toString() + ']';\n\t}\n\texports.toString = toString;\n\t/**\n\t * Executes the provided function once for each element present in this array\n\t * starting from index 0 to length - 1.\n\t * @param {Array} array The array in which to iterate.\n\t * @param {function(Object):*} callback function to execute, it is\n\t * invoked with one argument: the element value, to break the iteration you can\n\t * optionally return false.\n\t */\n\tfunction forEach(array, callback) {\n\t    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n\t        var ele = array_1[_i];\n\t        if (callback(ele) === false) {\n\t            return;\n\t        }\n\t    }\n\t}\n\texports.forEach = forEach;\n\t//# sourceMappingURL=arrays.js.map\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\texports.has = function (obj, prop) {\n\t    return _hasOwnProperty.call(obj, prop);\n\t};\n\t/**\n\t * Default function to compare element order.\n\t * @function\n\t */\n\tfunction defaultCompare(a, b) {\n\t    if (a < b) {\n\t        return -1;\n\t    }\n\t    else if (a === b) {\n\t        return 0;\n\t    }\n\t    else {\n\t        return 1;\n\t    }\n\t}\n\texports.defaultCompare = defaultCompare;\n\t/**\n\t * Default function to test equality.\n\t * @function\n\t */\n\tfunction defaultEquals(a, b) {\n\t    return a === b;\n\t}\n\texports.defaultEquals = defaultEquals;\n\t/**\n\t * Default function to convert an object to a string.\n\t * @function\n\t */\n\tfunction defaultToString(item) {\n\t    if (item === null) {\n\t        return 'COLLECTION_NULL';\n\t    }\n\t    else if (isUndefined(item)) {\n\t        return 'COLLECTION_UNDEFINED';\n\t    }\n\t    else if (isString(item)) {\n\t        return '$s' + item;\n\t    }\n\t    else {\n\t        return '$o' + item.toString();\n\t    }\n\t}\n\texports.defaultToString = defaultToString;\n\t/**\n\t* Joins all the properies of the object using the provided join string\n\t*/\n\tfunction makeString(item, join) {\n\t    if (join === void 0) { join = ','; }\n\t    if (item === null) {\n\t        return 'COLLECTION_NULL';\n\t    }\n\t    else if (isUndefined(item)) {\n\t        return 'COLLECTION_UNDEFINED';\n\t    }\n\t    else if (isString(item)) {\n\t        return item.toString();\n\t    }\n\t    else {\n\t        var toret = '{';\n\t        var first = true;\n\t        for (var prop in item) {\n\t            if (exports.has(item, prop)) {\n\t                if (first) {\n\t                    first = false;\n\t                }\n\t                else {\n\t                    toret = toret + join;\n\t                }\n\t                toret = toret + prop + ':' + item[prop];\n\t            }\n\t        }\n\t        return toret + '}';\n\t    }\n\t}\n\texports.makeString = makeString;\n\t/**\n\t * Checks if the given argument is a function.\n\t * @function\n\t */\n\tfunction isFunction(func) {\n\t    return (typeof func) === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t/**\n\t * Checks if the given argument is undefined.\n\t * @function\n\t */\n\tfunction isUndefined(obj) {\n\t    return (typeof obj) === 'undefined';\n\t}\n\texports.isUndefined = isUndefined;\n\t/**\n\t * Checks if the given argument is a string.\n\t * @function\n\t */\n\tfunction isString(obj) {\n\t    return Object.prototype.toString.call(obj) === '[object String]';\n\t}\n\texports.isString = isString;\n\t/**\n\t * Reverses a compare function.\n\t * @function\n\t */\n\tfunction reverseCompareFunction(compareFunction) {\n\t    if (!isFunction(compareFunction)) {\n\t        return function (a, b) {\n\t            if (a < b) {\n\t                return 1;\n\t            }\n\t            else if (a === b) {\n\t                return 0;\n\t            }\n\t            else {\n\t                return -1;\n\t            }\n\t        };\n\t    }\n\t    else {\n\t        return function (d, v) {\n\t            return compareFunction(d, v) * -1;\n\t        };\n\t    }\n\t}\n\texports.reverseCompareFunction = reverseCompareFunction;\n\t/**\n\t * Returns an equal function given a compare function.\n\t * @function\n\t */\n\tfunction compareToEquals(compareFunction) {\n\t    return function (a, b) {\n\t        return compareFunction(a, b) === 0;\n\t    };\n\t}\n\texports.compareToEquals = compareToEquals;\n\t//# sourceMappingURL=util.js.map\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar Set_1 = __webpack_require__(10);\n\tvar Bag = (function () {\n\t    /**\n\t     * Creates an empty bag.\n\t     * @class <p>A bag is a special kind of set in which members are\n\t     * allowed to appear more than once.</p>\n\t     * <p>If the inserted elements are custom objects a function\n\t     * which converts elements to unique strings must be provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petToString(pet) {\n\t     *  return pet.name;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * @constructor\n\t     * @param {function(Object):string=} toStrFunction optional function used\n\t     * to convert elements to strings. If the elements aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives an object and returns a\n\t     * unique string must be provided.\n\t     */\n\t    function Bag(toStrFunction) {\n\t        this.toStrF = toStrFunction || util.defaultToString;\n\t        this.dictionary = new Dictionary_1.default(this.toStrF);\n\t        this.nElements = 0;\n\t    }\n\t    /**\n\t    * Adds nCopies of the specified object to this bag.\n\t    * @param {Object} element element to add.\n\t    * @param {number=} nCopies the number of copies to add, if this argument is\n\t    * undefined 1 copy is added.\n\t    * @return {boolean} true unless element is undefined.\n\t    */\n\t    Bag.prototype.add = function (element, nCopies) {\n\t        if (nCopies === void 0) { nCopies = 1; }\n\t        if (util.isUndefined(element) || nCopies <= 0) {\n\t            return false;\n\t        }\n\t        if (!this.contains(element)) {\n\t            var node = {\n\t                value: element,\n\t                copies: nCopies\n\t            };\n\t            this.dictionary.setValue(element, node);\n\t        }\n\t        else {\n\t            this.dictionary.getValue(element).copies += nCopies;\n\t        }\n\t        this.nElements += nCopies;\n\t        return true;\n\t    };\n\t    /**\n\t    * Counts the number of copies of the specified object in this bag.\n\t    * @param {Object} element the object to search for..\n\t    * @return {number} the number of copies of the object, 0 if not found\n\t    */\n\t    Bag.prototype.count = function (element) {\n\t        if (!this.contains(element)) {\n\t            return 0;\n\t        }\n\t        else {\n\t            return this.dictionary.getValue(element).copies;\n\t        }\n\t    };\n\t    /**\n\t     * Returns true if this bag contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this bag contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Bag.prototype.contains = function (element) {\n\t        return this.dictionary.containsKey(element);\n\t    };\n\t    /**\n\t    * Removes nCopies of the specified object to this bag.\n\t    * If the number of copies to remove is greater than the actual number\n\t    * of copies in the Bag, all copies are removed.\n\t    * @param {Object} element element to remove.\n\t    * @param {number=} nCopies the number of copies to remove, if this argument is\n\t    * undefined 1 copy is removed.\n\t    * @return {boolean} true if at least 1 element was removed.\n\t    */\n\t    Bag.prototype.remove = function (element, nCopies) {\n\t        if (nCopies === void 0) { nCopies = 1; }\n\t        if (util.isUndefined(element) || nCopies <= 0) {\n\t            return false;\n\t        }\n\t        if (!this.contains(element)) {\n\t            return false;\n\t        }\n\t        else {\n\t            var node = this.dictionary.getValue(element);\n\t            if (nCopies > node.copies) {\n\t                this.nElements -= node.copies;\n\t            }\n\t            else {\n\t                this.nElements -= nCopies;\n\t            }\n\t            node.copies -= nCopies;\n\t            if (node.copies <= 0) {\n\t                this.dictionary.remove(element);\n\t            }\n\t            return true;\n\t        }\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this big in arbitrary order,\n\t     * including multiple copies.\n\t     * @return {Array} an array containing all of the elements in this bag.\n\t     */\n\t    Bag.prototype.toArray = function () {\n\t        var a = [];\n\t        var values = this.dictionary.values();\n\t        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n\t            var node = values_1[_i];\n\t            var element = node.value;\n\t            var copies = node.copies;\n\t            for (var j = 0; j < copies; j++) {\n\t                a.push(element);\n\t            }\n\t        }\n\t        return a;\n\t    };\n\t    /**\n\t     * Returns a set of unique elements in this bag.\n\t     * @return {collections.Set<T>} a set of unique elements in this bag.\n\t     */\n\t    Bag.prototype.toSet = function () {\n\t        var toret = new Set_1.default(this.toStrF);\n\t        var elements = this.dictionary.values();\n\t        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n\t            var ele = elements_1[_i];\n\t            var value = ele.value;\n\t            toret.add(value);\n\t        }\n\t        return toret;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element\n\t     * present in this bag, including multiple copies.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element. To break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Bag.prototype.forEach = function (callback) {\n\t        this.dictionary.forEach(function (k, v) {\n\t            var value = v.value;\n\t            var copies = v.copies;\n\t            for (var i = 0; i < copies; i++) {\n\t                if (callback(value) === false) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Returns the number of elements in this bag.\n\t     * @return {number} the number of elements in this bag.\n\t     */\n\t    Bag.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this bag contains no elements.\n\t     * @return {boolean} true if this bag contains no elements.\n\t     */\n\t    Bag.prototype.isEmpty = function () {\n\t        return this.nElements === 0;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this bag.\n\t     */\n\t    Bag.prototype.clear = function () {\n\t        this.nElements = 0;\n\t        this.dictionary.clear();\n\t    };\n\t    return Bag;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Bag; // End of bag\n\t//# sourceMappingURL=Bag.js.map\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Dictionary = (function () {\n\t    /**\n\t     * Creates an empty dictionary.\n\t     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n\t     * This implementation accepts any kind of objects as keys.</p>\n\t     *\n\t     * <p>If the keys are custom objects a function which converts keys to unique\n\t     * strings must be provided. Example:</p>\n\t     * <pre>\n\t     * function petToString(pet) {\n\t     *  return pet.name;\n\t     * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object):string=} toStrFunction optional function used\n\t     * to convert keys to strings. If the keys aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives a key and returns a\n\t     * unique string must be provided.\n\t     */\n\t    function Dictionary(toStrFunction) {\n\t        this.table = {};\n\t        this.nElements = 0;\n\t        this.toStr = toStrFunction || util.defaultToString;\n\t    }\n\t    /**\n\t     * Returns the value to which this dictionary maps the specified key.\n\t     * Returns undefined if this dictionary contains no mapping for this key.\n\t     * @param {Object} key key whose associated value is to be returned.\n\t     * @return {*} the value to which this dictionary maps the specified key or\n\t     * undefined if the map contains no mapping for this key.\n\t     */\n\t    Dictionary.prototype.getValue = function (key) {\n\t        var pair = this.table['$' + this.toStr(key)];\n\t        if (util.isUndefined(pair)) {\n\t            return undefined;\n\t        }\n\t        return pair.value;\n\t    };\n\t    /**\n\t     * Associates the specified value with the specified key in this dictionary.\n\t     * If the dictionary previously contained a mapping for this key, the old\n\t     * value is replaced by the specified value.\n\t     * @param {Object} key key with which the specified value is to be\n\t     * associated.\n\t     * @param {Object} value value to be associated with the specified key.\n\t     * @return {*} previous value associated with the specified key, or undefined if\n\t     * there was no mapping for the key or if the key/value are undefined.\n\t     */\n\t    Dictionary.prototype.setValue = function (key, value) {\n\t        if (util.isUndefined(key) || util.isUndefined(value)) {\n\t            return undefined;\n\t        }\n\t        var ret;\n\t        var k = '$' + this.toStr(key);\n\t        var previousElement = this.table[k];\n\t        if (util.isUndefined(previousElement)) {\n\t            this.nElements++;\n\t            ret = undefined;\n\t        }\n\t        else {\n\t            ret = previousElement.value;\n\t        }\n\t        this.table[k] = {\n\t            key: key,\n\t            value: value\n\t        };\n\t        return ret;\n\t    };\n\t    /**\n\t     * Removes the mapping for this key from this dictionary if it is present.\n\t     * @param {Object} key key whose mapping is to be removed from the\n\t     * dictionary.\n\t     * @return {*} previous value associated with specified key, or undefined if\n\t     * there was no mapping for key.\n\t     */\n\t    Dictionary.prototype.remove = function (key) {\n\t        var k = '$' + this.toStr(key);\n\t        var previousElement = this.table[k];\n\t        if (!util.isUndefined(previousElement)) {\n\t            delete this.table[k];\n\t            this.nElements--;\n\t            return previousElement.value;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the keys in this dictionary.\n\t     * @return {Array} an array containing all of the keys in this dictionary.\n\t     */\n\t    Dictionary.prototype.keys = function () {\n\t        var array = [];\n\t        for (var name_1 in this.table) {\n\t            if (util.has(this.table, name_1)) {\n\t                var pair = this.table[name_1];\n\t                array.push(pair.key);\n\t            }\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the values in this dictionary.\n\t     * @return {Array} an array containing all of the values in this dictionary.\n\t     */\n\t    Dictionary.prototype.values = function () {\n\t        var array = [];\n\t        for (var name_2 in this.table) {\n\t            if (util.has(this.table, name_2)) {\n\t                var pair = this.table[name_2];\n\t                array.push(pair.value);\n\t            }\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t    * Executes the provided function once for each key-value pair\n\t    * present in this dictionary.\n\t    * @param {function(Object,Object):*} callback function to execute, it is\n\t    * invoked with two arguments: key and value. To break the iteration you can\n\t    * optionally return false.\n\t    */\n\t    Dictionary.prototype.forEach = function (callback) {\n\t        for (var name_3 in this.table) {\n\t            if (util.has(this.table, name_3)) {\n\t                var pair = this.table[name_3];\n\t                var ret = callback(pair.key, pair.value);\n\t                if (ret === false) {\n\t                    return;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Returns true if this dictionary contains a mapping for the specified key.\n\t     * @param {Object} key key whose presence in this dictionary is to be\n\t     * tested.\n\t     * @return {boolean} true if this dictionary contains a mapping for the\n\t     * specified key.\n\t     */\n\t    Dictionary.prototype.containsKey = function (key) {\n\t        return !util.isUndefined(this.getValue(key));\n\t    };\n\t    /**\n\t    * Removes all mappings from this dictionary.\n\t    * @this {collections.Dictionary}\n\t    */\n\t    Dictionary.prototype.clear = function () {\n\t        this.table = {};\n\t        this.nElements = 0;\n\t    };\n\t    /**\n\t     * Returns the number of keys in this dictionary.\n\t     * @return {number} the number of key-value mappings in this dictionary.\n\t     */\n\t    Dictionary.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this dictionary contains no mappings.\n\t     * @return {boolean} true if this dictionary contains no mappings.\n\t     */\n\t    Dictionary.prototype.isEmpty = function () {\n\t        return this.nElements <= 0;\n\t    };\n\t    Dictionary.prototype.toString = function () {\n\t        var toret = '{';\n\t        this.forEach(function (k, v) {\n\t            toret += \"\\n\\t\" + k + \" : \" + v;\n\t        });\n\t        return toret + '\\n}';\n\t    };\n\t    return Dictionary;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Dictionary; // End of dictionary\n\t//# sourceMappingURL=Dictionary.js.map\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar arrays = __webpack_require__(6);\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar Set = (function () {\n\t    /**\n\t     * Creates an empty set.\n\t     * @class <p>A set is a data structure that contains no duplicate items.</p>\n\t     * <p>If the inserted elements are custom objects a function\n\t     * which converts elements to strings must be provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petToString(pet) {\n\t     *  return pet.name;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * @constructor\n\t     * @param {function(Object):string=} toStringFunction optional function used\n\t     * to convert elements to strings. If the elements aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives a onject and returns a\n\t     * unique string must be provided.\n\t     */\n\t    function Set(toStringFunction) {\n\t        this.dictionary = new Dictionary_1.default(toStringFunction);\n\t    }\n\t    /**\n\t     * Returns true if this set contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this set contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Set.prototype.contains = function (element) {\n\t        return this.dictionary.containsKey(element);\n\t    };\n\t    /**\n\t     * Adds the specified element to this set if it is not already present.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if this set did not already contain the specified element.\n\t     */\n\t    Set.prototype.add = function (element) {\n\t        if (this.contains(element) || util.isUndefined(element)) {\n\t            return false;\n\t        }\n\t        else {\n\t            this.dictionary.setValue(element, element);\n\t            return true;\n\t        }\n\t    };\n\t    /**\n\t     * Performs an intersecion between this an another set.\n\t     * Removes all values that are not present this set and the given set.\n\t     * @param {collections.Set} otherSet other set.\n\t     */\n\t    Set.prototype.intersection = function (otherSet) {\n\t        var set = this;\n\t        this.forEach(function (element) {\n\t            if (!otherSet.contains(element)) {\n\t                set.remove(element);\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Performs a union between this an another set.\n\t     * Adds all values from the given set to this set.\n\t     * @param {collections.Set} otherSet other set.\n\t     */\n\t    Set.prototype.union = function (otherSet) {\n\t        var set = this;\n\t        otherSet.forEach(function (element) {\n\t            set.add(element);\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Performs a difference between this an another set.\n\t     * Removes from this set all the values that are present in the given set.\n\t     * @param {collections.Set} otherSet other set.\n\t     */\n\t    Set.prototype.difference = function (otherSet) {\n\t        var set = this;\n\t        otherSet.forEach(function (element) {\n\t            set.remove(element);\n\t            return true;\n\t        });\n\t    };\n\t    /**\n\t     * Checks whether the given set contains all the elements in this set.\n\t     * @param {collections.Set} otherSet other set.\n\t     * @return {boolean} true if this set is a subset of the given set.\n\t     */\n\t    Set.prototype.isSubsetOf = function (otherSet) {\n\t        if (this.size() > otherSet.size()) {\n\t            return false;\n\t        }\n\t        var isSub = true;\n\t        this.forEach(function (element) {\n\t            if (!otherSet.contains(element)) {\n\t                isSub = false;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t        return isSub;\n\t    };\n\t    /**\n\t     * Removes the specified element from this set if it is present.\n\t     * @return {boolean} true if this set contained the specified element.\n\t     */\n\t    Set.prototype.remove = function (element) {\n\t        if (!this.contains(element)) {\n\t            return false;\n\t        }\n\t        else {\n\t            this.dictionary.remove(element);\n\t            return true;\n\t        }\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element\n\t     * present in this set.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one arguments: the element. To break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Set.prototype.forEach = function (callback) {\n\t        this.dictionary.forEach(function (k, v) {\n\t            return callback(v);\n\t        });\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this set in arbitrary order.\n\t     * @return {Array} an array containing all of the elements in this set.\n\t     */\n\t    Set.prototype.toArray = function () {\n\t        return this.dictionary.values();\n\t    };\n\t    /**\n\t     * Returns true if this set contains no elements.\n\t     * @return {boolean} true if this set contains no elements.\n\t     */\n\t    Set.prototype.isEmpty = function () {\n\t        return this.dictionary.isEmpty();\n\t    };\n\t    /**\n\t     * Returns the number of elements in this set.\n\t     * @return {number} the number of elements in this set.\n\t     */\n\t    Set.prototype.size = function () {\n\t        return this.dictionary.size();\n\t    };\n\t    /**\n\t     * Removes all of the elements from this set.\n\t     */\n\t    Set.prototype.clear = function () {\n\t        this.dictionary.clear();\n\t    };\n\t    /*\n\t    * Provides a string representation for display\n\t    */\n\t    Set.prototype.toString = function () {\n\t        return arrays.toString(this.toArray());\n\t    };\n\t    return Set;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Set; // end of Set\n\t//# sourceMappingURL=Set.js.map\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Queue_1 = __webpack_require__(12);\n\tvar BSTree = (function () {\n\t    /**\n\t     * Creates an empty binary search tree.\n\t     * @class <p>A binary search tree is a binary tree in which each\n\t     * internal node stores an element such that the elements stored in the\n\t     * left subtree are less than it and the elements\n\t     * stored in the right subtree are greater.</p>\n\t     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n\t     * has the following properties:</p>\n\t     * <ul>\n\t     * <li>The left subtree of a node contains only nodes with elements less\n\t     * than the node's element</li>\n\t     * <li>The right subtree of a node contains only nodes with elements greater\n\t     * than the node's element</li>\n\t     * <li>Both the left and right subtrees must also be binary search trees.</li>\n\t     * </ul>\n\t     * <p>If the inserted elements are custom objects a compare function must\n\t     * be provided at construction time, otherwise the <=, === and >= operators are\n\t     * used to compare elements. Example:</p>\n\t     * <pre>\n\t     * function compare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return -1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return 1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object,Object):number=} compareFunction optional\n\t     * function used to compare two elements. Must return a negative integer,\n\t     * zero, or a positive integer as the first argument is less than, equal to,\n\t     * or greater than the second.\n\t     */\n\t    function BSTree(compareFunction) {\n\t        this.root = null;\n\t        this.compare = compareFunction || util.defaultCompare;\n\t        this.nElements = 0;\n\t    }\n\t    /**\n\t     * Adds the specified element to this tree if it is not already present.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if this tree did not already contain the specified element.\n\t     */\n\t    BSTree.prototype.add = function (element) {\n\t        if (util.isUndefined(element)) {\n\t            return false;\n\t        }\n\t        if (this.insertNode(this.createNode(element)) !== null) {\n\t            this.nElements++;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this tree.\n\t     */\n\t    BSTree.prototype.clear = function () {\n\t        this.root = null;\n\t        this.nElements = 0;\n\t    };\n\t    /**\n\t     * Returns true if this tree contains no elements.\n\t     * @return {boolean} true if this tree contains no elements.\n\t     */\n\t    BSTree.prototype.isEmpty = function () {\n\t        return this.nElements === 0;\n\t    };\n\t    /**\n\t     * Returns the number of elements in this tree.\n\t     * @return {number} the number of elements in this tree.\n\t     */\n\t    BSTree.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this tree contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this tree contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    BSTree.prototype.contains = function (element) {\n\t        if (util.isUndefined(element)) {\n\t            return false;\n\t        }\n\t        return this.searchNode(this.root, element) !== null;\n\t    };\n\t    /**\n\t     * Removes the specified element from this tree if it is present.\n\t     * @return {boolean} true if this tree contained the specified element.\n\t     */\n\t    BSTree.prototype.remove = function (element) {\n\t        var node = this.searchNode(this.root, element);\n\t        if (node === null) {\n\t            return false;\n\t        }\n\t        this.removeNode(node);\n\t        this.nElements--;\n\t        return true;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in\n\t     * in-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.inorderTraversal = function (callback) {\n\t        this.inorderTraversalAux(this.root, callback, {\n\t            stop: false\n\t        });\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in pre-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.preorderTraversal = function (callback) {\n\t        this.preorderTraversalAux(this.root, callback, {\n\t            stop: false\n\t        });\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in post-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.postorderTraversal = function (callback) {\n\t        this.postorderTraversalAux(this.root, callback, {\n\t            stop: false\n\t        });\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in\n\t     * level-order.\n\t     * @param {function(Object):*} callback function to execute, it is invoked with one\n\t     * argument: the element value, to break the iteration you can optionally return false.\n\t     */\n\t    BSTree.prototype.levelTraversal = function (callback) {\n\t        this.levelTraversalAux(this.root, callback);\n\t    };\n\t    /**\n\t     * Returns the minimum element of this tree.\n\t     * @return {*} the minimum element of this tree or undefined if this tree is\n\t     * is empty.\n\t     */\n\t    BSTree.prototype.minimum = function () {\n\t        if (this.isEmpty()) {\n\t            return undefined;\n\t        }\n\t        return this.minimumAux(this.root).element;\n\t    };\n\t    /**\n\t     * Returns the maximum element of this tree.\n\t     * @return {*} the maximum element of this tree or undefined if this tree is\n\t     * is empty.\n\t     */\n\t    BSTree.prototype.maximum = function () {\n\t        if (this.isEmpty()) {\n\t            return undefined;\n\t        }\n\t        return this.maximumAux(this.root).element;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this tree in inorder.\n\t     * Equivalent to inorderTraversal.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    BSTree.prototype.forEach = function (callback) {\n\t        this.inorderTraversal(callback);\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this tree in in-order.\n\t     * @return {Array} an array containing all of the elements in this tree in in-order.\n\t     */\n\t    BSTree.prototype.toArray = function () {\n\t        var array = [];\n\t        this.inorderTraversal(function (element) {\n\t            array.push(element);\n\t            return true;\n\t        });\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns the height of this tree.\n\t     * @return {number} the height of this tree or -1 if is empty.\n\t     */\n\t    BSTree.prototype.height = function () {\n\t        return this.heightAux(this.root);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.searchNode = function (node, element) {\n\t        var cmp = null;\n\t        while (node !== null && cmp !== 0) {\n\t            cmp = this.compare(element, node.element);\n\t            if (cmp < 0) {\n\t                node = node.leftCh;\n\t            }\n\t            else if (cmp > 0) {\n\t                node = node.rightCh;\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.transplant = function (n1, n2) {\n\t        if (n1.parent === null) {\n\t            this.root = n2;\n\t        }\n\t        else if (n1 === n1.parent.leftCh) {\n\t            n1.parent.leftCh = n2;\n\t        }\n\t        else {\n\t            n1.parent.rightCh = n2;\n\t        }\n\t        if (n2 !== null) {\n\t            n2.parent = n1.parent;\n\t        }\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.removeNode = function (node) {\n\t        if (node.leftCh === null) {\n\t            this.transplant(node, node.rightCh);\n\t        }\n\t        else if (node.rightCh === null) {\n\t            this.transplant(node, node.leftCh);\n\t        }\n\t        else {\n\t            var y = this.minimumAux(node.rightCh);\n\t            if (y.parent !== node) {\n\t                this.transplant(y, y.rightCh);\n\t                y.rightCh = node.rightCh;\n\t                y.rightCh.parent = y;\n\t            }\n\t            this.transplant(node, y);\n\t            y.leftCh = node.leftCh;\n\t            y.leftCh.parent = y;\n\t        }\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {\n\t        if (node === null || signal.stop) {\n\t            return;\n\t        }\n\t        this.inorderTraversalAux(node.leftCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        signal.stop = callback(node.element) === false;\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.inorderTraversalAux(node.rightCh, callback, signal);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.levelTraversalAux = function (node, callback) {\n\t        var queue = new Queue_1.default();\n\t        if (node !== null) {\n\t            queue.enqueue(node);\n\t        }\n\t        while (!queue.isEmpty()) {\n\t            node = queue.dequeue();\n\t            if (callback(node.element) === false) {\n\t                return;\n\t            }\n\t            if (node.leftCh !== null) {\n\t                queue.enqueue(node.leftCh);\n\t            }\n\t            if (node.rightCh !== null) {\n\t                queue.enqueue(node.rightCh);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {\n\t        if (node === null || signal.stop) {\n\t            return;\n\t        }\n\t        signal.stop = callback(node.element) === false;\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.preorderTraversalAux(node.leftCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.preorderTraversalAux(node.rightCh, callback, signal);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {\n\t        if (node === null || signal.stop) {\n\t            return;\n\t        }\n\t        this.postorderTraversalAux(node.leftCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        this.postorderTraversalAux(node.rightCh, callback, signal);\n\t        if (signal.stop) {\n\t            return;\n\t        }\n\t        signal.stop = callback(node.element) === false;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.minimumAux = function (node) {\n\t        while (node.leftCh !== null) {\n\t            node = node.leftCh;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.maximumAux = function (node) {\n\t        while (node.rightCh !== null) {\n\t            node = node.rightCh;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t      * @private\n\t      */\n\t    BSTree.prototype.heightAux = function (node) {\n\t        if (node === null) {\n\t            return -1;\n\t        }\n\t        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n\t    };\n\t    /*\n\t    * @private\n\t    */\n\t    BSTree.prototype.insertNode = function (node) {\n\t        var parent = null;\n\t        var position = this.root;\n\t        var cmp = null;\n\t        while (position !== null) {\n\t            cmp = this.compare(node.element, position.element);\n\t            if (cmp === 0) {\n\t                return null;\n\t            }\n\t            else if (cmp < 0) {\n\t                parent = position;\n\t                position = position.leftCh;\n\t            }\n\t            else {\n\t                parent = position;\n\t                position = position.rightCh;\n\t            }\n\t        }\n\t        node.parent = parent;\n\t        if (parent === null) {\n\t            // tree is empty\n\t            this.root = node;\n\t        }\n\t        else if (this.compare(node.element, parent.element) < 0) {\n\t            parent.leftCh = node;\n\t        }\n\t        else {\n\t            parent.rightCh = node;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    BSTree.prototype.createNode = function (element) {\n\t        return {\n\t            element: element,\n\t            leftCh: null,\n\t            rightCh: null,\n\t            parent: null\n\t        };\n\t    };\n\t    return BSTree;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = BSTree;\n\t//# sourceMappingURL=BSTree.js.map\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar LinkedList_1 = __webpack_require__(13);\n\tvar Queue = (function () {\n\t    /**\n\t     * Creates an empty queue.\n\t     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n\t     * element added to the queue will be the first one to be removed. This\n\t     * implementation uses a linked list as a container.\n\t     * @constructor\n\t     */\n\t    function Queue() {\n\t        this.list = new LinkedList_1.default();\n\t    }\n\t    /**\n\t     * Inserts the specified element into the end of this queue.\n\t     * @param {Object} elem the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    Queue.prototype.enqueue = function (elem) {\n\t        return this.list.add(elem);\n\t    };\n\t    /**\n\t     * Inserts the specified element into the end of this queue.\n\t     * @param {Object} elem the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    Queue.prototype.add = function (elem) {\n\t        return this.list.add(elem);\n\t    };\n\t    /**\n\t     * Retrieves and removes the head of this queue.\n\t     * @return {*} the head of this queue, or undefined if this queue is empty.\n\t     */\n\t    Queue.prototype.dequeue = function () {\n\t        if (this.list.size() !== 0) {\n\t            var el = this.list.first();\n\t            this.list.removeElementAtIndex(0);\n\t            return el;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Retrieves, but does not remove, the head of this queue.\n\t     * @return {*} the head of this queue, or undefined if this queue is empty.\n\t     */\n\t    Queue.prototype.peek = function () {\n\t        if (this.list.size() !== 0) {\n\t            return this.list.first();\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns the number of elements in this queue.\n\t     * @return {number} the number of elements in this queue.\n\t     */\n\t    Queue.prototype.size = function () {\n\t        return this.list.size();\n\t    };\n\t    /**\n\t     * Returns true if this queue contains the specified element.\n\t     * <p>If the elements inside this stack are\n\t     * not comparable with the === operator, a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName (pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} elem element to search for.\n\t     * @param {function(Object,Object):boolean=} equalsFunction optional\n\t     * function to check if two elements are equal.\n\t     * @return {boolean} true if this queue contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Queue.prototype.contains = function (elem, equalsFunction) {\n\t        return this.list.contains(elem, equalsFunction);\n\t    };\n\t    /**\n\t     * Checks if this queue is empty.\n\t     * @return {boolean} true if and only if this queue contains no items; false\n\t     * otherwise.\n\t     */\n\t    Queue.prototype.isEmpty = function () {\n\t        return this.list.size() <= 0;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this queue.\n\t     */\n\t    Queue.prototype.clear = function () {\n\t        this.list.clear();\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this queue in\n\t     * FIFO order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Queue.prototype.forEach = function (callback) {\n\t        this.list.forEach(callback);\n\t    };\n\t    return Queue;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Queue; // End of queue\n\t//# sourceMappingURL=Queue.js.map\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar arrays = __webpack_require__(6);\n\tvar LinkedList = (function () {\n\t    /**\n\t    * Creates an empty Linked List.\n\t    * @class A linked list is a data structure consisting of a group of nodes\n\t    * which together represent a sequence.\n\t    * @constructor\n\t    */\n\t    function LinkedList() {\n\t        /**\n\t        * First node in the list\n\t        * @type {Object}\n\t        * @private\n\t        */\n\t        this.firstNode = null;\n\t        /**\n\t        * Last node in the list\n\t        * @type {Object}\n\t        * @private\n\t        */\n\t        this.lastNode = null;\n\t        /**\n\t        * Number of elements in the list\n\t        * @type {number}\n\t        * @private\n\t        */\n\t        this.nElements = 0;\n\t    }\n\t    /**\n\t    * Adds an element to this list.\n\t    * @param {Object} item element to be added.\n\t    * @param {number=} index optional index to add the element. If no index is specified\n\t    * the element is added to the end of this list.\n\t    * @return {boolean} true if the element was added or false if the index is invalid\n\t    * or if the element is undefined.\n\t    */\n\t    LinkedList.prototype.add = function (item, index) {\n\t        if (util.isUndefined(index)) {\n\t            index = this.nElements;\n\t        }\n\t        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n\t            return false;\n\t        }\n\t        var newNode = this.createNode(item);\n\t        if (this.nElements === 0) {\n\t            // First node in the list.\n\t            this.firstNode = newNode;\n\t            this.lastNode = newNode;\n\t        }\n\t        else if (index === this.nElements) {\n\t            // Insert at the end.\n\t            this.lastNode.next = newNode;\n\t            this.lastNode = newNode;\n\t        }\n\t        else if (index === 0) {\n\t            // Change first node.\n\t            newNode.next = this.firstNode;\n\t            this.firstNode = newNode;\n\t        }\n\t        else {\n\t            var prev = this.nodeAtIndex(index - 1);\n\t            newNode.next = prev.next;\n\t            prev.next = newNode;\n\t        }\n\t        this.nElements++;\n\t        return true;\n\t    };\n\t    /**\n\t    * Returns the first element in this list.\n\t    * @return {*} the first element of the list or undefined if the list is\n\t    * empty.\n\t    */\n\t    LinkedList.prototype.first = function () {\n\t        if (this.firstNode !== null) {\n\t            return this.firstNode.element;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t    * Returns the last element in this list.\n\t    * @return {*} the last element in the list or undefined if the list is\n\t    * empty.\n\t    */\n\t    LinkedList.prototype.last = function () {\n\t        if (this.lastNode !== null) {\n\t            return this.lastNode.element;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns the element at the specified position in this list.\n\t     * @param {number} index desired index.\n\t     * @return {*} the element at the given index or undefined if the index is\n\t     * out of bounds.\n\t     */\n\t    LinkedList.prototype.elementAtIndex = function (index) {\n\t        var node = this.nodeAtIndex(index);\n\t        if (node === null) {\n\t            return undefined;\n\t        }\n\t        return node.element;\n\t    };\n\t    /**\n\t     * Returns the index in this list of the first occurrence of the\n\t     * specified element, or -1 if the List does not contain this element.\n\t     * <p>If the elements inside this list are\n\t     * not comparable with the === operator a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName = function(pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} item element to search for.\n\t     * @param {function(Object,Object):boolean=} equalsFunction Optional\n\t     * function used to check if two elements are equal.\n\t     * @return {number} the index in this list of the first occurrence\n\t     * of the specified element, or -1 if this list does not contain the\n\t     * element.\n\t     */\n\t    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n\t        var equalsF = equalsFunction || util.defaultEquals;\n\t        if (util.isUndefined(item)) {\n\t            return -1;\n\t        }\n\t        var currentNode = this.firstNode;\n\t        var index = 0;\n\t        while (currentNode !== null) {\n\t            if (equalsF(currentNode.element, item)) {\n\t                return index;\n\t            }\n\t            index++;\n\t            currentNode = currentNode.next;\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t       * Returns true if this list contains the specified element.\n\t       * <p>If the elements inside the list are\n\t       * not comparable with the === operator a custom equals function should be\n\t       * provided to perform searches, the function must receive two arguments and\n\t       * return true if they are equal, false otherwise. Example:</p>\n\t       *\n\t       * <pre>\n\t       * const petsAreEqualByName = function(pet1, pet2) {\n\t       *  return pet1.name === pet2.name;\n\t       * }\n\t       * </pre>\n\t       * @param {Object} item element to search for.\n\t       * @param {function(Object,Object):boolean=} equalsFunction Optional\n\t       * function used to check if two elements are equal.\n\t       * @return {boolean} true if this list contains the specified element, false\n\t       * otherwise.\n\t       */\n\t    LinkedList.prototype.contains = function (item, equalsFunction) {\n\t        return (this.indexOf(item, equalsFunction) >= 0);\n\t    };\n\t    /**\n\t     * Removes the first occurrence of the specified element in this list.\n\t     * <p>If the elements inside the list are\n\t     * not comparable with the === operator a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName = function(pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} item element to be removed from this list, if present.\n\t     * @return {boolean} true if the list contained the specified element.\n\t     */\n\t    LinkedList.prototype.remove = function (item, equalsFunction) {\n\t        var equalsF = equalsFunction || util.defaultEquals;\n\t        if (this.nElements < 1 || util.isUndefined(item)) {\n\t            return false;\n\t        }\n\t        var previous = null;\n\t        var currentNode = this.firstNode;\n\t        while (currentNode !== null) {\n\t            if (equalsF(currentNode.element, item)) {\n\t                if (currentNode === this.firstNode) {\n\t                    this.firstNode = this.firstNode.next;\n\t                    if (currentNode === this.lastNode) {\n\t                        this.lastNode = null;\n\t                    }\n\t                }\n\t                else if (currentNode === this.lastNode) {\n\t                    this.lastNode = previous;\n\t                    previous.next = currentNode.next;\n\t                    currentNode.next = null;\n\t                }\n\t                else {\n\t                    previous.next = currentNode.next;\n\t                    currentNode.next = null;\n\t                }\n\t                this.nElements--;\n\t                return true;\n\t            }\n\t            previous = currentNode;\n\t            currentNode = currentNode.next;\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this list.\n\t     */\n\t    LinkedList.prototype.clear = function () {\n\t        this.firstNode = null;\n\t        this.lastNode = null;\n\t        this.nElements = 0;\n\t    };\n\t    /**\n\t     * Returns true if this list is equal to the given list.\n\t     * Two lists are equal if they have the same elements in the same order.\n\t     * @param {LinkedList} other the other list.\n\t     * @param {function(Object,Object):boolean=} equalsFunction optional\n\t     * function used to check if two elements are equal. If the elements in the lists\n\t     * are custom objects you should provide a function, otherwise\n\t     * the === operator is used to check equality between elements.\n\t     * @return {boolean} true if this list is equal to the given list.\n\t     */\n\t    LinkedList.prototype.equals = function (other, equalsFunction) {\n\t        var eqF = equalsFunction || util.defaultEquals;\n\t        if (!(other instanceof LinkedList)) {\n\t            return false;\n\t        }\n\t        if (this.size() !== other.size()) {\n\t            return false;\n\t        }\n\t        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n\t    };\n\t    /**\n\t    * @private\n\t    */\n\t    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n\t        while (n1 !== null) {\n\t            if (!eqF(n1.element, n2.element)) {\n\t                return false;\n\t            }\n\t            n1 = n1.next;\n\t            n2 = n2.next;\n\t        }\n\t        return true;\n\t    };\n\t    /**\n\t     * Removes the element at the specified position in this list.\n\t     * @param {number} index given index.\n\t     * @return {*} removed element or undefined if the index is out of bounds.\n\t     */\n\t    LinkedList.prototype.removeElementAtIndex = function (index) {\n\t        if (index < 0 || index >= this.nElements) {\n\t            return undefined;\n\t        }\n\t        var element;\n\t        if (this.nElements === 1) {\n\t            //First node in the list.\n\t            element = this.firstNode.element;\n\t            this.firstNode = null;\n\t            this.lastNode = null;\n\t        }\n\t        else {\n\t            var previous = this.nodeAtIndex(index - 1);\n\t            if (previous === null) {\n\t                element = this.firstNode.element;\n\t                this.firstNode = this.firstNode.next;\n\t            }\n\t            else if (previous.next === this.lastNode) {\n\t                element = this.lastNode.element;\n\t                this.lastNode = previous;\n\t            }\n\t            if (previous !== null) {\n\t                element = previous.next.element;\n\t                previous.next = previous.next.next;\n\t            }\n\t        }\n\t        this.nElements--;\n\t        return element;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this list in order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    LinkedList.prototype.forEach = function (callback) {\n\t        var currentNode = this.firstNode;\n\t        while (currentNode !== null) {\n\t            if (callback(currentNode.element) === false) {\n\t                break;\n\t            }\n\t            currentNode = currentNode.next;\n\t        }\n\t    };\n\t    /**\n\t     * Reverses the order of the elements in this linked list (makes the last\n\t     * element first, and the first element last).\n\t     */\n\t    LinkedList.prototype.reverse = function () {\n\t        var previous = null;\n\t        var current = this.firstNode;\n\t        var temp = null;\n\t        while (current !== null) {\n\t            temp = current.next;\n\t            current.next = previous;\n\t            previous = current;\n\t            current = temp;\n\t        }\n\t        temp = this.firstNode;\n\t        this.firstNode = this.lastNode;\n\t        this.lastNode = temp;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the elements in this list in proper\n\t     * sequence.\n\t     * @return {Array.<*>} an array containing all of the elements in this list,\n\t     * in proper sequence.\n\t     */\n\t    LinkedList.prototype.toArray = function () {\n\t        var array = [];\n\t        var currentNode = this.firstNode;\n\t        while (currentNode !== null) {\n\t            array.push(currentNode.element);\n\t            currentNode = currentNode.next;\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns the number of elements in this list.\n\t     * @return {number} the number of elements in this list.\n\t     */\n\t    LinkedList.prototype.size = function () {\n\t        return this.nElements;\n\t    };\n\t    /**\n\t     * Returns true if this list contains no elements.\n\t     * @return {boolean} true if this list contains no elements.\n\t     */\n\t    LinkedList.prototype.isEmpty = function () {\n\t        return this.nElements <= 0;\n\t    };\n\t    LinkedList.prototype.toString = function () {\n\t        return arrays.toString(this.toArray());\n\t    };\n\t    /**\n\t     * @private\n\t     */\n\t    LinkedList.prototype.nodeAtIndex = function (index) {\n\t        if (index < 0 || index >= this.nElements) {\n\t            return null;\n\t        }\n\t        if (index === (this.nElements - 1)) {\n\t            return this.lastNode;\n\t        }\n\t        var node = this.firstNode;\n\t        for (var i = 0; i < index; i++) {\n\t            node = node.next;\n\t        }\n\t        return node;\n\t    };\n\t    /**\n\t     * @private\n\t     */\n\t    LinkedList.prototype.createNode = function (item) {\n\t        return {\n\t            element: item,\n\t            next: null\n\t        };\n\t    };\n\t    return LinkedList;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = LinkedList; // End of linked list\n\t//# sourceMappingURL=LinkedList.js.map\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar collections = __webpack_require__(7);\n\tvar arrays = __webpack_require__(6);\n\tvar Heap = (function () {\n\t    /**\n\t     * Creates an empty Heap.\n\t     * @class\n\t     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n\t     * each node is smaller than each of its children and therefore a MinHeap\n\t     * This implementation uses an array to store elements.</p>\n\t     * <p>If the inserted elements are custom objects a compare function must be provided,\n\t     *  at construction time, otherwise the <=, === and >= operators are\n\t     * used to compare elements. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function compare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return -1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return 1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n\t     * reverse compare function to accomplish that behavior. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function reverseCompare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return 1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return -1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     *\n\t     * @constructor\n\t     * @param {function(Object,Object):number=} compareFunction optional\n\t     * function used to compare two elements. Must return a negative integer,\n\t     * zero, or a positive integer as the first argument is less than, equal to,\n\t     * or greater than the second.\n\t     */\n\t    function Heap(compareFunction) {\n\t        /**\n\t         * Array used to store the elements od the heap.\n\t         * @type {Array.<Object>}\n\t         * @private\n\t         */\n\t        this.data = [];\n\t        this.compare = compareFunction || collections.defaultCompare;\n\t    }\n\t    /**\n\t     * Returns the index of the left child of the node at the given index.\n\t     * @param {number} nodeIndex The index of the node to get the left child\n\t     * for.\n\t     * @return {number} The index of the left child.\n\t     * @private\n\t     */\n\t    Heap.prototype.leftChildIndex = function (nodeIndex) {\n\t        return (2 * nodeIndex) + 1;\n\t    };\n\t    /**\n\t     * Returns the index of the right child of the node at the given index.\n\t     * @param {number} nodeIndex The index of the node to get the right child\n\t     * for.\n\t     * @return {number} The index of the right child.\n\t     * @private\n\t     */\n\t    Heap.prototype.rightChildIndex = function (nodeIndex) {\n\t        return (2 * nodeIndex) + 2;\n\t    };\n\t    /**\n\t     * Returns the index of the parent of the node at the given index.\n\t     * @param {number} nodeIndex The index of the node to get the parent for.\n\t     * @return {number} The index of the parent.\n\t     * @private\n\t     */\n\t    Heap.prototype.parentIndex = function (nodeIndex) {\n\t        return Math.floor((nodeIndex - 1) / 2);\n\t    };\n\t    /**\n\t     * Returns the index of the smaller child node (if it exists).\n\t     * @param {number} leftChild left child index.\n\t     * @param {number} rightChild right child index.\n\t     * @return {number} the index with the minimum value or -1 if it doesn't\n\t     * exists.\n\t     * @private\n\t     */\n\t    Heap.prototype.minIndex = function (leftChild, rightChild) {\n\t        if (rightChild >= this.data.length) {\n\t            if (leftChild >= this.data.length) {\n\t                return -1;\n\t            }\n\t            else {\n\t                return leftChild;\n\t            }\n\t        }\n\t        else {\n\t            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n\t                return leftChild;\n\t            }\n\t            else {\n\t                return rightChild;\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Moves the node at the given index up to its proper place in the heap.\n\t     * @param {number} index The index of the node to move up.\n\t     * @private\n\t     */\n\t    Heap.prototype.siftUp = function (index) {\n\t        var parent = this.parentIndex(index);\n\t        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n\t            arrays.swap(this.data, parent, index);\n\t            index = parent;\n\t            parent = this.parentIndex(index);\n\t        }\n\t    };\n\t    /**\n\t     * Moves the node at the given index down to its proper place in the heap.\n\t     * @param {number} nodeIndex The index of the node to move down.\n\t     * @private\n\t     */\n\t    Heap.prototype.siftDown = function (nodeIndex) {\n\t        //smaller child index\n\t        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n\t        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n\t            arrays.swap(this.data, min, nodeIndex);\n\t            nodeIndex = min;\n\t            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n\t        }\n\t    };\n\t    /**\n\t     * Retrieves but does not remove the root element of this heap.\n\t     * @return {*} The value at the root of the heap. Returns undefined if the\n\t     * heap is empty.\n\t     */\n\t    Heap.prototype.peek = function () {\n\t        if (this.data.length > 0) {\n\t            return this.data[0];\n\t        }\n\t        else {\n\t            return undefined;\n\t        }\n\t    };\n\t    /**\n\t     * Adds the given element into the heap.\n\t     * @param {*} element the element.\n\t     * @return true if the element was added or fals if it is undefined.\n\t     */\n\t    Heap.prototype.add = function (element) {\n\t        if (collections.isUndefined(element)) {\n\t            return undefined;\n\t        }\n\t        this.data.push(element);\n\t        this.siftUp(this.data.length - 1);\n\t        return true;\n\t    };\n\t    /**\n\t     * Retrieves and removes the root element of this heap.\n\t     * @return {*} The value removed from the root of the heap. Returns\n\t     * undefined if the heap is empty.\n\t     */\n\t    Heap.prototype.removeRoot = function () {\n\t        if (this.data.length > 0) {\n\t            var obj = this.data[0];\n\t            this.data[0] = this.data[this.data.length - 1];\n\t            this.data.splice(this.data.length - 1, 1);\n\t            if (this.data.length > 0) {\n\t                this.siftDown(0);\n\t            }\n\t            return obj;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Returns true if this heap contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this Heap contains the specified element, false\n\t     * otherwise.\n\t     */\n\t    Heap.prototype.contains = function (element) {\n\t        var equF = collections.compareToEquals(this.compare);\n\t        return arrays.contains(this.data, element, equF);\n\t    };\n\t    /**\n\t     * Returns the number of elements in this heap.\n\t     * @return {number} the number of elements in this heap.\n\t     */\n\t    Heap.prototype.size = function () {\n\t        return this.data.length;\n\t    };\n\t    /**\n\t     * Checks if this heap is empty.\n\t     * @return {boolean} true if and only if this heap contains no items; false\n\t     * otherwise.\n\t     */\n\t    Heap.prototype.isEmpty = function () {\n\t        return this.data.length <= 0;\n\t    };\n\t    /**\n\t     * Removes all of the elements from this heap.\n\t     */\n\t    Heap.prototype.clear = function () {\n\t        this.data.length = 0;\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this heap in\n\t     * no particular order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Heap.prototype.forEach = function (callback) {\n\t        arrays.forEach(this.data, callback);\n\t    };\n\t    return Heap;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Heap;\n\t//# sourceMappingURL=Heap.js.map\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar util = __webpack_require__(7);\n\t/**\n\t * This class is used by the LinkedDictionary Internally\n\t * Has to be a class, not an interface, because it needs to have\n\t * the 'unlink' function defined.\n\t */\n\tvar LinkedDictionaryPair = (function () {\n\t    function LinkedDictionaryPair(key, value) {\n\t        this.key = key;\n\t        this.value = value;\n\t    }\n\t    LinkedDictionaryPair.prototype.unlink = function () {\n\t        this.prev.next = this.next;\n\t        this.next.prev = this.prev;\n\t    };\n\t    return LinkedDictionaryPair;\n\t}());\n\tvar LinkedDictionary = (function (_super) {\n\t    __extends(LinkedDictionary, _super);\n\t    function LinkedDictionary(toStrFunction) {\n\t        _super.call(this, toStrFunction);\n\t        this.head = new LinkedDictionaryPair(null, null);\n\t        this.tail = new LinkedDictionaryPair(null, null);\n\t        this.head.next = this.tail;\n\t        this.tail.prev = this.head;\n\t    }\n\t    /**\n\t     * Inserts the new node to the 'tail' of the list, updating the\n\t     * neighbors, and moving 'this.tail' (the End of List indicator) that\n\t     * to the end.\n\t     */\n\t    LinkedDictionary.prototype.appendToTail = function (entry) {\n\t        var lastNode = this.tail.prev;\n\t        lastNode.next = entry;\n\t        entry.prev = lastNode;\n\t        entry.next = this.tail;\n\t        this.tail.prev = entry;\n\t    };\n\t    /**\n\t     * Retrieves a linked dictionary from the table internally\n\t     */\n\t    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n\t        if (util.isUndefined(key)) {\n\t            return undefined;\n\t        }\n\t        var k = '$' + this.toStr(key);\n\t        var pair = (this.table[k]);\n\t        return pair;\n\t    };\n\t    /**\n\t     * Returns the value to which this dictionary maps the specified key.\n\t     * Returns undefined if this dictionary contains no mapping for this key.\n\t     * @param {Object} key key whose associated value is to be returned.\n\t     * @return {*} the value to which this dictionary maps the specified key or\n\t     * undefined if the map contains no mapping for this key.\n\t     */\n\t    LinkedDictionary.prototype.getValue = function (key) {\n\t        var pair = this.getLinkedDictionaryPair(key);\n\t        if (!util.isUndefined(pair)) {\n\t            return pair.value;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Removes the mapping for this key from this dictionary if it is present.\n\t     * Also, if a value is present for this key, the entry is removed from the\n\t     * insertion ordering.\n\t     * @param {Object} key key whose mapping is to be removed from the\n\t     * dictionary.\n\t     * @return {*} previous value associated with specified key, or undefined if\n\t     * there was no mapping for key.\n\t     */\n\t    LinkedDictionary.prototype.remove = function (key) {\n\t        var pair = this.getLinkedDictionaryPair(key);\n\t        if (!util.isUndefined(pair)) {\n\t            _super.prototype.remove.call(this, key); // This will remove it from the table\n\t            pair.unlink(); // This will unlink it from the chain\n\t            return pair.value;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t    * Removes all mappings from this LinkedDictionary.\n\t    * @this {collections.LinkedDictionary}\n\t    */\n\t    LinkedDictionary.prototype.clear = function () {\n\t        _super.prototype.clear.call(this);\n\t        this.head.next = this.tail;\n\t        this.tail.prev = this.head;\n\t    };\n\t    /**\n\t     * Internal function used when updating an existing KeyValue pair.\n\t     * It places the new value indexed by key into the table, but maintains\n\t     * its place in the linked ordering.\n\t     */\n\t    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n\t        var k = '$' + this.toStr(newPair.key);\n\t        // set the new Pair's links to existingPair's links\n\t        newPair.next = oldPair.next;\n\t        newPair.prev = oldPair.prev;\n\t        // Delete Existing Pair from the table, unlink it from chain.\n\t        // As a result, the nElements gets decremented by this operation\n\t        this.remove(oldPair.key);\n\t        // Link new Pair in place of where oldPair was,\n\t        // by pointing the old pair's neighbors to it.\n\t        newPair.prev.next = newPair;\n\t        newPair.next.prev = newPair;\n\t        this.table[k] = newPair;\n\t        // To make up for the fact that the number of elements was decremented,\n\t        // We need to increase it by one.\n\t        ++this.nElements;\n\t    };\n\t    /**\n\t     * Associates the specified value with the specified key in this dictionary.\n\t     * If the dictionary previously contained a mapping for this key, the old\n\t     * value is replaced by the specified value.\n\t     * Updating of a key that already exists maintains its place in the\n\t     * insertion order into the map.\n\t     * @param {Object} key key with which the specified value is to be\n\t     * associated.\n\t     * @param {Object} value value to be associated with the specified key.\n\t     * @return {*} previous value associated with the specified key, or undefined if\n\t     * there was no mapping for the key or if the key/value are undefined.\n\t     */\n\t    LinkedDictionary.prototype.setValue = function (key, value) {\n\t        if (util.isUndefined(key) || util.isUndefined(value)) {\n\t            return undefined;\n\t        }\n\t        var existingPair = this.getLinkedDictionaryPair(key);\n\t        var newPair = new LinkedDictionaryPair(key, value);\n\t        var k = '$' + this.toStr(key);\n\t        // If there is already an element for that key, we\n\t        // keep it's place in the LinkedList\n\t        if (!util.isUndefined(existingPair)) {\n\t            this.replace(existingPair, newPair);\n\t            return existingPair.value;\n\t        }\n\t        else {\n\t            this.appendToTail(newPair);\n\t            this.table[k] = newPair;\n\t            ++this.nElements;\n\t            return undefined;\n\t        }\n\t    };\n\t    /**\n\t     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n\t     * by insertion order.\n\t     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n\t     * ordered by insertion order.\n\t     */\n\t    LinkedDictionary.prototype.keys = function () {\n\t        var array = [];\n\t        this.forEach(function (key, value) {\n\t            array.push(key);\n\t        });\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n\t     * insertion order.\n\t     * @return {Array} an array containing all of the values in this LinkedDictionary,\n\t     * ordered by insertion order.\n\t     */\n\t    LinkedDictionary.prototype.values = function () {\n\t        var array = [];\n\t        this.forEach(function (key, value) {\n\t            array.push(value);\n\t        });\n\t        return array;\n\t    };\n\t    /**\n\t    * Executes the provided function once for each key-value pair\n\t    * present in this LinkedDictionary. It is done in the order of insertion\n\t    * into the LinkedDictionary\n\t    * @param {function(Object,Object):*} callback function to execute, it is\n\t    * invoked with two arguments: key and value. To break the iteration you can\n\t    * optionally return false.\n\t    */\n\t    LinkedDictionary.prototype.forEach = function (callback) {\n\t        var crawlNode = this.head.next;\n\t        while (crawlNode.next != null) {\n\t            var ret = callback(crawlNode.key, crawlNode.value);\n\t            if (ret === false) {\n\t                return;\n\t            }\n\t            crawlNode = crawlNode.next;\n\t        }\n\t    };\n\t    return LinkedDictionary;\n\t}(Dictionary_1.default));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = LinkedDictionary; // End of LinkedDictionary\n\t// /**\n\t//  * Returns true if this dictionary is equal to the given dictionary.\n\t//  * Two dictionaries are equal if they contain the same mappings.\n\t//  * @param {collections.Dictionary} other the other dictionary.\n\t//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n\t//  * function used to check if two values are equal.\n\t//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n\t//  */\n\t// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n\t// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n\t// \tif(!(other instanceof collections.Dictionary)){\n\t// \t\treturn false;\n\t// \t}\n\t// \tif(this.size() !== other.size()){\n\t// \t\treturn false;\n\t// \t}\n\t// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n\t// }\n\t//# sourceMappingURL=LinkedDictionary.js.map\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Dictionary_1 = __webpack_require__(9);\n\tvar arrays = __webpack_require__(6);\n\tvar MultiDictionary = (function () {\n\t    /**\n\t     * Creates an empty multi dictionary.\n\t     * @class <p>A multi dictionary is a special kind of dictionary that holds\n\t     * multiple values against each key. Setting a value into the dictionary will\n\t     * add the value to an array at that key. Getting a key will return an array,\n\t     * holding all the values set to that key.\n\t     * You can configure to allow duplicates in the values.\n\t     * This implementation accepts any kind of objects as keys.</p>\n\t     *\n\t     * <p>If the keys are custom objects a function which converts keys to strings must be\n\t     * provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petToString(pet) {\n\t       *  return pet.name;\n\t       * }\n\t     * </pre>\n\t     * <p>If the values are custom objects a function to check equality between values\n\t     * must be provided. Example:</p>\n\t     *\n\t     * <pre>\n\t     * function petsAreEqualByAge(pet1,pet2) {\n\t       *  return pet1.age===pet2.age;\n\t       * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object):string=} toStrFunction optional function\n\t     * to convert keys to strings. If the keys aren't strings or if toString()\n\t     * is not appropriate, a custom function which receives a key and returns a\n\t     * unique string must be provided.\n\t     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n\t     * function to check if two values are equal.\n\t     *\n\t     * @param allowDuplicateValues\n\t     */\n\t    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n\t        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n\t        this.dict = new Dictionary_1.default(toStrFunction);\n\t        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n\t        this.allowDuplicate = allowDuplicateValues;\n\t    }\n\t    /**\n\t    * Returns an array holding the values to which this dictionary maps\n\t    * the specified key.\n\t    * Returns an empty array if this dictionary contains no mappings for this key.\n\t    * @param {Object} key key whose associated values are to be returned.\n\t    * @return {Array} an array holding the values to which this dictionary maps\n\t    * the specified key.\n\t    */\n\t    MultiDictionary.prototype.getValue = function (key) {\n\t        var values = this.dict.getValue(key);\n\t        if (util.isUndefined(values)) {\n\t            return [];\n\t        }\n\t        return arrays.copy(values);\n\t    };\n\t    /**\n\t     * Adds the value to the array associated with the specified key, if\n\t     * it is not already present.\n\t     * @param {Object} key key with which the specified value is to be\n\t     * associated.\n\t     * @param {Object} value the value to add to the array at the key\n\t     * @return {boolean} true if the value was not already associated with that key.\n\t     */\n\t    MultiDictionary.prototype.setValue = function (key, value) {\n\t        if (util.isUndefined(key) || util.isUndefined(value)) {\n\t            return false;\n\t        }\n\t        if (!this.containsKey(key)) {\n\t            this.dict.setValue(key, [value]);\n\t            return true;\n\t        }\n\t        var array = this.dict.getValue(key);\n\t        if (!this.allowDuplicate) {\n\t            if (arrays.contains(array, value, this.equalsF)) {\n\t                return false;\n\t            }\n\t        }\n\t        array.push(value);\n\t        return true;\n\t    };\n\t    /**\n\t     * Removes the specified values from the array of values associated with the\n\t     * specified key. If a value isn't given, all values associated with the specified\n\t     * key are removed.\n\t     * @param {Object} key key whose mapping is to be removed from the\n\t     * dictionary.\n\t     * @param {Object=} value optional argument to specify the value to remove\n\t     * from the array associated with the specified key.\n\t     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n\t     * if the specified value isn't associated with the specified key.\n\t     */\n\t    MultiDictionary.prototype.remove = function (key, value) {\n\t        if (util.isUndefined(value)) {\n\t            var v = this.dict.remove(key);\n\t            return !util.isUndefined(v);\n\t        }\n\t        var array = this.dict.getValue(key);\n\t        if (arrays.remove(array, value, this.equalsF)) {\n\t            if (array.length === 0) {\n\t                this.dict.remove(key);\n\t            }\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Returns an array containing all of the keys in this dictionary.\n\t     * @return {Array} an array containing all of the keys in this dictionary.\n\t     */\n\t    MultiDictionary.prototype.keys = function () {\n\t        return this.dict.keys();\n\t    };\n\t    /**\n\t     * Returns an array containing all of the values in this dictionary.\n\t     * @return {Array} an array containing all of the values in this dictionary.\n\t     */\n\t    MultiDictionary.prototype.values = function () {\n\t        var values = this.dict.values();\n\t        var array = [];\n\t        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n\t            var v = values_1[_i];\n\t            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n\t                var w = v_1[_a];\n\t                array.push(w);\n\t            }\n\t        }\n\t        return array;\n\t    };\n\t    /**\n\t     * Returns true if this dictionary at least one value associatted the specified key.\n\t     * @param {Object} key key whose presence in this dictionary is to be\n\t     * tested.\n\t     * @return {boolean} true if this dictionary at least one value associatted\n\t     * the specified key.\n\t     */\n\t    MultiDictionary.prototype.containsKey = function (key) {\n\t        return this.dict.containsKey(key);\n\t    };\n\t    /**\n\t     * Removes all mappings from this dictionary.\n\t     */\n\t    MultiDictionary.prototype.clear = function () {\n\t        this.dict.clear();\n\t    };\n\t    /**\n\t     * Returns the number of keys in this dictionary.\n\t     * @return {number} the number of key-value mappings in this dictionary.\n\t     */\n\t    MultiDictionary.prototype.size = function () {\n\t        return this.dict.size();\n\t    };\n\t    /**\n\t     * Returns true if this dictionary contains no mappings.\n\t     * @return {boolean} true if this dictionary contains no mappings.\n\t     */\n\t    MultiDictionary.prototype.isEmpty = function () {\n\t        return this.dict.isEmpty();\n\t    };\n\t    return MultiDictionary;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = MultiDictionary; // end of multi dictionary\n\t//# sourceMappingURL=MultiDictionary.js.map\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util = __webpack_require__(7);\n\tvar Heap_1 = __webpack_require__(14);\n\tvar PriorityQueue = (function () {\n\t    /**\n\t     * Creates an empty priority queue.\n\t     * @class <p>In a priority queue each element is associated with a \"priority\",\n\t     * elements are dequeued in highest-priority-first order (the elements with the\n\t     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n\t     * If the inserted elements are custom objects a compare function must be provided,\n\t     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n\t     * <pre>\n\t     * function compare(a, b) {\n\t     *  if (a is less than b by some ordering criterion) {\n\t     *     return -1;\n\t     *  } if (a is greater than b by the ordering criterion) {\n\t     *     return 1;\n\t     *  }\n\t     *  // a must be equal to b\n\t     *  return 0;\n\t     * }\n\t     * </pre>\n\t     * @constructor\n\t     * @param {function(Object,Object):number=} compareFunction optional\n\t     * function used to compare two element priorities. Must return a negative integer,\n\t     * zero, or a positive integer as the first argument is less than, equal to,\n\t     * or greater than the second.\n\t     */\n\t    function PriorityQueue(compareFunction) {\n\t        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n\t    }\n\t    /**\n\t     * Inserts the specified element into this priority queue.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    PriorityQueue.prototype.enqueue = function (element) {\n\t        return this.heap.add(element);\n\t    };\n\t    /**\n\t     * Inserts the specified element into this priority queue.\n\t     * @param {Object} element the element to insert.\n\t     * @return {boolean} true if the element was inserted, or false if it is undefined.\n\t     */\n\t    PriorityQueue.prototype.add = function (element) {\n\t        return this.heap.add(element);\n\t    };\n\t    /**\n\t     * Retrieves and removes the highest priority element of this queue.\n\t     * @return {*} the the highest priority element of this queue,\n\t     *  or undefined if this queue is empty.\n\t     */\n\t    PriorityQueue.prototype.dequeue = function () {\n\t        if (this.heap.size() !== 0) {\n\t            var el = this.heap.peek();\n\t            this.heap.removeRoot();\n\t            return el;\n\t        }\n\t        return undefined;\n\t    };\n\t    /**\n\t     * Retrieves, but does not remove, the highest priority element of this queue.\n\t     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n\t     */\n\t    PriorityQueue.prototype.peek = function () {\n\t        return this.heap.peek();\n\t    };\n\t    /**\n\t     * Returns true if this priority queue contains the specified element.\n\t     * @param {Object} element element to search for.\n\t     * @return {boolean} true if this priority queue contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    PriorityQueue.prototype.contains = function (element) {\n\t        return this.heap.contains(element);\n\t    };\n\t    /**\n\t     * Checks if this priority queue is empty.\n\t     * @return {boolean} true if and only if this priority queue contains no items; false\n\t     * otherwise.\n\t     */\n\t    PriorityQueue.prototype.isEmpty = function () {\n\t        return this.heap.isEmpty();\n\t    };\n\t    /**\n\t     * Returns the number of elements in this priority queue.\n\t     * @return {number} the number of elements in this priority queue.\n\t     */\n\t    PriorityQueue.prototype.size = function () {\n\t        return this.heap.size();\n\t    };\n\t    /**\n\t     * Removes all of the elements from this priority queue.\n\t     */\n\t    PriorityQueue.prototype.clear = function () {\n\t        this.heap.clear();\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this queue in\n\t     * no particular order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    PriorityQueue.prototype.forEach = function (callback) {\n\t        this.heap.forEach(callback);\n\t    };\n\t    return PriorityQueue;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = PriorityQueue; // end of priority queue\n\t//# sourceMappingURL=PriorityQueue.js.map\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar LinkedList_1 = __webpack_require__(13);\n\tvar Stack = (function () {\n\t    /**\n\t     * Creates an empty Stack.\n\t     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n\t     * element added to the stack will be the first one to be removed. This\n\t     * implementation uses a linked list as a container.\n\t     * @constructor\n\t     */\n\t    function Stack() {\n\t        this.list = new LinkedList_1.default();\n\t    }\n\t    /**\n\t     * Pushes an item onto the top of this stack.\n\t     * @param {Object} elem the element to be pushed onto this stack.\n\t     * @return {boolean} true if the element was pushed or false if it is undefined.\n\t     */\n\t    Stack.prototype.push = function (elem) {\n\t        return this.list.add(elem, 0);\n\t    };\n\t    /**\n\t     * Pushes an item onto the top of this stack.\n\t     * @param {Object} elem the element to be pushed onto this stack.\n\t     * @return {boolean} true if the element was pushed or false if it is undefined.\n\t     */\n\t    Stack.prototype.add = function (elem) {\n\t        return this.list.add(elem, 0);\n\t    };\n\t    /**\n\t     * Removes the object at the top of this stack and returns that object.\n\t     * @return {*} the object at the top of this stack or undefined if the\n\t     * stack is empty.\n\t     */\n\t    Stack.prototype.pop = function () {\n\t        return this.list.removeElementAtIndex(0);\n\t    };\n\t    /**\n\t     * Looks at the object at the top of this stack without removing it from the\n\t     * stack.\n\t     * @return {*} the object at the top of this stack or undefined if the\n\t     * stack is empty.\n\t     */\n\t    Stack.prototype.peek = function () {\n\t        return this.list.first();\n\t    };\n\t    /**\n\t     * Returns the number of elements in this stack.\n\t     * @return {number} the number of elements in this stack.\n\t     */\n\t    Stack.prototype.size = function () {\n\t        return this.list.size();\n\t    };\n\t    /**\n\t     * Returns true if this stack contains the specified element.\n\t     * <p>If the elements inside this stack are\n\t     * not comparable with the === operator, a custom equals function should be\n\t     * provided to perform searches, the function must receive two arguments and\n\t     * return true if they are equal, false otherwise. Example:</p>\n\t     *\n\t     * <pre>\n\t     * const petsAreEqualByName (pet1, pet2) {\n\t     *  return pet1.name === pet2.name;\n\t     * }\n\t     * </pre>\n\t     * @param {Object} elem element to search for.\n\t     * @param {function(Object,Object):boolean=} equalsFunction optional\n\t     * function to check if two elements are equal.\n\t     * @return {boolean} true if this stack contains the specified element,\n\t     * false otherwise.\n\t     */\n\t    Stack.prototype.contains = function (elem, equalsFunction) {\n\t        return this.list.contains(elem, equalsFunction);\n\t    };\n\t    /**\n\t     * Checks if this stack is empty.\n\t     * @return {boolean} true if and only if this stack contains no items; false\n\t     * otherwise.\n\t     */\n\t    Stack.prototype.isEmpty = function () {\n\t        return this.list.isEmpty();\n\t    };\n\t    /**\n\t     * Removes all of the elements from this stack.\n\t     */\n\t    Stack.prototype.clear = function () {\n\t        this.list.clear();\n\t    };\n\t    /**\n\t     * Executes the provided function once for each element present in this stack in\n\t     * LIFO order.\n\t     * @param {function(Object):*} callback function to execute, it is\n\t     * invoked with one argument: the element value, to break the iteration you can\n\t     * optionally return false.\n\t     */\n\t    Stack.prototype.forEach = function (callback) {\n\t        this.list.forEach(callback);\n\t    };\n\t    return Stack;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Stack; // End of stack\n\t//# sourceMappingURL=Stack.js.map\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar CoalesceHandler = (function () {\r\n\t    function CoalesceHandler(f, out) {\r\n\t        this.f = Lambda_1.Lambda2_toFunction(f);\r\n\t        this.out = out;\r\n\t        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(Lambda_1.toSources(Lambda_1.Lambda2_deps(f)));\r\n\t        this.accumValid = false;\r\n\t    }\r\n\t    CoalesceHandler.prototype.send_ = function (a) {\r\n\t        var _this = this;\r\n\t        if (this.accumValid)\r\n\t            this.accum = this.f(this.accum, a);\r\n\t        else {\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(this.out.getVertex__(), function () {\r\n\t                _this.out.send_(_this.accum);\r\n\t                _this.accumValid = false;\r\n\t                _this.accum = null;\r\n\t            });\r\n\t            this.accum = a;\r\n\t            this.accumValid = true;\r\n\t        }\r\n\t    };\r\n\t    return CoalesceHandler;\r\n\t}());\r\n\texports.CoalesceHandler = CoalesceHandler;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Lambda_1 = __webpack_require__(1);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar Lazy_1 = __webpack_require__(21);\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar Operational_1 = __webpack_require__(22);\r\n\tvar LazySample = (function () {\r\n\t    function LazySample(cell) {\r\n\t        this.hasValue = false;\r\n\t        this.value = null;\r\n\t        this.cell = cell;\r\n\t    }\r\n\t    return LazySample;\r\n\t}());\r\n\tvar ApplyState = (function () {\r\n\t    function ApplyState() {\r\n\t        this.f = null;\r\n\t        this.f_present = false;\r\n\t        this.a = null;\r\n\t        this.a_present = false;\r\n\t    }\r\n\t    return ApplyState;\r\n\t}());\r\n\tvar Cell = (function () {\r\n\t    function Cell(initValue, str) {\r\n\t        var _this = this;\r\n\t        this.value = initValue;\r\n\t        if (!str) {\r\n\t            this.str = new Stream_1.Stream();\r\n\t            this.vertex = new Vertex_1.Vertex(\"ConstCell\", 0, []);\r\n\t        }\r\n\t        else\r\n\t            Transaction_1.Transaction.transactionally(function () { return _this.setStream(str); });\r\n\t    }\r\n\t    Cell.prototype.setStream = function (str) {\r\n\t        var _this = this;\r\n\t        this.str = str;\r\n\t        var me = this, src = new Vertex_1.Source(str.getVertex__(), function () {\r\n\t            return str.listen_(me.vertex, function (a) {\r\n\t                if (me.valueUpdate == null) {\r\n\t                    Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t                        me.value = me.valueUpdate;\r\n\t                        me.lazyInitValue = null;\r\n\t                        me.valueUpdate = null;\r\n\t                    });\r\n\t                }\r\n\t                me.valueUpdate = a;\r\n\t            }, false);\r\n\t        });\r\n\t        this.vertex = new Vertex_1.Vertex(\"Cell\", 0, [src]);\r\n\t        // We do a trick here of registering the source for the duration of the current\r\n\t        // transaction so that we are guaranteed to catch any stream events that\r\n\t        // occur in the same transaction.\r\n\t        this.vertex.register(Vertex_1.Vertex.NULL);\r\n\t        Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t            _this.vertex.deregister(Vertex_1.Vertex.NULL);\r\n\t        });\r\n\t    };\r\n\t    Cell.prototype.getVertex__ = function () {\r\n\t        return this.vertex;\r\n\t    };\r\n\t    Cell.prototype.getStream__ = function () {\r\n\t        return this.str;\r\n\t    };\r\n\t    /**\r\n\t     * Sample the cell's current value.\r\n\t     * <p>\r\n\t     * It may be used inside the functions passed to primitives that apply them to {@link Stream}s,\r\n\t     * including {@link Stream#map(Lambda1)} in which case it is equivalent to snapshotting the cell,\r\n\t     * {@link Stream#snapshot(Cell, Lambda2)}, {@link Stream#filter(Lambda1)} and\r\n\t     * {@link Stream#merge(Stream, Lambda2)}.\r\n\t     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\r\n\t     * miss any updates, but in many circumstances it makes sense.\r\n\t     */\r\n\t    Cell.prototype.sample = function () {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () { return _this.sampleNoTrans__(); });\r\n\t    };\r\n\t    Cell.prototype.sampleNoTrans__ = function () {\r\n\t        return this.value;\r\n\t    };\r\n\t    /**\r\n\t     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\r\n\t     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\r\n\t     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\r\n\t     */\r\n\t    Cell.prototype.sampleLazy = function () {\r\n\t        var me = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () { return me.sampleLazyNoTrans__(); });\r\n\t    };\r\n\t    Cell.prototype.sampleLazyNoTrans__ = function () {\r\n\t        var me = this, s = new LazySample(me);\r\n\t        Transaction_1.Transaction.currentTransaction.last(function () {\r\n\t            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\r\n\t            s.hasValue = true;\r\n\t            s.cell = null;\r\n\t        });\r\n\t        return new Lazy_1.Lazy(function () {\r\n\t            if (s.hasValue)\r\n\t                return s.value;\r\n\t            else\r\n\t                return s.cell.sample();\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Transform the cell's value according to the supplied function, so the returned Cell\r\n\t     * always reflects the value of the function applied to the input Cell's value.\r\n\t     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.map = function (f) {\r\n\t        var c = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            return Operational_1.Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda_1.Lambda1_toFunction(f)));\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a binary function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift = function (b, fn0) {\r\n\t        var fn = Lambda_1.Lambda2_toFunction(fn0), cf = this.map(function (aa) { return function (bb) { return fn(aa, bb); }; });\r\n\t        return Cell.apply(cf, b, Lambda_1.toSources(Lambda_1.Lambda2_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a ternary function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift3 = function (b, c, fn0) {\r\n\t        var fn = Lambda_1.Lambda3_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return fn(aa, bb, cc); }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(cf, b), c, Lambda_1.toSources(Lambda_1.Lambda3_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a quaternary function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift4 = function (b, c, d, fn0) {\r\n\t        var fn = Lambda_1.Lambda4_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return fn(aa, bb, cc, dd); }; }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(Cell.apply(cf, b), c), d, Lambda_1.toSources(Lambda_1.Lambda4_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift5 = function (b, c, d, e, fn0) {\r\n\t        var fn = Lambda_1.Lambda5_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return fn(aa, bb, cc, dd, ee); }; }; }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e, Lambda_1.toSources(Lambda_1.Lambda5_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\r\n\t     * function applied to the input cells' values.\r\n\t     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Cell.prototype.lift6 = function (b, c, d, e, f, fn0) {\r\n\t        var fn = Lambda_1.Lambda6_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return function (ff) { return fn(aa, bb, cc, dd, ee, ff); }; }; }; }; }; }, cf = this.map(mf);\r\n\t        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e), f, Lambda_1.toSources(Lambda_1.Lambda6_deps(fn0)));\r\n\t    };\r\n\t    /**\r\n\t     * Apply a value inside a cell to a function inside a cell. This is the\r\n\t     * primitive for all function lifting.\r\n\t     */\r\n\t    Cell.apply = function (cf, ca, sources) {\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            var state = new ApplyState(), out = new Stream_1.StreamWithSend(), cf_value = Operational_1.Operational.value(cf), ca_value = Operational_1.Operational.value(ca), src1 = new Vertex_1.Source(cf_value.getVertex__(), function () {\r\n\t                return cf_value.listen_(out.getVertex__(), function (f) {\r\n\t                    state.f = f;\r\n\t                    state.f_present = true;\r\n\t                    if (state.a_present)\r\n\t                        out.send_(state.f(state.a));\r\n\t                }, false);\r\n\t            }), src2 = new Vertex_1.Source(ca_value.getVertex__(), function () {\r\n\t                return ca_value.listen_(out.getVertex__(), function (a) {\r\n\t                    state.a = a;\r\n\t                    state.a_present = true;\r\n\t                    if (state.f_present)\r\n\t                        out.send_(state.f(state.a));\r\n\t                }, false);\r\n\t            });\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"apply\", 0, [src1, src2].concat(sources ? sources : [])));\r\n\t            return out.coalesce__(function (l, r) { return r; }).holdLazy(new Lazy_1.Lazy(function () {\r\n\t                return cf.sampleNoTrans__()(ca.sampleNoTrans__());\r\n\t            }));\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Unwrap a cell inside another cell to give a time-varying cell implementation.\r\n\t     */\r\n\t    Cell.switchC = function (cca) {\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            var za = cca.sampleLazy().map(function (ba) { return ba.sample(); }), out = new Stream_1.StreamWithSend();\r\n\t            var last_ca = null;\r\n\t            var cca_value = Operational_1.Operational.value(cca), src = new Vertex_1.Source(cca_value.getVertex__(), function () {\r\n\t                var kill2 = last_ca === null ? null :\r\n\t                    Operational_1.Operational.value(last_ca).listen_(out.getVertex__(), function (a) { return out.send_(a); }, false);\r\n\t                var kill1 = cca_value.listen_(out.getVertex__(), function (ca) {\r\n\t                    // Note: If any switch takes place during a transaction, then the\r\n\t                    // coalesce__() below will always cause a sample to be fetched\r\n\t                    // from the one we just switched to. So anything from the old input cell\r\n\t                    // that might have happened during this transaction will be suppressed.\r\n\t                    last_ca = ca;\r\n\t                    if (kill2 !== null)\r\n\t                        kill2();\r\n\t                    kill2 = Operational_1.Operational.value(ca).listen_(out.getVertex__(), function (a) { return out.send_(a); }, false);\r\n\t                }, false);\r\n\t                return function () { kill1(); kill2(); };\r\n\t            });\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"switchC\", 0, [src]));\r\n\t            return out.coalesce__(function (l, r) { return r; }).holdLazy(za);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Unwrap a stream inside a cell to give a time-varying stream implementation.\r\n\t     */\r\n\t    Cell.switchS = function (csa) {\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            var out = new Stream_1.StreamWithSend(), h2 = function (a) {\r\n\t                out.send_(a);\r\n\t            }, src = new Vertex_1.Source(csa.getVertex__(), function () {\r\n\t                var kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\r\n\t                var kill1 = csa.getStream__().listen_(out.getVertex__(), function (sa) {\r\n\t                    kill2();\r\n\t                    kill2 = sa.listen_(out.getVertex__(), h2, true);\r\n\t                }, false);\r\n\t                return function () { kill1(); kill2(); };\r\n\t            });\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"switchS\", 0, [src]));\r\n\t            return out;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Listen for updates to the value of this cell. This is the observer pattern. The\r\n\t     * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\r\n\t     * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\r\n\t     * the world of I/O and for FRP.\r\n\t     * @param h The handler to execute when there's a new value.\r\n\t     *   You should make no assumptions about what thread you are called on, and the\r\n\t     *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\r\n\t     *   or {@link StreamSink#send(Object)} in the handler.\r\n\t     *   An exception will be thrown, because you are not meant to use this to create\r\n\t     *   your own primitives.\r\n\t     */\r\n\t    Cell.prototype.listen = function (h) {\r\n\t        var _this = this;\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            return Operational_1.Operational.value(_this).listen(h);\r\n\t        });\r\n\t    };\r\n\t    return Cell;\r\n\t}());\r\n\texports.Cell = Cell;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * A representation for a value that may not be available until the current\r\n\t * transaction is closed.\r\n\t */\r\n\tvar Lazy = (function () {\r\n\t    function Lazy(f) {\r\n\t        this.f = f;\r\n\t    }\r\n\t    /**\r\n\t     * Get the value if available, throwing an exception if not.\r\n\t     * In the general case this should only be used in subsequent transactions to\r\n\t     * when the Lazy was obtained.\r\n\t     */\r\n\t    Lazy.prototype.get = function () {\r\n\t        return this.f();\r\n\t    };\r\n\t    /**\r\n\t     * Map the lazy value according to the specified function, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazy's value.\r\n\t     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\r\n\t     */\r\n\t    Lazy.prototype.map = function (f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f()); });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a binary function into lazy values, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazys' values.\r\n\t     */\r\n\t    Lazy.prototype.lift = function (b, f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f(), b.f()); });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a ternary function into lazy values, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazys' values.\r\n\t     */\r\n\t    Lazy.prototype.lift3 = function (b, c, f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f(), b.f(), c.f()); });\r\n\t    };\r\n\t    /**\r\n\t     * Lift a quaternary function into lazy values, so the returned Lazy reflects\r\n\t     * the value of the function applied to the input Lazys' values.\r\n\t     */\r\n\t    Lazy.prototype.lift4 = function (b, c, d, f) {\r\n\t        var _this = this;\r\n\t        return new Lazy(function () { return f(_this.f(), b.f(), c.f(), d.f()); });\r\n\t    };\r\n\t    return Lazy;\r\n\t}());\r\n\texports.Lazy = Lazy;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar Unit_1 = __webpack_require__(23);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Operational = (function () {\r\n\t    function Operational() {\r\n\t    }\r\n\t    /**\r\n\t     * A stream that gives the updates/steps for a {@link Cell}.\r\n\t     * <P>\r\n\t     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n\t     * API. It breaks the property of non-detectability of cell steps/updates.\r\n\t     * The rule with this primitive is that you should only use it in functions\r\n\t     * that do not allow the caller to detect the cell updates.\r\n\t     */\r\n\t    Operational.updates = function (c) {\r\n\t        /*  Don't think this is needed\r\n\t        const out = new StreamWithSend<A>(null);\r\n\t        out.setVertex__(new Vertex(\"updates\", 0, [\r\n\t                new Source(\r\n\t                    c.getStream__().getVertex__(),\r\n\t                    () => {\r\n\t                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\r\n\t                            out.send_(a);\r\n\t                        }, false);\r\n\t                    }\r\n\t                ),\r\n\t                new Source(\r\n\t                    c.getVertex__(),\r\n\t                    () => {\r\n\t                        return () => { };\r\n\t                    }\r\n\t                )\r\n\t            ]\r\n\t        ));\r\n\t        return out;\r\n\t        */\r\n\t        return c.getStream__();\r\n\t    };\r\n\t    /**\r\n\t     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\r\n\t     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\r\n\t     * firing for each update/step of the cell's value.\r\n\t     * <P>\r\n\t     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n\t     * API. It breaks the property of non-detectability of cell steps/updates.\r\n\t     * The rule with this primitive is that you should only use it in functions\r\n\t     * that do not allow the caller to detect the cell updates.\r\n\t     */\r\n\t    Operational.value = function (c) {\r\n\t        return Transaction_1.Transaction.transactionally(function () {\r\n\t            var sSpark = new Stream_1.StreamWithSend();\r\n\t            Transaction_1.Transaction.currentTransaction.prioritized(sSpark.getVertex__(), function () {\r\n\t                sSpark.send_(Unit_1.Unit.UNIT);\r\n\t            });\r\n\t            var sInitial = sSpark.snapshot1(c);\r\n\t            return Operational.updates(c).orElse(sInitial);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Push each event onto a new transaction guaranteed to come before the next externally\r\n\t     * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\r\n\t     */\r\n\t    Operational.defer = function (s) {\r\n\t        return Operational.split(s.map(function (a) {\r\n\t            return [a];\r\n\t        }));\r\n\t    };\r\n\t    /**\r\n\t     * Push each event in the list onto a newly created transaction guaranteed\r\n\t     * to come before the next externally initiated transaction. Note that the semantics\r\n\t     * are such that two different invocations of split() can put events into the same\r\n\t     * new transaction, so the resulting stream's events could be simultaneous with\r\n\t     * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\r\n\t     */\r\n\t    Operational.split = function (s) {\r\n\t        var out = new Stream_1.StreamWithSend(null);\r\n\t        out.setVertex__(new Vertex_1.Vertex(\"split\", 0, [\r\n\t            new Vertex_1.Source(s.getVertex__(), function () {\r\n\t                return s.listen_(out.getVertex__(), function (as) {\r\n\t                    var _loop_1 = function(i) {\r\n\t                        Transaction_1.Transaction.currentTransaction.post(i, function () {\r\n\t                            Transaction_1.Transaction.transactionally(function () {\r\n\t                                out.send_(as[i]);\r\n\t                            });\r\n\t                        });\r\n\t                    };\r\n\t                    for (var i = 0; i < as.length; i++) {\r\n\t                        _loop_1(i);\r\n\t                    }\r\n\t                }, false);\r\n\t            })\r\n\t        ]));\r\n\t        return out;\r\n\t    };\r\n\t    return Operational;\r\n\t}());\r\n\texports.Operational = Operational;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Unit = (function () {\r\n\t    function Unit() {\r\n\t    }\r\n\t    Unit.UNIT = new Unit();\r\n\t    return Unit;\r\n\t}());\r\n\texports.Unit = Unit;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Listener = (function () {\r\n\t    function Listener(h, target) {\r\n\t        this.h = h;\r\n\t        this.target = target;\r\n\t    }\r\n\t    return Listener;\r\n\t}());\r\n\texports.Listener = Listener;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar LazyCell = (function (_super) {\r\n\t    __extends(LazyCell, _super);\r\n\t    function LazyCell(lazyInitValue, str) {\r\n\t        var _this = this;\r\n\t        _super.call(this, null, null);\r\n\t        Transaction_1.Transaction.transactionally(function () {\r\n\t            if (str)\r\n\t                _this.setStream(str);\r\n\t            _this.lazyInitValue = lazyInitValue;\r\n\t        });\r\n\t    }\r\n\t    LazyCell.prototype.sampleNoTrans__ = function () {\r\n\t        if (this.value == null && this.lazyInitValue != null) {\r\n\t            this.value = this.lazyInitValue.get();\r\n\t            this.lazyInitValue = null;\r\n\t        }\r\n\t        return this.value;\r\n\t    };\r\n\t    return LazyCell;\r\n\t}(Cell_1.Cell));\r\n\texports.LazyCell = LazyCell;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar CoalesceHandler_1 = __webpack_require__(19);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\t/**\r\n\t * A stream that allows values to be pushed into it, acting as an interface between the\r\n\t * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\r\n\t * should downcast to {@link Stream}.\r\n\t */\r\n\tvar StreamSink = (function (_super) {\r\n\t    __extends(StreamSink, _super);\r\n\t    function StreamSink(f) {\r\n\t        _super.call(this);\r\n\t        if (!f)\r\n\t            f = (function (l, r) {\r\n\t                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\r\n\t            });\r\n\t        this.coalescer = new CoalesceHandler_1.CoalesceHandler(f, this);\r\n\t    }\r\n\t    StreamSink.prototype.send = function (a) {\r\n\t        var _this = this;\r\n\t        Transaction_1.Transaction.transactionally(function () {\r\n\t            if (Transaction_1.Transaction.currentTransaction.inCallback > 0)\r\n\t                throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\r\n\t            _this.coalescer.send_(a);\r\n\t        });\r\n\t    };\r\n\t    return StreamSink;\r\n\t}(Stream_1.StreamWithSend));\r\n\texports.StreamSink = StreamSink;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar LazyCell_1 = __webpack_require__(25);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\t/**\r\n\t * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\r\n\t */\r\n\tvar CellLoop = (function (_super) {\r\n\t    __extends(CellLoop, _super);\r\n\t    function CellLoop() {\r\n\t        _super.call(this, null, new Stream_1.StreamLoop());\r\n\t    }\r\n\t    /**\r\n\t     * Resolve the loop to specify what the CellLoop was a forward reference to. It\r\n\t     * must be invoked inside the same transaction as the place where the CellLoop is used.\r\n\t     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n\t     * or {@link Transaction#runVoid(Runnable)}.\r\n\t     */\r\n\t    CellLoop.prototype.loop = function (a_out) {\r\n\t        var me = this;\r\n\t        Transaction_1.Transaction.transactionally(function () {\r\n\t            me.getStream__().loop(a_out.getStream__());\r\n\t            me.lazyInitValue = a_out.sampleLazy();\r\n\t        });\r\n\t    };\r\n\t    CellLoop.prototype.sampleNoTrans__ = function () {\r\n\t        if (!this.getStream__().assigned__)\r\n\t            throw new Error(\"CellLoop sampled before it was looped\");\r\n\t        return _super.prototype.sampleNoTrans__.call(this);\r\n\t    };\r\n\t    return CellLoop;\r\n\t}(LazyCell_1.LazyCell));\r\n\texports.CellLoop = CellLoop;\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Cell_1 = __webpack_require__(20);\r\n\tvar StreamSink_1 = __webpack_require__(26);\r\n\t/**\r\n\t * A cell that allows values to be pushed into it, acting as an interface between the\r\n\t * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\r\n\t * should downcast to {@link Cell}.\r\n\t */\r\n\tvar CellSink = (function (_super) {\r\n\t    __extends(CellSink, _super);\r\n\t    /**\r\n\t     * Construct a writable cell with the specified initial value. If multiple values are\r\n\t     * sent in the same transaction, the specified function is used to combine them.\r\n\t     *\r\n\t     * If the function is not supplied, then an exception will be thrown in this case.\r\n\t     */\r\n\t    function CellSink(initValue, f) {\r\n\t        _super.call(this, initValue, new StreamSink_1.StreamSink(f));\r\n\t    }\r\n\t    /**\r\n\t     * Send a value, modifying the value of the cell. send(A) may not be used inside\r\n\t     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\r\n\t     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\r\n\t     * You are not meant to use this to define your own primitives.\r\n\t     * @param a Value to push into the cell.\r\n\t     */\r\n\t    CellSink.prototype.send = function (a) {\r\n\t        this.getStream__().send(a);\r\n\t    };\r\n\t    return CellSink;\r\n\t}(Cell_1.Cell));\r\n\texports.CellSink = CellSink;\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Tuple2 = (function () {\r\n\t    function Tuple2(a, b) {\r\n\t        this.a = a;\r\n\t        this.b = b;\r\n\t    }\r\n\t    return Tuple2;\r\n\t}());\r\n\texports.Tuple2 = Tuple2;\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar typescript_collections_1 = __webpack_require__(5);\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar CellSink_1 = __webpack_require__(28);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\t/**\r\n\t * An interface for implementations of FRP timer systems.\r\n\t */\r\n\tvar TimerSystemImpl = (function () {\r\n\t    function TimerSystemImpl() {\r\n\t    }\r\n\t    return TimerSystemImpl;\r\n\t}());\r\n\texports.TimerSystemImpl = TimerSystemImpl;\r\n\tvar nextSeq = 0;\r\n\tvar Event = (function () {\r\n\t    function Event(t, sAlarm) {\r\n\t        this.t = t;\r\n\t        this.sAlarm = sAlarm;\r\n\t        this.seq = ++nextSeq;\r\n\t    }\r\n\t    return Event;\r\n\t}());\r\n\tvar TimerSystem = (function () {\r\n\t    function TimerSystem(impl) {\r\n\t        var _this = this;\r\n\t        this.eventQueue = new typescript_collections_1.BSTree(function (a, b) {\r\n\t            if (a.t < b.t)\r\n\t                return -1;\r\n\t            if (a.t > b.t)\r\n\t                return 1;\r\n\t            if (a.seq < b.seq)\r\n\t                return -1;\r\n\t            if (a.seq > b.seq)\r\n\t                return 1;\r\n\t            return 0;\r\n\t        });\r\n\t        Transaction_1.Transaction.transactionally(function () {\r\n\t            _this.impl = impl;\r\n\t            var timeSnk = new CellSink_1.CellSink(impl.now());\r\n\t            _this.time = timeSnk;\r\n\t            // A dummy listener to time to keep it alive even when there are no other listeners.\r\n\t            _this.time.listen(function (t) { });\r\n\t            Transaction_1.Transaction.onStart(function () {\r\n\t                var t = impl.now();\r\n\t                // Pop and execute all events earlier than or equal to t (the current time).\r\n\t                var _loop_1 = function() {\r\n\t                    var ev = null;\r\n\t                    if (!_this.eventQueue.isEmpty()) {\r\n\t                        var mev = _this.eventQueue.minimum();\r\n\t                        if (mev.t <= t) {\r\n\t                            ev = mev;\r\n\t                        }\r\n\t                    }\r\n\t                    if (ev != null) {\r\n\t                        timeSnk.send(ev.t);\r\n\t                        Transaction_1.Transaction.transactionally(function () { return ev.sAlarm.send_(ev.t); });\r\n\t                    }\r\n\t                    else\r\n\t                        return \"break\";\r\n\t                };\r\n\t                while (true) {\r\n\t                    var state_1 = _loop_1();\r\n\t                    if (state_1 === \"break\") break;\r\n\t                }\r\n\t                timeSnk.send(t);\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t    /**\r\n\t     * A timer that fires at the specified time, which can be null, meaning\r\n\t     * that the alarm is not set.\r\n\t     */\r\n\t    TimerSystem.prototype.at = function (tAlarm) {\r\n\t        var _this = this;\r\n\t        var current = null, cancelCurrent = null, active = false, tAl = null, sampled = false;\r\n\t        var sAlarm = new Stream_1.StreamWithSend(null), updateTimer = function () {\r\n\t            if (cancelCurrent !== null) {\r\n\t                cancelCurrent();\r\n\t                _this.eventQueue.remove(current);\r\n\t            }\r\n\t            cancelCurrent = null;\r\n\t            current = null;\r\n\t            if (active) {\r\n\t                if (!sampled) {\r\n\t                    sampled = true;\r\n\t                    tAl = tAlarm.sampleNoTrans__();\r\n\t                }\r\n\t                if (tAl !== null) {\r\n\t                    current = new Event(tAl, sAlarm);\r\n\t                    _this.eventQueue.add(current);\r\n\t                    cancelCurrent = _this.impl.setTimer(tAl, function () {\r\n\t                        // Open and close a transaction to trigger queued\r\n\t                        // events to run.\r\n\t                        Transaction_1.Transaction.transactionally(function () { });\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\t        };\r\n\t        sAlarm.setVertex__(new Vertex_1.Vertex(\"at\", 0, [\r\n\t            new Vertex_1.Source(tAlarm.getVertex__(), function () {\r\n\t                active = true;\r\n\t                sampled = false;\r\n\t                Transaction_1.Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\r\n\t                var kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), function (oAlarm) {\r\n\t                    tAl = oAlarm;\r\n\t                    sampled = true;\r\n\t                    updateTimer();\r\n\t                }, false);\r\n\t                return function () {\r\n\t                    active = false;\r\n\t                    updateTimer();\r\n\t                    kill();\r\n\t                };\r\n\t            })\r\n\t        ]));\r\n\t        return sAlarm;\r\n\t    };\r\n\t    return TimerSystem;\r\n\t}());\r\n\texports.TimerSystem = TimerSystem;\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TimerSystem_1 = __webpack_require__(30);\r\n\t/**\r\n\t * A timer system implementation using seconds as the time unit.\r\n\t */\r\n\tvar SecondsTimerSystem = (function (_super) {\r\n\t    __extends(SecondsTimerSystem, _super);\r\n\t    function SecondsTimerSystem() {\r\n\t        _super.call(this, new SecondsTimerSystemImpl());\r\n\t    }\r\n\t    return SecondsTimerSystem;\r\n\t}(TimerSystem_1.TimerSystem));\r\n\texports.SecondsTimerSystem = SecondsTimerSystem;\r\n\tvar SecondsTimerSystemImpl = (function (_super) {\r\n\t    __extends(SecondsTimerSystemImpl, _super);\r\n\t    function SecondsTimerSystemImpl() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    /**\r\n\t     * Set a timer that will execute the specified callback at the specified time.\r\n\t     * @return A function that can be used to cancel the timer.\r\n\t     */\r\n\t    SecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n\t        var timeout = setTimeout(callback, (t - this.now()) * 1000);\r\n\t        return function () { clearTimeout(timeout); };\r\n\t    };\r\n\t    /**\r\n\t     * Return the current clock time.\r\n\t     */\r\n\t    SecondsTimerSystemImpl.prototype.now = function () {\r\n\t        return Date.now() * 0.001;\r\n\t    };\r\n\t    return SecondsTimerSystemImpl;\r\n\t}(TimerSystem_1.TimerSystemImpl));\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TimerSystem_1 = __webpack_require__(30);\r\n\t/**\r\n\t * A timer system implementation using milliseconds as the time unit.\r\n\t */\r\n\tvar MillisecondsTimerSystem = (function (_super) {\r\n\t    __extends(MillisecondsTimerSystem, _super);\r\n\t    function MillisecondsTimerSystem() {\r\n\t        _super.call(this, new MillisecondsTimerSystemImpl());\r\n\t    }\r\n\t    return MillisecondsTimerSystem;\r\n\t}(TimerSystem_1.TimerSystem));\r\n\texports.MillisecondsTimerSystem = MillisecondsTimerSystem;\r\n\tvar MillisecondsTimerSystemImpl = (function (_super) {\r\n\t    __extends(MillisecondsTimerSystemImpl, _super);\r\n\t    function MillisecondsTimerSystemImpl() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    /**\r\n\t     * Set a timer that will execute the specified callback at the specified time.\r\n\t     * @return A function that can be used to cancel the timer.\r\n\t     */\r\n\t    MillisecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n\t        var timeout = setTimeout(callback, t - this.now());\r\n\t        return function () { clearTimeout(timeout); };\r\n\t    };\r\n\t    /**\r\n\t     * Return the current clock time.\r\n\t     */\r\n\t    MillisecondsTimerSystemImpl.prototype.now = function () {\r\n\t        return Date.now();\r\n\t    };\r\n\t    return MillisecondsTimerSystemImpl;\r\n\t}(TimerSystem_1.TimerSystemImpl));\r\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Stream_1 = __webpack_require__(3);\r\n\tvar Vertex_1 = __webpack_require__(2);\r\n\tvar Transaction_1 = __webpack_require__(4);\r\n\tvar IOAction = (function () {\r\n\t    function IOAction() {\r\n\t    }\r\n\t    /*!\r\n\t     * Convert a function that performs asynchronous I/O taking input A\r\n\t     * and returning a value of type B into an I/O action of type\r\n\t     * (sa : Stream<A>) => Stream<B>\r\n\t     */\r\n\t    IOAction.fromAsync = function (performIO) {\r\n\t        return function (sa) {\r\n\t            var out = new Stream_1.StreamWithSend(null);\r\n\t            out.setVertex__(new Vertex_1.Vertex(\"map\", 0, [\r\n\t                new Vertex_1.Source(sa.getVertex__(), function () {\r\n\t                    return sa.listen_(out.getVertex__(), function (a) {\r\n\t                        performIO(a, function (b) {\r\n\t                            Transaction_1.Transaction.transactionally(function () {\r\n\t                                out.send_(b);\r\n\t                            });\r\n\t                        });\r\n\t                    }, false);\r\n\t                })\r\n\t            ]));\r\n\t            return out;\r\n\t        };\r\n\t    };\r\n\t    return IOAction;\r\n\t}());\r\n\texports.IOAction = IOAction;\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// sodium.umd.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 68af005a70a2c400e812","export { lambda1, lambda2, lambda3, lambda4, lambda5, lambda6 } from \"./Lambda\";\nexport { Stream, StreamLoop } from \"./Stream\";\nexport { StreamSink } from \"./StreamSink\";\nexport { Cell } from \"./Cell\";\nexport { CellLoop } from \"./CellLoop\";\nexport { CellSink } from \"./CellSink\";\nexport { Transaction } from \"./Transaction\";\nexport { Tuple2 } from \"./Tuple2\";\nexport { Unit } from \"./Unit\";\nexport { Operational } from \"./Operational\";\nexport { getTotalRegistrations, Vertex } from \"./Vertex\";\nexport { TimerSystemImpl, TimerSystem } from \"./TimerSystem\";\nexport { SecondsTimerSystem } from \"./SecondsTimerSystem\";\nexport { MillisecondsTimerSystem } from \"./MillisecondsTimerSystem\";\nexport { IOAction } from \"./IOAction\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Sodium.ts","import { Stream } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Source } from \"./Vertex\";\n\nexport class Lambda1<A,B> {\n    constructor(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A) => B;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda1<A,B>(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda1<A,B>\n{\n    return new Lambda1(f, deps);\n}\n\nexport function Lambda1_deps<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda1)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda1_toFunction<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : (a : A) => B {\n    if (f instanceof Lambda1)\n        return f.f;\n    else\n        return <(a : A) => B>f;\n}\n\nexport class Lambda2<A,B,C> {\n    constructor(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B) => C;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda2<A,B,C>(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda2<A,B,C>\n{\n    return new Lambda2(f, deps);\n}\n\nexport function Lambda2_deps<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda2)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda2_toFunction<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : (a : A, b : B) => C {\n    if (f instanceof Lambda2)\n        return f.f;\n    else\n        return <(a : A, b : B) => C>f;\n}\n\nexport class Lambda3<A,B,C,D> {\n    constructor(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C) => D;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda3<A,B,C,D>(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda3<A,B,C,D>\n{\n    return new Lambda3(f, deps);\n}\n\nexport function Lambda3_deps<A,B,C,D>(f : ((a : A, b : B, c : C) => D)\n        | Lambda3<A,B,C,D>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda3)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda3_toFunction<A,B,C,D>(f : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : (a : A, b : B, c : C) => D {\n    if (f instanceof Lambda3)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C) => D>f;\n}\n\nexport class Lambda4<A,B,C,D,E> {\n    constructor(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D) => E;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda4<A,B,C,D,E>(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda4<A,B,C,D,E>\n{\n    return new Lambda4(f, deps);\n}\n\nexport function Lambda4_deps<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda4)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda4_toFunction<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : (a : A, b : B, c : C, d : D) => E {\n    if (f instanceof Lambda4)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D) => E>f;\n}\n\nexport class Lambda5<A,B,C,D,E,F> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E) => F;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda5<A,B,C,D,E,F>(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda5<A,B,C,D,E,F>\n{\n    return new Lambda5(f, deps);\n}\n\nexport function Lambda5_deps<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda5)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda5_toFunction<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : (a : A, b : B, c : C, d : D, e : E) => F {\n    if (f instanceof Lambda5)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E) => F>f;\n}\n\nexport class Lambda6<A,B,C,D,E,F,G> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E, f : F) => G;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda6<A,B,C,D,E,F,G>(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda6<A,B,C,D,E,F,G>\n{\n    return new Lambda6(f, deps);\n}\n\nexport function Lambda6_deps<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda6)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda6_toFunction<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : (a : A, b : B, c : C, d : D, e : E, f : F) => G {\n    if (f instanceof Lambda6)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E, f : F) => G>f;\n}\n\nexport function toSources(deps : Array<Stream<any>|Cell<any>>) : Source[] {\n    const ss : Source[] = [];\n    for (let i = 0; i < deps.length; i++) {\n        const dep = deps[i];\n        ss.push(new Source(dep.getVertex__(), null));\n    }\n    return ss;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Lambda.ts","import { Set } from \"typescript-collections\";\n\nlet totalRegistrations : number = 0;\nexport function getTotalRegistrations() : number {\n    return totalRegistrations;\n}\n\nexport class Source {\n    constructor(\n        origin : Vertex,\n        register_ : () => () => void\n    ) {\n        if (origin === null)\n            throw new Error(\"null origin!\");\n        this.origin = origin;\n        this.register_ = register_;\n    }\n    origin : Vertex;\n    private register_ : () => () => void;\n    private registered : boolean = false;\n    private deregister_ : () => void = null;\n\n    register(target : Vertex) : void {\n        if (!this.registered) {\n            this.registered = true;\n            if (this.register_ !== null)\n                this.deregister_ = this.register_();\n            else {\n                this.origin.increment(target);\n                this.deregister_ = () => this.origin.decrement(target);\n            }\n        }\n    }\n    deregister(target : Vertex) : void {\n        if (this.registered) {\n            this.registered = false;\n            if (this.deregister_ !== null)\n                this.deregister_();\n        }\n    }\n}\n\nexport enum Color { black, gray, white, purple };\nlet roots : Vertex[] = [];\nlet nextID : number = 0;\nlet verbose : boolean = false;\n\nexport function setVerbose(v : boolean) : void { verbose = v; }\n\nexport function describeAll(v : Vertex, visited : Set<number>)\n{\n    if (visited.contains(v.id)) return;\n    console.log(v.descr());\n    visited.add(v.id);\n    let chs = v.children();\n    for (let i = 0; i < chs.length; i++)\n        describeAll(chs[i], visited);\n}\n\nexport class Vertex {\n    static NULL : Vertex = new Vertex(\"user\", 1e12, []);\n    id : number;\n\n\tconstructor(name : string, rank : number, sources : Source[]) {\n\t    this.name = name;\n\t\tthis.rank = rank;\n\t\tthis.sources = sources;\n\t\tthis.id = nextID++;\n\t}\n\tname : string;\n    rank : number;\n    sources : Source[];\n    targets : Vertex[] = [];\n    childrn : Vertex[] = [];\n    refCount() : number { return this.targets.length; };\n    visited : boolean = false;\n    register(target : Vertex) : boolean {\n        return this.increment(target);\n    }\n    deregister(target : Vertex) : void {\n        if (verbose)\n            console.log(\"deregister \"+this.descr()+\" => \"+target.descr());\n        this.decrement(target);\n        Vertex.collectCycles();\n    }\n    private incRefCount(target : Vertex) : boolean {\n        let anyChanged : boolean = false;\n        if (this.refCount() == 0) {\n            for (let i = 0; i < this.sources.length; i++)\n                this.sources[i].register(this);\n        }\n        this.targets.push(target);\n        target.childrn.push(this);\n        if (target.ensureBiggerThan(this.rank))\n            anyChanged = true;\n        totalRegistrations++;\n        return anyChanged;\n    }\n\n    private decRefCount(target : Vertex) : void {\n        if (verbose)\n            console.log(\"DEC \"+this.descr());\n        let matched = false;\n        for (let i = 0; i < target.childrn.length; i++)\n            if (target.childrn[i] === this) {\n                target.childrn.splice(i, 1);\n            }\n        for (let i = 0; i < this.targets.length; i++)\n            if (this.targets[i] === target) {\n                this.targets.splice(i, 1);\n                matched = true;\n                break;\n            }\n        if (matched) {\n            if (this.refCount() == 0) {\n                for (let i = 0; i < this.sources.length; i++)\n                    this.sources[i].deregister(this);\n            }\n            totalRegistrations--;\n        }\n    }\n\n    addSource(src : Source) : void {\n        this.sources.push(src);\n        if (this.refCount() > 0)\n            src.register(this);\n    }\n\n\tprivate ensureBiggerThan(limit : number) : boolean {\n\t\tif (this.rank > limit || this.visited)\n\t\t\treturn false;\n\n        this.visited = true;\n\t\tthis.rank = limit + 1;\n\t\tfor (let i = 0; i < this.targets.length; i++)\n\t\t\tthis.targets[i].ensureBiggerThan(this.rank);\n        this.visited = false;\n\t\treturn true;\n\t}\n\n\tdescr() : string {\n        let colStr : string = null;\n        switch (this.color) {\n        case Color.black: colStr = \"black\"; break;\n        case Color.gray:  colStr = \"gray\"; break;\n        case Color.white: colStr = \"white\"; break;\n        case Color.purple: colStr = \"purple\"; break;\n        }\n        let str = this.id+\" \"+this.name+\" [\"+this.refCount()+\"/\"+this.refCountAdj+\"] \"+colStr+\" ->\";\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            str = str + \" \" + chs[i].id;\n        }\n        return str;\n\t}\n\n\t// --------------------------------------------------------\n\t// Synchronous Cycle Collection algorithm presented in \"Concurrent\n\t// Cycle Collection in Reference Counted Systems\" by David F. Bacon\n\t// and V.T. Rajan.\n\n    color : Color = Color.black;\n    buffered : boolean = false;\n    refCountAdj : number = 0;\n\n\tchildren() : Vertex[] { return this.childrn; }\n\n\tincrement(referrer : Vertex) : boolean {\n\t    return this.incRefCount(referrer);\n\t}\n\n\tdecrement(referrer : Vertex) : void {\n\t    this.decRefCount(referrer);\n\t    if (this.refCount() == 0)\n\t        this.release();\n        else\n            this.possibleRoots();\n\t}\n\n    release() : void {\n        this.color = Color.black;\n        if (!this.buffered)\n            this.free();\n    }\n\n    free() : void {\n        while (this.targets.length > 0)\n            this.decRefCount(this.targets[0]);\n    }\n\n\tpossibleRoots() : void {\n\t    if (this.color != Color.purple) {\n\t        this.color = Color.purple;\n\t        if (!this.buffered) {\n                this.buffered = true;\n                roots.push(this);\n            }\n        }\n\t}\n\n\tstatic collectCycles() : void {\n\t    Vertex.markRoots();\n\t    Vertex.scanRoots();\n\t    Vertex.collectRoots();\n\t}\n\n\tstatic markRoots() : void {\n\t    const newRoots : Vertex[] = [];\n\t    for (let i = 0; i < roots.length; i++) {\n            if (verbose)\n                console.log(\"markRoots \"+roots[i].descr());  // ###\n\t        if (roots[i].color == Color.purple) {\n\t            roots[i].markGray();\n\t            newRoots.push(roots[i]);\n            }\n\t        else {\n\t            roots[i].buffered = false;\n\t            if (roots[i].color == Color.black && roots[i].refCount() == 0)\n\t                roots[i].free();\n            }\n\t    }\n\t    roots = newRoots;\n\t}\n\n\tstatic scanRoots() : void {\n\t    for (let i = 0; i < roots.length; i++)\n\t        roots[i].scan();\n\t}\n\n\tstatic collectRoots() : void {\n\t    for (let i = 0; i < roots.length; i++) {\n\t        roots[i].buffered = false;\n\t        roots[i].collectWhite();\n\t    }\n\t    roots = [];\n\t}\n\n\tmarkGray() : void {\n\t    if (this.color != Color.gray) {\n\t        this.color = Color.gray;\n\t        let chs = this.children();\n\t        for (let i = 0; i < chs.length; i++) {\n\t            chs[i].refCountAdj--;\n                if (verbose)\n                    console.log(\"markGray \"+this.descr());\n\t            chs[i].markGray();\n            }\n\t    }\n\t}\n\n\tscan() : void {\n\t    if (verbose)\n            console.log(\"scan \"+this.descr());\n\t    if (this.color == Color.gray) {\n\t        if (this.refCount()+this.refCountAdj > 0)\n\t            this.scanBlack();\n\t        else {\n\t            this.color = Color.white;\n                if (verbose)\n                    console.log(\"scan WHITE \"+this.descr());\n                let chs = this.children();\n                for (let i = 0; i < chs.length; i++)\n                    chs[i].scan();\n\t        }\n\t    }\n\t}\n\n\tscanBlack() : void {\n\t    this.color = Color.black;\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            chs[i].refCountAdj++;\n            if (verbose)\n                console.log(\"scanBlack \"+this.descr());\n            if (chs[i].color != Color.black)\n                chs[i].scanBlack();\n        }\n\t}\n\n\tcollectWhite() : void {\n\t    if (this.color == Color.white && !this.buffered) {\n            if (verbose)\n                console.log(\"collectWhite \"+this.descr());\n\t        this.color = Color.black;\n\t        this.refCountAdj = 0;\n            let chs = this.children();\n            for (let i = 0; i < chs.length; i++)\n                chs[i].collectWhite();\n            this.free();\n\t    }\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Vertex.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Cell } from \"./Cell\";\n//import { StreamLoop } from \"./StreamLoop\";\nimport { Listener } from \"./Listener\";\nimport { Tuple2 } from \"./Tuple2\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\n\nexport class Stream<A> {\n    constructor(vertex? : Vertex) {\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    protected vertex : Vertex;\n    protected listeners : Array<Listener<A>> = [];\n    protected firings : A[] = [];\n\n    /**\n     * Transform the stream's event values according to the supplied function, so the returned\n     * Stream's event values reflect the value of the function applied to the input\n     * Stream's event values.\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"map\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a));\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Transform the stream's event values into the specified constant value.\n     * @param b Constant value.\n     */\n    mapTo<B>(b : B) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"mapTo\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(b);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\n     * in the simultaneous case.\n     * <p>\n     * In the case where two events are simultaneous (i.e. both\n     * within the same transaction), the event from <em>this</em> will take precedence, and\n     * the event from <em>s</em> will be dropped.\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\n     * <p>\n     * The name orElse() is used instead of merge() to make it really clear that care should\n     * be taken, because events can be dropped.\n     */\n    orElse(s : Stream<A>) : Stream<A> {\n        return this.merge(s, (left : A, right: A) => {\n            return left;\n        });\n    }\n\n    private merge_(s : Stream<A>) : Stream<A> {\n        const out = new StreamWithSend<A>();\n        const left = new Vertex(\"merge\", 0, []);\n        left.sources.push(new Source(this.vertex, () => {\n            return this.listen_(left, (a : A) => {\n                    out.send_(a);\n                }, false);\n        }));\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    left,\n                    () => {\n                        left.register(out.vertex);\n                        return () => { left.deregister(out.vertex); }\n                    }\n                ),\n                new Source(\n                    s.vertex,\n                    () => {\n                        return s.listen_(out.vertex, (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                )\n            ]);\n        return out;\n    }\n\n    coalesce__(f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {  // TO DO figure out how to hide this\n        const out = new StreamWithSend<A>();\n        const coalescer = new CoalesceHandler<A>(f, out);\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            coalescer.send_(a);\n                        }, false);\n                    }\n                )\n            ]).concat(toSources(Lambda2_deps(f)));\n        return out;\n    }\n\n    /**\n     * Merge two streams of the same type into one, so that events on either input appear\n     * on the returned stream.\n     * <p>\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\n     * occurring in the same transaction), combine them into one using the specified combining function\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\n     * The event from <em>this</em> will appear at the left input of the combining function, and\n     * the event from <em>s</em> will appear at the right.\n     * @param f Function to combine the values. It may construct FRP logic or use\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    merge(s : Stream<A>, f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {\n        return Transaction.transactionally<Stream<A>>(() => {\n            return this.merge_(s).coalesce__(f);\n        });\n    }\n\n    /**\n     * Return a stream that only outputs events for which the predicate returns true.\n     */\n    filter(f : ((a : A) => boolean) | Lambda1<A,boolean>) : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"filter\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (ff(a))\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events that have present\n     * values, discarding null values.\n     */\n    filterNotNull() : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (a !== null)\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events from the input stream\n     * when the specified cell's value is true.\n     */\n    gate(c : Cell<boolean>) : Stream<A> {\n        return this.snapshot(c, (a : A, pred : boolean) => {\n            return pred ? a : null;\n        }).filterNotNull();\n    }\n\n\t/**\n\t * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\n\t * at the time of the event firing, ignoring the stream's value.\n\t */\n\tsnapshot1<B>(c : Cell<B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"snapshot1\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(c.sampleNoTrans__());\n                        }, false);\n                    }\n                ),\n                new Source(c.getVertex__(), null)\n            ]\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cell at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot<B,C>(c : Cell<B>, f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Stream<C>\n\t{\n        const out = new StreamWithSend<C>(null);\n        const ff = Lambda2_toFunction(f);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, c.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(c.getVertex__(), null)\n            ].concat(toSources(Lambda2_deps(f)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Create a {@link Cell} with the specified initial value, that is updated\n     * by this stream's event values.\n     * <p>\n     * There is an implicit delay: State updates caused by event firings don't become\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\n     * until the following transaction. To put this another way,\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\n     * any state changes from the current transaction.\n     */\n    hold(initValue : A) : Cell<A> {\n        return new Cell<A>(initValue, this);\n\t}\n\n\t/**\n\t * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\n\t */\n\tholdLazy(initValue : Lazy<A>) : Cell<A> {\n\t    return new LazyCell<A>(initValue, this);\n\t}\n\n    /**\n     * Transform an event with a generalized state loop (a Mealy machine). The function\n     * is passed the input and the old state and returns the new state and output value.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    collect<B,S>(initState : S, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        return this.collectLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    collectLazy<B,S>(initState : Lazy<S>, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        const ea = this;\n        return Transaction.transactionally(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                ebs = ea.snapshot(s, f),\n                eb = ebs.map((bs : Tuple2<B,S>) => { return bs.a; }),\n                es_out = ebs.map((bs : Tuple2<B,S>) => { return bs.b; });\n            es.loop(es_out);\n            return eb;\n        });\n    }\n\n    /**\n     * Accumulate on input event, outputting the new state each time.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    accum<S>(initState : S, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        return this.accumLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    accumLazy<S>(initState : Lazy<S>, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        const ea = this;\n        return Transaction.transactionally(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                es_out = ea.snapshot(s, f);\n            es.loop(es_out);\n            return es_out.holdLazy(initState);\n        });\n    }\n\n    /**\n     * Return a stream that outputs only one value: the next event of the\n     * input stream, starting from the transaction in which once() was invoked.\n     */\n    once() : Stream<A> {\n    /*\n        return Transaction.transactionally(() => {\n            const ev = this,\n                out = new StreamWithSend<A>();\n            let la : () => void = null;\n            la = ev.listen_(out.vertex, (a : A) => {\n                if (la !== null) {\n                    out.send_(a);\n                    la();\n                    la = null;\n                }\n            }, false);\n            return out;\n        });\n        */\n        // We can't use the implementation above, beacuse deregistering\n        // listeners triggers the exception\n        // \"send() was invoked before listeners were registered\"\n        // We can revisit this another time. For now we will use the less\n        // efficient implementation below.\n        const me = this;\n        return Transaction.transactionally(() => me.gate(me.mapTo(false).hold(true)));\n    }\n\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.transactionally<() => void>(() => {\n            return this.listen_(Vertex.NULL, h, false);\n        });\n    }\n\n    listen_(target : Vertex,\n            h : (a : A) => void,\n            suppressEarlierFirings : boolean) : () => void {\n        if (this.vertex.register(target))\n            Transaction.currentTransaction.requestRegen();\n        const listener = new Listener<A>(h, target);\n        this.listeners.push(listener);\n        if (!suppressEarlierFirings && this.firings.length != 0) {\n            const firings = this.firings.slice();\n            Transaction.currentTransaction.prioritized(target, () => {\n                // Anything sent already in this transaction must be sent now so that\n                // there's no order dependency between send and listen.\n                for (let i = 0; i < firings.length; i++)\n                    h(firings[i]);\n            });\n        }\n        return () => {\n            let removed = false;\n            for (let i = 0; i < this.listeners.length; i++) {\n                if (this.listeners[i] == listener) {\n                    this.listeners.splice(i, 1);\n                    removed = true;\n                    break;\n                }\n            }\n            if (removed)\n                this.vertex.deregister(target);\n        };\n    }\n}\n\nexport class StreamWithSend<A> extends Stream<A> {\n    constructor(vertex? : Vertex) {\n        super(vertex);\n    }\n\n    setVertex__(vertex : Vertex) {  // TO DO figure out how to hide this\n        this.vertex = vertex;\n    }\n\n    send_(a : A) : void {\n        // We throw this error if we send into FRP logic that has been constructed\n        // but nothing is listening to it yet. We need to do it this way because\n        // it's the only way to manage memory in a language with no finalizers.\n        if (this.vertex.refCount() == 0)\n            throw new Error(\"send() was invoked before listeners were registered\");\n\t\tif (this.firings.length == 0)\n\t\t\tTransaction.currentTransaction.last(() => {\n\t\t\t    this.firings = [];\n            });\n\t\tthis.firings.push(a);\n\t\tconst listeners = this.listeners.slice();\n        for (let i = 0; i < listeners.length; i++) {\n            const h = listeners[i].h;\n            Transaction.currentTransaction.prioritized(listeners[i].target, () => {\n                Transaction.currentTransaction.inCallback++;\n                try {\n                    h(a);\n                    Transaction.currentTransaction.inCallback--;\n                }\n                catch (err) {\n                    Transaction.currentTransaction.inCallback--;\n                    throw err;\n                }\n            });\n        }\n    }\n}\n\n/**\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\n */\nexport class StreamLoop<A> extends StreamWithSend<A> {\n    assigned__ : boolean = false;  // to do: Figure out how to hide this\n\n    constructor()\n    {\n        super();\n        this.vertex.name = \"StreamLoop\";\n    \tif (Transaction.currentTransaction === null)\n    \t    throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\n    }\n\n    /**\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(sa_out : Stream<A>) : void {\n        if (this.assigned__)\n            throw new Error(\"StreamLoop looped more than once\");\n        this.assigned__ = true;\n        this.vertex.addSource(\n            new Source(\n                sa_out.getVertex__(),\n                () => {\n                    return sa_out.listen_(this.vertex, (a : A) => {\n                        this.send_(a);\n                    }, false);\n                }\n            )\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Stream.ts","import {Vertex} from './Vertex';\nimport {Set, PriorityQueue} from 'typescript-collections';\n\nexport class Entry\n{\n  constructor(rank: Vertex, action: () => void)\n  {\n    this.rank = rank;\n    this.action = action;\n    this.seq = Entry.nextSeq++;\n  }\n\n  private static nextSeq: number = 0;\n  rank: Vertex;\n  action: () => void;\n  seq: number;\n\n  toString(): string\n  {\n    return this.seq.toString();\n  }\n}\n\nexport class Transaction\n{\n  public static currentTransaction: Transaction = null;\n  private static onStartHooks: (() => void)[] = [];\n  private static runningOnStartHooks: boolean = false;\n\n  constructor() {}\n\n  inCallback: number = 0;\n  private toRegen: boolean = false;\n\n  requestRegen(): void\n  {\n    this.toRegen = true;\n  }\n\n  prioritizedQ: PriorityQueue<Entry> = new PriorityQueue<Entry>((a, b) =>\n  {\n    // Note: Low priority numbers are treated as \"greater\" according to this\n    // comparison, so that the lowest numbers are highest priority and go first.\n    if (a.rank.rank < b.rank.rank) return 1;\n    if (a.rank.rank > b.rank.rank) return -1;\n    if (a.seq < b.seq) return 1;\n    if (a.seq > b.seq) return -1;\n    return 0;\n  });\n  private entries: Set<Entry> = new Set<Entry>((a) => a.toString());\n  private lastQ: Array<() => void> = [];\n  private postQ: Array<() => void> = null;\n\n  prioritized(target: Vertex, f: () => void): void\n  {\n    const e = new Entry(target, f);\n    this.prioritizedQ.enqueue(e);\n    this.entries.add(e);\n  }\n\n  last(h: () => void): void\n  {\n    this.lastQ.push(h);\n  }\n\n  /**\n   * Add an action to run after all last() actions.\n   */\n  post(childIx: number, action: () => void): void\n  {\n    if (this.postQ == null)\n      this.postQ = [];\n    // If an entry exists already, combine the old one with the new one.\n    while (this.postQ.length <= childIx)\n      this.postQ.push(null);\n    const existing = this.postQ[childIx],\n      neu =\n        existing === null ? action\n          : () =>\n        {\n          existing();\n          action();\n        };\n    this.postQ[childIx] = neu;\n  }\n\n  // If the priority queue has entries in it when we modify any of the nodes'\n  // ranks, then we need to re-generate it to make sure it's up-to-date.\n  private checkRegen(): void\n  {\n    if (this.toRegen)\n    {\n      this.toRegen = false;\n      this.prioritizedQ.clear();\n      const es = this.entries.toArray();\n      for (let i: number = 0; i < es.length; i++)\n        this.prioritizedQ.enqueue(es[i]);\n    }\n  }\n\n  public isActive() : boolean\n  {\n    return Transaction.currentTransaction ? true : false;\n  }\n\n  close(): void\n  {\n    while (true)\n    {\n      this.checkRegen();\n      if (this.prioritizedQ.isEmpty()) break;\n      const e = this.prioritizedQ.dequeue();\n      this.entries.remove(e);\n      e.action();\n    }\n    for (let i = 0; i < this.lastQ.length; i++)\n      this.lastQ[i]();\n    this.lastQ = [];\n    if (this.postQ != null)\n    {\n      for (let i = 0; i < this.postQ.length; i++)\n      {\n        if (this.postQ[i] != null)\n        {\n          const parent = Transaction.currentTransaction;\n          try\n          {\n            if (i > 0)\n            {\n              Transaction.currentTransaction = new Transaction();\n              try\n              {\n                this.postQ[i]();\n                Transaction.currentTransaction.close();\n              }\n              catch (err)\n              {\n                Transaction.currentTransaction.close();\n                throw err;\n              }\n            }\n            else\n            {\n              Transaction.currentTransaction = null;\n              this.postQ[i]();\n            }\n            Transaction.currentTransaction = parent;\n          }\n          catch (err)\n          {\n            Transaction.currentTransaction = parent;\n            throw err;\n          }\n        }\n      }\n      this.postQ = null;\n    }\n  }\n\n  /**\n   * Add a runnable that will be executed whenever a transaction is started.\n   * That runnable may start transactions itself, which will not cause the\n   * hooks to be run recursively.\n   *\n   * The main use case of this is the implementation of a time/alarm system.\n   */\n  static onStart(r: () => void): void\n  {\n    Transaction.onStartHooks.push(r);\n  }\n\n  public static transactionally<A>(f: () => A): A\n  {\n    const transWas: Transaction = Transaction.currentTransaction;\n    if (transWas === null)\n    {\n      if (!Transaction.runningOnStartHooks)\n      {\n        Transaction.runningOnStartHooks = true;\n        try\n        {\n          for (let i = 0; i < Transaction.onStartHooks.length; i++)\n            Transaction.onStartHooks[i]();\n        }\n        finally\n        {\n          Transaction.runningOnStartHooks = false;\n        }\n      }\n      Transaction.currentTransaction = new Transaction();\n    }\n    try\n    {\n      const a: A = f();\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      return a;\n    }\n    catch (err)\n    {\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      throw err;\n    }\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Transaction.ts","\"use strict\";\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require('./arrays');\nexports.arrays = _arrays;\nvar Bag_1 = require('./Bag');\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require('./BSTree');\nexports.BSTree = BSTree_1.default;\nvar Dictionary_1 = require('./Dictionary');\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require('./Heap');\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require('./LinkedDictionary');\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require('./LinkedList');\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require('./MultiDictionary');\nexports.MultiDictionary = MultiDictionary_1.default;\nvar Queue_1 = require('./Queue');\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require('./PriorityQueue');\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require('./Set');\nexports.Set = Set_1.default;\nvar Stack_1 = require('./Stack');\nexports.Stack = Stack_1.default;\nvar _util = require('./util');\nexports.util = _util;\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/index.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/arrays.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n* Joins all the properies of the object using the provided join string\n*/\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (!isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/util.js\n// module id = 7\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar Set_1 = require('./Set');\nvar Bag = (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n    * Adds nCopies of the specified object to this bag.\n    * @param {Object} element element to add.\n    * @param {number=} nCopies the number of copies to add, if this argument is\n    * undefined 1 copy is added.\n    * @return {boolean} true unless element is undefined.\n    */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n    * Counts the number of copies of the specified object in this bag.\n    * @param {Object} element the object to search for..\n    * @return {number} the number of copies of the object, 0 if not found\n    */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n    * Removes nCopies of the specified object to this bag.\n    * If the number of copies to remove is greater than the actual number\n    * of copies in the Bag, all copies are removed.\n    * @param {Object} element element to remove.\n    * @param {number=} nCopies the number of copies to remove, if this argument is\n    * undefined 1 copy is removed.\n    * @return {boolean} true if at least 1 element was removed.\n    */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Bag; // End of bag\n//# sourceMappingURL=Bag.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Bag.js\n// module id = 8\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary = (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this dictionary.\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n    * Removes all mappings from this dictionary.\n    * @this {collections.Dictionary}\n    */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Dictionary; // End of dictionary\n//# sourceMappingURL=Dictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Dictionary.js\n// module id = 9\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar Dictionary_1 = require('./Dictionary');\nvar Set = (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives a onject and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersecion between this an another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this an another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this an another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Set; // end of Set\n//# sourceMappingURL=Set.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Set.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Queue_1 = require('./Queue');\nvar BSTree = (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTree(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTree.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTree.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTree.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTree.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTree.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTree.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.minimum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.maximum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTree.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTree.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTree.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.searchNode = function (node, element) {\n        var cmp = null;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        while (!queue.isEmpty()) {\n            node = queue.dequeue();\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.minimumAux = function (node) {\n        while (node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.maximumAux = function (node) {\n        while (node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n      * @private\n      */\n    BSTree.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTree.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        var cmp = null;\n        while (position !== null) {\n            cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTree;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/BSTree.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Queue = (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Queue; // End of queue\n//# sourceMappingURL=Queue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Queue.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar LinkedList = (function () {\n    /**\n    * Creates an empty Linked List.\n    * @class A linked list is a data structure consisting of a group of nodes\n    * which together represent a sequence.\n    * @constructor\n    */\n    function LinkedList() {\n        /**\n        * First node in the list\n        * @type {Object}\n        * @private\n        */\n        this.firstNode = null;\n        /**\n        * Last node in the list\n        * @type {Object}\n        * @private\n        */\n        this.lastNode = null;\n        /**\n        * Number of elements in the list\n        * @type {number}\n        * @private\n        */\n        this.nElements = 0;\n    }\n    /**\n    * Adds an element to this list.\n    * @param {Object} item element to be added.\n    * @param {number=} index optional index to add the element. If no index is specified\n    * the element is added to the end of this list.\n    * @return {boolean} true if the element was added or false if the index is invalid\n    * or if the element is undefined.\n    */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n    * Returns the first element in this list.\n    * @return {*} the first element of the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n    * Returns the last element in this list.\n    * @return {*} the last element in the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n       * Returns true if this list contains the specified element.\n       * <p>If the elements inside the list are\n       * not comparable with the === operator a custom equals function should be\n       * provided to perform searches, the function must receive two arguments and\n       * return true if they are equal, false otherwise. Example:</p>\n       *\n       * <pre>\n       * const petsAreEqualByName = function(pet1, pet2) {\n       *  return pet1.name === pet2.name;\n       * }\n       * </pre>\n       * @param {Object} item element to search for.\n       * @param {function(Object,Object):boolean=} equalsFunction Optional\n       * function used to check if two elements are equal.\n       * @return {boolean} true if this list contains the specified element, false\n       * otherwise.\n       */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (currentNode === this.firstNode) {\n                    this.firstNode = this.firstNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n    * @private\n    */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedList; // End of linked list\n//# sourceMappingURL=LinkedList.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/LinkedList.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar collections = require('./util');\nvar arrays = require('./arrays');\nvar Heap = (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements od the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return undefined;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Heap.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Dictionary_1 = require('./Dictionary');\nvar util = require('./util');\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\nvar LinkedDictionary = (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        _super.call(this, toStrFunction);\n        this.head = new LinkedDictionaryPair(null, null);\n        this.tail = new LinkedDictionaryPair(null, null);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n    * Removes all mappings from this LinkedDictionary.\n    * @this {collections.LinkedDictionary}\n    */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this LinkedDictionary. It is done in the order of insertion\n    * into the LinkedDictionary\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (crawlNode.next != null) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedDictionary; // End of LinkedDictionary\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/LinkedDictionary.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar arrays = require('./arrays');\nvar MultiDictionary = (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n       *  return pet.name;\n       * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n       *  return pet1.age===pet2.age;\n       * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n    * Returns an array holding the values to which this dictionary maps\n    * the specified key.\n    * Returns an empty array if this dictionary contains no mappings for this key.\n    * @param {Object} key key whose associated values are to be returned.\n    * @return {Array} an array holding the values to which this dictionary maps\n    * the specified key.\n    */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        if (!this.containsKey(key)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        var array = this.dict.getValue(key);\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MultiDictionary; // end of multi dictionary\n//# sourceMappingURL=MultiDictionary.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/MultiDictionary.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar util = require('./util');\nvar Heap_1 = require('./Heap');\nvar PriorityQueue = (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = PriorityQueue; // end of priority queue\n//# sourceMappingURL=PriorityQueue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/PriorityQueue.js\n// module id = 17\n// module chunks = 0","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Stack = (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Stack; // End of stack\n//# sourceMappingURL=Stack.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/typescript-collections/dist/lib/Stack.js\n// module id = 18\n// module chunks = 0","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         toSources } from \"./Lambda\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamWithSend } from \"./Stream\";\nimport { Vertex } from \"./Vertex\";\n\nexport class CoalesceHandler<A>\n{\n\tconstructor(f : ((l : A, r : A) => A) | Lambda2<A,A,A>, out : StreamWithSend<A>)\n\t{\n\t    this.f = Lambda2_toFunction(f);\n\t    this.out = out;\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(\n            toSources(Lambda2_deps(f)));\n        this.accumValid = false;\n    }\n\tprivate f : (l : A, r : A) => A;\n\tprivate out : StreamWithSend<A>;\n\tprivate accumValid : boolean;\n    private accum : A;\n    private verbose : boolean;\n    send_(a : A) {\n        if (this.accumValid)\n            this.accum = this.f(this.accum, a);\n        else {\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), () => {\n                this.out.send_(this.accum);\n                this.accumValid = false;\n                this.accum = null;\n            });\n            this.accum = a;\n            this.accumValid = true;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CoalesceHandler.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { Lazy } from \"./Lazy\";\nimport { Listener } from \"./Listener\";\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { Operational } from \"./Operational\";\n\nclass LazySample<A> {\n    constructor(cell : Cell<A>) {\n        this.cell = cell;\n    }\n    cell : Cell<A>;\n    hasValue : boolean = false;\n    value : A = null;\n}\n\nclass ApplyState<A,B> {\n    constructor() {}\n    f : (a : A) => B = null;\n    f_present : boolean = false;\n    a : A = null;\n    a_present : boolean = false;\n}\n\nexport class Cell<A> {\n\tprivate str : Stream<A>;\n\tprotected value : A;\n\tprotected valueUpdate : A;\n\tprivate cleanup : () => void;\n\tprotected lazyInitValue : Lazy<A>;  // Used by LazyCell\n\tprivate vertex : Vertex;\n\n    constructor(initValue : A, str? : Stream<A>) {\n        this.value = initValue;\n        if (!str) {\n            this.str = new Stream<A>();\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\n        }\n        else\n            Transaction.transactionally(() => this.setStream(str));\n    }\n\n    protected setStream(str : Stream<A>) {\n        this.str = str;\n        const me = this,\n              src = new Source(\n                str.getVertex__(),\n                () => {\n                    return str.listen_(me.vertex, (a : A) => {\n                        if (me.valueUpdate == null) {\n                            Transaction.currentTransaction.last(() => {\n                                me.value = me.valueUpdate;\n                                me.lazyInitValue = null;\n                                me.valueUpdate = null;\n                            });\n                        }\n                        me.valueUpdate = a;\n                    }, false);\n                }\n            );\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\n        // We do a trick here of registering the source for the duration of the current\n        // transaction so that we are guaranteed to catch any stream events that\n        // occur in the same transaction.\n        this.vertex.register(Vertex.NULL);\n        Transaction.currentTransaction.last(() => {\n            this.vertex.deregister(Vertex.NULL);\n        });\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    getStream__() : Stream<A> {  // TO DO: Figure out how to hide this\n        return this.str;\n    }\n\n    /**\n     * Sample the cell's current value.\n     * <p>\n     * It may be used inside the functions passed to primitives that apply them to {@link Stream}s,\n     * including {@link Stream#map(Lambda1)} in which case it is equivalent to snapshotting the cell,\n     * {@link Stream#snapshot(Cell, Lambda2)}, {@link Stream#filter(Lambda1)} and\n     * {@link Stream#merge(Stream, Lambda2)}.\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\n     * miss any updates, but in many circumstances it makes sense.\n     */\n    sample() : A {\n        return Transaction.transactionally(() => { return this.sampleNoTrans__(); });\n    }\n\n    sampleNoTrans__() : A {  // TO DO figure out how to hide this\n        return this.value;\n    }\n\n    /**\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\n     */\n    sampleLazy() : Lazy<A> {\n        const me = this;\n        return Transaction.transactionally(() => me.sampleLazyNoTrans__());\n    }\n\n    sampleLazyNoTrans__() : Lazy<A> {  // TO DO figure out how to hide this\n        const me = this,\n            s = new LazySample<A>(me);\n        Transaction.currentTransaction.last(() => {\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\n            s.hasValue = true;\n            s.cell = null;\n        });\n        return new Lazy<A>(() => {\n            if (s.hasValue)\n                return s.value;\n            else\n                return s.cell.sample();\n        });\n    }\n\n    /**\n     * Transform the cell's value according to the supplied function, so the returned Cell\n     * always reflects the value of the function applied to the input Cell's value.\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Cell<B> {\n        const c = this;\n        return Transaction.transactionally(() =>\n            Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)))\n        );\n    }\n\n\t/**\n\t * Lift a binary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift<B,C>(b : Cell<B>,\n\t          fn0 : ((a : A, b : B) => C) |\n\t                Lambda2<A,B,C>) : Cell<C> {\n        const fn = Lambda2_toFunction(fn0),\n            cf = this.map((aa : A) => (bb : B) => fn(aa, bb));\n        return Cell.apply(cf, b,\n            toSources(Lambda2_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a ternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift3<B,C,D>(b : Cell<B>, c : Cell<C>,\n\t             fn0 : ((a : A, b : B, c : C) => D) |\n\t                   Lambda3<A,B,C,D>) : Cell<D> {\n        const fn = Lambda3_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => D =\n                 (aa : A) => (bb : B) => (cc : C) => fn(aa, bb, cc),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply<B, (c : C) => D>(cf, b),\n                   c,\n                   toSources(Lambda3_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a quaternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\n\t               fn0 : ((a : A, b : B, c : C, d : D) => E) |\n\t                     Lambda4<A,B,C,D,E>) : Cell<E> {\n        const fn = Lambda4_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => E =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => fn(aa, bb, cc, dd),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply<B, (c : C) => (d : D) => E>(cf, b),\n                       c),\n                   d,\n                   toSources(Lambda4_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\n\t                 fn0 : ((a : A, b : B, c : C, d : D, e : E) => F) |\n\t                       Lambda5<A,B,C,D,E,F>) : Cell<F> {\n        const fn = Lambda5_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => F =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => fn(aa, bb, cc, dd, ee),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply<B, (c : C) => (d : D) => (e : E) => F>(cf, b),\n                           c),\n                       d),\n                   e,\n                   toSources(Lambda5_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\n\t                   fn0 : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) |\n\t                         Lambda6<A,B,C,D,E,F,G>) : Cell<G> {\n        const fn = Lambda6_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => G =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => fn(aa, bb, cc, dd, ee, ff),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply(\n                               Cell.apply<B, (c : C) => (d : D) => (e : E) => (f : F) => G>(cf, b),\n                               c),\n                           d),\n                       e),\n                   f,\n                   toSources(Lambda6_deps(fn0)));\n\t}\n\n\t/**\n\t * Apply a value inside a cell to a function inside a cell. This is the\n\t * primitive for all function lifting.\n\t */\n\tstatic apply<A,B>(cf : Cell<(a : A) => B>, ca : Cell<A>, sources? : Source[]) : Cell<B> {\n    \treturn Transaction.transactionally(() => {\n    \t    const state = new ApplyState<A,B>(),\n                out = new StreamWithSend<B>(),\n                cf_value = Operational.value(cf),\n                ca_value = Operational.value(ca),\n                src1 = new Source(\n                        cf_value.getVertex__(),\n                        () => {\n                            return cf_value.listen_(out.getVertex__(), (f : (a : A) => B) => {\n                                state.f = f;\n                                state.f_present = true;\n                                if (state.a_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    ),\n                src2 = new Source(\n                        ca_value.getVertex__(),\n                        () => {\n                            return ca_value.listen_(out.getVertex__(), (a : A) => {\n                                state.a = a;\n                                state.a_present = true;\n                                if (state.f_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    );\n            out.setVertex__(new Vertex(\"apply\", 0,\n                [src1, src2].concat(sources ? sources : [])\n            ));\n            return out.coalesce__((l, r) => r).holdLazy(new Lazy<B>(() =>\n                    cf.sampleNoTrans__()(ca.sampleNoTrans__())\n                ));\n        });\n\t}\n\n\t/**\n\t * Unwrap a cell inside another cell to give a time-varying cell implementation.\n\t */\n    static switchC<A>(cca : Cell<Cell<A>>) : Cell<A> {\n\t    return Transaction.transactionally(() => {\n            const za = cca.sampleLazy().map((ba : Cell<A>) => ba.sample()),\n                out = new StreamWithSend<A>();\n            let last_ca : Cell<A> = null;\n            const cca_value = Operational.value(cca),\n                  src = new Source(\n                        cca_value.getVertex__(),\n                        () => {\n                            let kill2 : () => void = last_ca === null ? null :\n                                    Operational.value(last_ca).listen_(out.getVertex__(),\n                                        (a : A) => out.send_(a), false);\n                            const kill1 = cca_value.listen_(out.getVertex__(), (ca : Cell<A>) => {\n                                // Note: If any switch takes place during a transaction, then the\n                                // coalesce__() below will always cause a sample to be fetched\n                                // from the one we just switched to. So anything from the old input cell\n                                // that might have happened during this transaction will be suppressed.\n                                last_ca = ca;\n                                if (kill2 !== null)\n                                    kill2();\n                                kill2 = Operational.value(ca).listen_(out.getVertex__(),\n                                    (a : A) => out.send_(a), false);\n                            }, false);\n                            return () => { kill1(); kill2(); };\n                        }\n                    );\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\n            return out.coalesce__((l, r) => r).holdLazy(za);\n        });\n\t}\n\n\t/**\n\t * Unwrap a stream inside a cell to give a time-varying stream implementation.\n\t */\n\tstatic switchS<A>(csa : Cell<Stream<A>>) : Stream<A> {\n\t    return Transaction.transactionally(() => {\n            const out = new StreamWithSend<A>(),\n                  h2 = (a : A) => {\n                          out.send_(a);\n                      },\n                  src = new Source(\n                      csa.getVertex__(),\n                      () => {\n                          let kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\n                          const kill1 = csa.getStream__().listen_(out.getVertex__(), (sa : Stream<A>) => {\n                              kill2();\n                              kill2 = sa.listen_(out.getVertex__(), h2, true);\n                          }, false);\n                          return () => { kill1(); kill2(); };\n                      }\n                  );\n\t        out.setVertex__(new Vertex(\"switchS\", 0, [src]));\n\t        return out;\n\t    });\n    }\n\n\t/**\n\t * Listen for updates to the value of this cell. This is the observer pattern. The\n\t * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\n\t * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\n\t * the world of I/O and for FRP.\n\t * @param h The handler to execute when there's a new value.\n\t *   You should make no assumptions about what thread you are called on, and the\n\t *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\n\t *   or {@link StreamSink#send(Object)} in the handler.\n\t *   An exception will be thrown, because you are not meant to use this to create\n\t *   your own primitives.\n     */\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.transactionally(() => {\n            return Operational.value(this).listen(h);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Cell.ts","/**\n * A representation for a value that may not be available until the current\n * transaction is closed.\n */\nexport class Lazy<A> {\n    constructor(f : () => A) {\n        this.f = f;\n    }\n\n    private f : () => A;\n\n    /**\n     * Get the value if available, throwing an exception if not.\n     * In the general case this should only be used in subsequent transactions to\n     * when the Lazy was obtained.\n     */\n    get() : A {\n        return this.f();\n    }\n\n    /**\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\n     * the value of the function applied to the input Lazy's value.\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : (a : A) => B) {\n        return new Lazy<B>(() => { return f(this.f()); });\n    }\n\n\t/**\n\t * Lift a binary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift<B,C>(b : Lazy<B>, f : (a : A, b : B) => C) : Lazy<C> {\n        return new Lazy<C>(() => { return f(this.f(), b.f()); });\n    }\n\n\t/**\n\t * Lift a ternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift3<B,C,D>(b : Lazy<B>, c : Lazy<C>, f : (a : A, b : B, c : C) => D) : Lazy<D> {\n        return new Lazy<D>(() => { return f(this.f(), b.f(), c.f()); });\n    }\n\n\t/**\n\t * Lift a quaternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift4<B,C,D,E>(b : Lazy<B>, c : Lazy<C>, d : Lazy<D>, f : (a : A, b : B, c : C, d : D) => E) : Lazy<E> {\n        return new Lazy<E>(() => { return f(this.f(), b.f(), c.f(), d.f()); });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Lazy.ts","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Transaction } from \"./Transaction\";\nimport { Unit } from \"./Unit\";\nimport { Source, Vertex } from \"./Vertex\";\n\nexport class Operational {\n    /**\n     * A stream that gives the updates/steps for a {@link Cell}.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static updates<A>(c : Cell<A>) : Stream<A> {\n        /*  Don't think this is needed\n        const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"updates\", 0, [\n                new Source(\n                    c.getStream__().getVertex__(),\n                    () => {\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                ),\n                new Source(\n                    c.getVertex__(),\n                    () => {\n                        return () => { };\n                    }\n                )\n            ]\n        ));\n        return out;\n        */\n        return c.getStream__();\n    }\n\n    /**\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\n     * firing for each update/step of the cell's value.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static value<A>(c : Cell<A>) : Stream<A> {\n        return Transaction.transactionally(() => {\n            const sSpark = new StreamWithSend<Unit>();\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), () => {\n                sSpark.send_(Unit.UNIT);\n            });\n            const sInitial = sSpark.snapshot1(c);\n            return Operational.updates(c).orElse(sInitial);\n        });\n    }\n\n\t/**\n\t * Push each event onto a new transaction guaranteed to come before the next externally\n\t * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\n\t */\n\tstatic defer<A>(s : Stream<A>) : Stream<A> {\n\t    return Operational.split<A>(s.map((a : A) => {\n\t        return [a];\n\t    }));\n    }\n\n\t/**\n\t * Push each event in the list onto a newly created transaction guaranteed\n\t * to come before the next externally initiated transaction. Note that the semantics\n\t * are such that two different invocations of split() can put events into the same\n\t * new transaction, so the resulting stream's events could be simultaneous with\n\t * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\n\t */\n\tstatic split<A>(s : Stream<Array<A>>) : Stream<A> {\n\t    const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"split\", 0, [\n                new Source(\n                    s.getVertex__(),\n                    () => {\n                        return s.listen_(out.getVertex__(), (as : Array<A>) => {\n                            for (let i = 0; i < as.length; i++) {\n                                Transaction.currentTransaction.post(i, () => {\n                                    Transaction.transactionally(() => {\n                                        out.send_(as[i]);\n                                    });\n                                });\n                            }\n                        }, false);\n                    }\n                )\n            ]\n        ));\n        return out;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Operational.ts","export class Unit {\n    static UNIT : Unit = new Unit();\n    constructor() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Unit.ts","import { Source, Vertex } from \"./Vertex\";\n\nexport class Listener<A> {\n    constructor(h : (a : A) => void, target : Vertex) {\n        this.h = h;\n        this.target = target;\n    }\n    h : (a : A) => void;\n    target : Vertex;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Listener.ts","import { Lazy } from \"./Lazy\";\nimport { Cell } from \"./Cell\";\nimport { Stream } from \"./Stream\";\nimport { Transaction } from \"./Transaction\";\n\nexport class LazyCell<A> extends Cell<A> {\n    constructor(lazyInitValue : Lazy<A>, str? : Stream<A>) {\n        super(null, null);\n        Transaction.transactionally(() => {\n            if (str)\n                this.setStream(str);\n            this.lazyInitValue = lazyInitValue;\n        });\n    }\n\n    sampleNoTrans__() : A {  // Override\n        if (this.value == null && this.lazyInitValue != null) {\n            this.value = this.lazyInitValue.get();\n            this.lazyInitValue = null;\n        }\n        return this.value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/LazyCell.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { StreamWithSend } from \"./Stream\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A stream that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\n * should downcast to {@link Stream}.\n */\nexport class StreamSink<A> extends StreamWithSend<A> {\n    constructor(f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n        super();\n        if (!f)\n            f = <(l : A, r : A) => A>((l : A, r : A) => {\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\n            });\n        this.coalescer = new CoalesceHandler<A>(f, this);\n    }\n\n    private coalescer : CoalesceHandler<A>;\n\n    send(a : A) : void {\n        Transaction.transactionally<void>(\n            () => {\n                if (Transaction.currentTransaction.inCallback > 0)\n                    throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\n                this.coalescer.send_(a);\n            }\n        )\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/StreamSink.ts","import { Cell } from \"./Cell\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamLoop } from \"./Stream\";\n\n/**\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\n */\nexport class CellLoop<A> extends LazyCell<A> {\n    constructor() {\n    \tsuper(null, new StreamLoop<A>());\n    }\n\n    /**\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(a_out : Cell<A>) : void {\n        const me = this;\n        Transaction.transactionally(() => {\n            (<StreamLoop<A>>me.getStream__()).loop(a_out.getStream__());\n            me.lazyInitValue = a_out.sampleLazy();\n        });\n    }\n\n    sampleNoTrans__() : A\n    {\n        if (!(<StreamLoop<A>>this.getStream__()).assigned__)\n            throw new Error(\"CellLoop sampled before it was looped\");\n        return super.sampleNoTrans__();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CellLoop.ts","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { Cell } from \"./Cell\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A cell that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\n * should downcast to {@link Cell}.\n */\nexport class CellSink<A> extends Cell<A> {\n    /**\n     * Construct a writable cell with the specified initial value. If multiple values are\n     * sent in the same transaction, the specified function is used to combine them.\n     *\n     * If the function is not supplied, then an exception will be thrown in this case.\n     */\n    constructor(initValue : A, f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n    \tsuper(initValue, new StreamSink<A>(f));\n    }\n\n    /**\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\n     * You are not meant to use this to define your own primitives.\n     * @param a Value to push into the cell.\n     */\n    send(a : A) : void {\n        (<StreamSink<A>>this.getStream__()).send(a);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/CellSink.ts","export class Tuple2<A,B> {\n    constructor(a : A, b : B) {\n        this.a = a;\n        this.b = b;\n    }\n    a : A;\n    b : B;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/Tuple2.ts","import { Vertex, Source } from \"./Vertex\";\nimport { BSTree } from 'typescript-collections';\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Cell } from \"./Cell\";\nimport { CellSink } from \"./CellSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * An interface for implementations of FRP timer systems.\n */\nexport abstract class TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    abstract setTimer(t : number, callback : () => void) : () => void;\n\n    /**\n     * Return the current clock time.\n     */\n    abstract now() : number;\n}\n\nlet nextSeq : number = 0;\n\nclass Event {\n    constructor(t : number, sAlarm : StreamWithSend<number>) {\n        this.t = t;\n        this.sAlarm = sAlarm;\n        this.seq = ++nextSeq;\n    }\n    t : number;\n    sAlarm : StreamWithSend<number>;\n    seq : number;  // Used to guarantee uniqueness\n}\n\nexport class TimerSystem {\n    constructor(impl : TimerSystemImpl) {\n        Transaction.transactionally(() => {\n            this.impl = impl;\n            const timeSnk = new CellSink<number>(impl.now());\n            this.time = timeSnk;\n            // A dummy listener to time to keep it alive even when there are no other listeners.\n            this.time.listen((t : number) => { });\n            Transaction.onStart(() => {\n                const t = impl.now();\n                // Pop and execute all events earlier than or equal to t (the current time).\n                while (true) {\n                    let ev : Event = null;\n                    if (!this.eventQueue.isEmpty()) {\n                        let mev = this.eventQueue.minimum();\n                        if (mev.t <= t) {\n                            ev = mev;\n                            // TO DO: Detect infinite loops!\n                            //this.eventQueue.remove(mev);\n                        }\n                    }\n                    if (ev != null) {\n                        timeSnk.send(ev.t);\n                        Transaction.transactionally(() => ev.sAlarm.send_(ev.t));\n                    }\n                    else\n                        break;\n                }\n                timeSnk.send(t);\n            });\n        });\n    }\n\n    private impl : TimerSystemImpl;\n\n    /**\n     * A cell giving the current clock time.\n     */\n    time : Cell<number>;\n\n    private eventQueue : BSTree<Event> = new BSTree<Event>((a, b) => {\n        if (a.t < b.t) return -1;\n        if (a.t > b.t) return 1;\n        if (a.seq < b.seq) return -1;\n        if (a.seq > b.seq) return 1;\n        return 0;\n    });\n\n    /**\n     * A timer that fires at the specified time, which can be null, meaning\n     * that the alarm is not set.\n     */\n    at(tAlarm : Cell<number>) : Stream<number> {\n        let current : Event = null,\n            cancelCurrent : () => void = null,\n            active : boolean = false,\n            tAl : number = null,\n            sampled : boolean = false;\n        const sAlarm = new StreamWithSend<number>(null),\n            updateTimer = () => {\n                if (cancelCurrent !== null) {\n                    cancelCurrent();\n                    this.eventQueue.remove(current);\n                }\n                cancelCurrent = null;\n                current = null;\n                if (active) {\n                    if (!sampled) {\n                        sampled = true;\n                        tAl = tAlarm.sampleNoTrans__();\n                    }\n                    if (tAl !== null) {\n                        current = new Event(tAl, sAlarm);\n                        this.eventQueue.add(current);\n                        cancelCurrent = this.impl.setTimer(tAl, () => {\n                                    // Open and close a transaction to trigger queued\n                                    // events to run.\n                                    Transaction.transactionally(() => {});\n                                });\n                    }\n                }\n            };\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\n                new Source(\n                    tAlarm.getVertex__(),\n                    () => {\n                        active = true;\n                        sampled = false;\n                        Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\n                        const kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), (oAlarm : number) => {\n                            tAl = oAlarm;\n                            sampled = true;\n                            updateTimer();\n                        }, false);\n                        return () => {\n                            active = false;\n                            updateTimer();\n                            kill();\n                        };\n                    }\n                )\n            ]\n        ));\n        return sAlarm;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/TimerSystem.ts","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using seconds as the time unit.\n */\nexport class SecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new SecondsTimerSystemImpl());\n    }\n}\n\nclass SecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, (t - this.now()) * 1000);\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now() * 0.001;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/SecondsTimerSystem.ts","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using milliseconds as the time unit.\n */\nexport class MillisecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new MillisecondsTimerSystemImpl());\n    }\n}\n\nclass MillisecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, t - this.now());\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/MillisecondsTimerSystem.ts","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Vertex, Source } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\n\nexport class IOAction {\n    /*!\n     * Convert a function that performs asynchronous I/O taking input A\n     * and returning a value of type B into an I/O action of type\n     * (sa : Stream<A>) => Stream<B>\n     */\n    static fromAsync<A,B>(performIO : (a : A, result : (b : B) => void) => void)\n            : (sa : Stream<A>) => Stream<B> {\n        return (sa : Stream<A>) => {\n            const out = new StreamWithSend<B>(null);\n            out.setVertex__(new Vertex(\"map\", 0, [\n                    new Source(\n                        sa.getVertex__(),\n                        () => {\n                            return sa.listen_(out.getVertex__(), (a : A) => {\n                                performIO(a, (b : B) => {\n                                    Transaction.transactionally(() => {\n                                        out.send_(b);\n                                    });\n                                });\n                            }, false);\n                        }\n                    )\n                ]\n            ));\n            return out;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/IOAction.ts"],"sourceRoot":""}