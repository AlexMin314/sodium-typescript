{"version":3,"file":"sodium.umd.min.js","sources":["../src/lib/sodium/Vertex.ts","../src/lib/sodium/Lambda.ts","../src/lib/sodium/Transaction.ts","../src/lib/sodium/CoalesceHandler.ts","../src/lib/sodium/Lazy.ts","../src/lib/sodium/Unit.ts","../src/lib/sodium/Operational.ts","../src/lib/sodium/Cell.ts","../src/lib/sodium/Listener.ts","../src/lib/sodium/LazyCell.ts","../src/lib/sodium/Stream.ts","../src/lib/sodium/StreamSink.ts","../src/lib/sodium/CellLoop.ts","../src/lib/sodium/CellSink.ts","../src/lib/sodium/Tuple2.ts","../src/lib/sodium/TimerSystem.ts","../src/lib/sodium/SecondsTimerSystem.ts","../src/lib/sodium/MillisecondsTimerSystem.ts","../src/lib/sodium/IOAction.ts"],"sourcesContent":["import { Set } from \"typescript-collections\";\n\nlet totalRegistrations : number = 0;\nexport function getTotalRegistrations() : number {\n    return totalRegistrations;\n}\n\nexport class Source {\n    constructor(\n        origin : Vertex,\n        register_ : () => () => void\n    ) {\n        if (origin === null)\n            throw new Error(\"null origin!\");\n        this.origin = origin;\n        this.register_ = register_;\n    }\n    origin : Vertex;\n    private register_ : () => () => void;\n    private registered : boolean = false;\n    private deregister_ : () => void = null;\n\n    register(target : Vertex) : void {\n        if (!this.registered) {\n            this.registered = true;\n            if (this.register_ !== null)\n                this.deregister_ = this.register_();\n            else {\n                this.origin.increment(target);\n                this.deregister_ = () => this.origin.decrement(target);\n            }\n        }\n    }\n    deregister(target : Vertex) : void {\n        if (this.registered) {\n            this.registered = false;\n            if (this.deregister_ !== null)\n                this.deregister_();\n        }\n    }\n}\n\nexport enum Color { black, gray, white, purple };\nlet roots : Vertex[] = [];\nlet nextID : number = 0;\nlet verbose : boolean = false;\n\nexport function setVerbose(v : boolean) : void { verbose = v; }\n\nexport function describeAll(v : Vertex, visited : Set<number>)\n{\n    if (visited.contains(v.id)) return;\n    console.log(v.descr());\n    visited.add(v.id);\n    let chs = v.children();\n    for (let i = 0; i < chs.length; i++)\n        describeAll(chs[i], visited);\n}\n\nexport class Vertex {\n    static NULL : Vertex = new Vertex(\"user\", 1e12, []);\n    id : number;\n\n\tconstructor(name : string, rank : number, sources : Source[]) {\n\t    this.name = name;\n\t\tthis.rank = rank;\n\t\tthis.sources = sources;\n\t\tthis.id = nextID++;\n\t}\n\tname : string;\n    rank : number;\n    sources : Source[];\n    targets : Vertex[] = [];\n    childrn : Vertex[] = [];\n    refCount() : number { return this.targets.length; };\n    visited : boolean = false;\n    register(target : Vertex) : boolean {\n        return this.increment(target);\n    }\n    deregister(target : Vertex) : void {\n        if (verbose)\n            console.log(\"deregister \"+this.descr()+\" => \"+target.descr());\n        this.decrement(target);\n        Vertex.collectCycles();\n    }\n    private incRefCount(target : Vertex) : boolean {\n        let anyChanged : boolean = false;\n        if (this.refCount() == 0) {\n            for (let i = 0; i < this.sources.length; i++)\n                this.sources[i].register(this);\n        }\n        this.targets.push(target);\n        target.childrn.push(this);\n        if (target.ensureBiggerThan(this.rank))\n            anyChanged = true;\n        totalRegistrations++;\n        return anyChanged;\n    }\n\n    private decRefCount(target : Vertex) : void {\n        if (verbose)\n            console.log(\"DEC \"+this.descr());\n        let matched = false;\n        for (let i = 0; i < target.childrn.length; i++)\n            if (target.childrn[i] === this) {\n                target.childrn.splice(i, 1);\n            }\n        for (let i = 0; i < this.targets.length; i++)\n            if (this.targets[i] === target) {\n                this.targets.splice(i, 1);\n                matched = true;\n                break;\n            }\n        if (matched) {\n            if (this.refCount() == 0) {\n                for (let i = 0; i < this.sources.length; i++)\n                    this.sources[i].deregister(this);\n            }\n            totalRegistrations--;\n        }\n    }\n\n    addSource(src : Source) : void {\n        this.sources.push(src);\n        if (this.refCount() > 0)\n            src.register(this);\n    }\n\n\tprivate ensureBiggerThan(limit : number) : boolean {\n\t\tif (this.rank > limit || this.visited)\n\t\t\treturn false;\n\n        this.visited = true;\n\t\tthis.rank = limit + 1;\n\t\tfor (let i = 0; i < this.targets.length; i++)\n\t\t\tthis.targets[i].ensureBiggerThan(this.rank);\n        this.visited = false;\n\t\treturn true;\n\t}\n\n\tdescr() : string {\n        let colStr : string = null;\n        switch (this.color) {\n        case Color.black: colStr = \"black\"; break;\n        case Color.gray:  colStr = \"gray\"; break;\n        case Color.white: colStr = \"white\"; break;\n        case Color.purple: colStr = \"purple\"; break;\n        }\n        let str = this.id+\" \"+this.name+\" [\"+this.refCount()+\"/\"+this.refCountAdj+\"] \"+colStr+\" ->\";\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            str = str + \" \" + chs[i].id;\n        }\n        return str;\n\t}\n\n\t// --------------------------------------------------------\n\t// Synchronous Cycle Collection algorithm presented in \"Concurrent\n\t// Cycle Collection in Reference Counted Systems\" by David F. Bacon\n\t// and V.T. Rajan.\n\n    color : Color = Color.black;\n    buffered : boolean = false;\n    refCountAdj : number = 0;\n\n\tchildren() : Vertex[] { return this.childrn; }\n\n\tincrement(referrer : Vertex) : boolean {\n\t    return this.incRefCount(referrer);\n\t}\n\n\tdecrement(referrer : Vertex) : void {\n\t    this.decRefCount(referrer);\n\t    if (this.refCount() == 0)\n\t        this.release();\n        else\n            this.possibleRoots();\n\t}\n\n    release() : void {\n        this.color = Color.black;\n        if (!this.buffered)\n            this.free();\n    }\n\n    free() : void {\n        while (this.targets.length > 0)\n            this.decRefCount(this.targets[0]);\n    }\n\n\tpossibleRoots() : void {\n\t    if (this.color != Color.purple) {\n\t        this.color = Color.purple;\n\t        if (!this.buffered) {\n                this.buffered = true;\n                roots.push(this);\n            }\n        }\n\t}\n\n\tstatic collectCycles() : void {\n\t    Vertex.markRoots();\n\t    Vertex.scanRoots();\n\t    Vertex.collectRoots();\n\t}\n\n\tstatic markRoots() : void {\n\t    const newRoots : Vertex[] = [];\n\t    for (let i = 0; i < roots.length; i++) {\n            if (verbose)\n                console.log(\"markRoots \"+roots[i].descr());  // ###\n\t        if (roots[i].color == Color.purple) {\n\t            roots[i].markGray();\n\t            newRoots.push(roots[i]);\n            }\n\t        else {\n\t            roots[i].buffered = false;\n\t            if (roots[i].color == Color.black && roots[i].refCount() == 0)\n\t                roots[i].free();\n            }\n\t    }\n\t    roots = newRoots;\n\t}\n\n\tstatic scanRoots() : void {\n\t    for (let i = 0; i < roots.length; i++)\n\t        roots[i].scan();\n\t}\n\n\tstatic collectRoots() : void {\n\t    for (let i = 0; i < roots.length; i++) {\n\t        roots[i].buffered = false;\n\t        roots[i].collectWhite();\n\t    }\n\t    roots = [];\n\t}\n\n\tmarkGray() : void {\n\t    if (this.color != Color.gray) {\n\t        this.color = Color.gray;\n\t        let chs = this.children();\n\t        for (let i = 0; i < chs.length; i++) {\n\t            chs[i].refCountAdj--;\n                if (verbose)\n                    console.log(\"markGray \"+this.descr());\n\t            chs[i].markGray();\n            }\n\t    }\n\t}\n\n\tscan() : void {\n\t    if (verbose)\n            console.log(\"scan \"+this.descr());\n\t    if (this.color == Color.gray) {\n\t        if (this.refCount()+this.refCountAdj > 0)\n\t            this.scanBlack();\n\t        else {\n\t            this.color = Color.white;\n                if (verbose)\n                    console.log(\"scan WHITE \"+this.descr());\n                let chs = this.children();\n                for (let i = 0; i < chs.length; i++)\n                    chs[i].scan();\n\t        }\n\t    }\n\t}\n\n\tscanBlack() : void {\n\t    this.color = Color.black;\n        let chs = this.children();\n        for (let i = 0; i < chs.length; i++) {\n            chs[i].refCountAdj++;\n            if (verbose)\n                console.log(\"scanBlack \"+this.descr());\n            if (chs[i].color != Color.black)\n                chs[i].scanBlack();\n        }\n\t}\n\n\tcollectWhite() : void {\n\t    if (this.color == Color.white && !this.buffered) {\n            if (verbose)\n                console.log(\"collectWhite \"+this.descr());\n\t        this.color = Color.black;\n\t        this.refCountAdj = 0;\n            let chs = this.children();\n            for (let i = 0; i < chs.length; i++)\n                chs[i].collectWhite();\n            this.free();\n\t    }\n\t}\n}\n","import { Stream } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Source } from \"./Vertex\";\n\nexport class Lambda1<A,B> {\n    constructor(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A) => B;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda1<A,B>(f : (a : A) => B,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda1<A,B>\n{\n    return new Lambda1(f, deps);\n}\n\nexport function Lambda1_deps<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda1)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda1_toFunction<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : (a : A) => B {\n    if (f instanceof Lambda1)\n        return f.f;\n    else\n        return <(a : A) => B>f;\n}\n\nexport class Lambda2<A,B,C> {\n    constructor(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B) => C;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda2<A,B,C>(f : (a : A, b : B) => C,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda2<A,B,C>\n{\n    return new Lambda2(f, deps);\n}\n\nexport function Lambda2_deps<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda2)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda2_toFunction<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : (a : A, b : B) => C {\n    if (f instanceof Lambda2)\n        return f.f;\n    else\n        return <(a : A, b : B) => C>f;\n}\n\nexport class Lambda3<A,B,C,D> {\n    constructor(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C) => D;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda3<A,B,C,D>(f : (a : A, b : B, c : C) => D,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda3<A,B,C,D>\n{\n    return new Lambda3(f, deps);\n}\n\nexport function Lambda3_deps<A,B,C,D>(f : ((a : A, b : B, c : C) => D)\n        | Lambda3<A,B,C,D>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda3)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda3_toFunction<A,B,C,D>(f : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : (a : A, b : B, c : C) => D {\n    if (f instanceof Lambda3)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C) => D>f;\n}\n\nexport class Lambda4<A,B,C,D,E> {\n    constructor(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D) => E;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda4<A,B,C,D,E>(f : (a : A, b : B, c : C, d : D) => E,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda4<A,B,C,D,E>\n{\n    return new Lambda4(f, deps);\n}\n\nexport function Lambda4_deps<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda4)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda4_toFunction<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\n        | Lambda4<A,B,C,D,E>) : (a : A, b : B, c : C, d : D) => E {\n    if (f instanceof Lambda4)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D) => E>f;\n}\n\nexport class Lambda5<A,B,C,D,E,F> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E) => F;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda5<A,B,C,D,E,F>(f : (a : A, b : B, c : C, d : D, e : E) => F,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda5<A,B,C,D,E,F>\n{\n    return new Lambda5(f, deps);\n}\n\nexport function Lambda5_deps<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda5)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda5_toFunction<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\n        | Lambda5<A,B,C,D,E,F>) : (a : A, b : B, c : C, d : D, e : E) => F {\n    if (f instanceof Lambda5)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E) => F>f;\n}\n\nexport class Lambda6<A,B,C,D,E,F,G> {\n    constructor(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) {\n        this.f = f;\n        this.deps = deps;\n    }\n    f : (a : A, b : B, c : C, d : D, e : E, f : F) => G;\n    deps : Array<Stream<any>|Cell<any>>;\n}\n\nexport function lambda6<A,B,C,D,E,F,G>(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\n                deps : Array<Stream<any>|Cell<any>>) : Lambda6<A,B,C,D,E,F,G>\n{\n    return new Lambda6(f, deps);\n}\n\nexport function Lambda6_deps<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : Array<Stream<any>|Cell<any>> {\n    if (f instanceof Lambda6)\n        return f.deps;\n    else\n        return [];\n}\n\nexport function Lambda6_toFunction<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\n        | Lambda6<A,B,C,D,E,F,G>) : (a : A, b : B, c : C, d : D, e : E, f : F) => G {\n    if (f instanceof Lambda6)\n        return f.f;\n    else\n        return <(a : A, b : B, c : C, d : D, e : E, f : F) => G>f;\n}\n\nexport function toSources(deps : Array<Stream<any>|Cell<any>>) : Source[] {\n    const ss : Source[] = [];\n    for (let i = 0; i < deps.length; i++) {\n        const dep = deps[i];\n        ss.push(new Source(dep.getVertex__(), null));\n    }\n    return ss;\n}\n","import {Vertex} from './Vertex';\nimport * as Collections from 'typescript-collections';\n\nexport class Entry\n{\n  constructor(rank: Vertex, action: () => void)\n  {\n    this.rank = rank;\n    this.action = action;\n    this.seq = Entry.nextSeq++;\n  }\n\n  private static nextSeq: number = 0;\n  rank: Vertex;\n  action: () => void;\n  seq: number;\n\n  toString(): string\n  {\n    return this.seq.toString();\n  }\n}\n\nexport class Transaction\n{\n  public static currentTransaction: Transaction = null;\n  private static onStartHooks: (() => void)[] = [];\n  private static runningOnStartHooks: boolean = false;\n\n  constructor() {}\n\n  inCallback: number = 0;\n  private toRegen: boolean = false;\n\n  requestRegen(): void\n  {\n    this.toRegen = true;\n  }\n\n  prioritizedQ: Collections.PriorityQueue<Entry> = new Collections.PriorityQueue<Entry>((a, b) =>\n  {\n    // Note: Low priority numbers are treated as \"greater\" according to this\n    // comparison, so that the lowest numbers are highest priority and go first.\n    if (a.rank.rank < b.rank.rank) return 1;\n    if (a.rank.rank > b.rank.rank) return -1;\n    if (a.seq < b.seq) return 1;\n    if (a.seq > b.seq) return -1;\n    return 0;\n  });\n  private entries: Collections.Set<Entry> = new Collections.Set<Entry>((a) => a.toString());\n  private lastQ: Array<() => void> = [];\n  private postQ: Array<() => void> = null;\n\n  prioritized(target: Vertex, f: () => void): void\n  {\n    const e = new Entry(target, f);\n    this.prioritizedQ.enqueue(e);\n    this.entries.add(e);\n  }\n\n  last(h: () => void): void\n  {\n    this.lastQ.push(h);\n  }\n\n  /**\n   * Add an action to run after all last() actions.\n   */\n  post(childIx: number, action: () => void): void\n  {\n    if (this.postQ == null)\n      this.postQ = [];\n    // If an entry exists already, combine the old one with the new one.\n    while (this.postQ.length <= childIx)\n      this.postQ.push(null);\n    const existing = this.postQ[childIx],\n      neu =\n        existing === null ? action\n          : () =>\n        {\n          existing();\n          action();\n        };\n    this.postQ[childIx] = neu;\n  }\n\n  // If the priority queue has entries in it when we modify any of the nodes'\n  // ranks, then we need to re-generate it to make sure it's up-to-date.\n  private checkRegen(): void\n  {\n    if (this.toRegen)\n    {\n      this.toRegen = false;\n      this.prioritizedQ.clear();\n      const es = this.entries.toArray();\n      for (let i: number = 0; i < es.length; i++)\n        this.prioritizedQ.enqueue(es[i]);\n    }\n  }\n\n  public isActive() : boolean\n  {\n    return Transaction.currentTransaction ? true : false;\n  }\n\n  close(): void\n  {\n    while (true)\n    {\n      this.checkRegen();\n      if (this.prioritizedQ.isEmpty()) break;\n      const e = this.prioritizedQ.dequeue();\n      this.entries.remove(e);\n      e.action();\n    }\n    for (let i = 0; i < this.lastQ.length; i++)\n      this.lastQ[i]();\n    this.lastQ = [];\n    if (this.postQ != null)\n    {\n      for (let i = 0; i < this.postQ.length; i++)\n      {\n        if (this.postQ[i] != null)\n        {\n          const parent = Transaction.currentTransaction;\n          try\n          {\n            if (i > 0)\n            {\n              Transaction.currentTransaction = new Transaction();\n              try\n              {\n                this.postQ[i]();\n                Transaction.currentTransaction.close();\n              }\n              catch (err)\n              {\n                Transaction.currentTransaction.close();\n                throw err;\n              }\n            }\n            else\n            {\n              Transaction.currentTransaction = null;\n              this.postQ[i]();\n            }\n            Transaction.currentTransaction = parent;\n          }\n          catch (err)\n          {\n            Transaction.currentTransaction = parent;\n            throw err;\n          }\n        }\n      }\n      this.postQ = null;\n    }\n  }\n\n  /**\n   * Add a runnable that will be executed whenever a transaction is started.\n   * That runnable may start transactions itself, which will not cause the\n   * hooks to be run recursively.\n   *\n   * The main use case of this is the implementation of a time/alarm system.\n   */\n  static onStart(r: () => void): void\n  {\n    Transaction.onStartHooks.push(r);\n  }\n\n  public static run<A>(f: () => A): A\n  {\n    const transWas: Transaction = Transaction.currentTransaction;\n    if (transWas === null)\n    {\n      if (!Transaction.runningOnStartHooks)\n      {\n        Transaction.runningOnStartHooks = true;\n        try\n        {\n          for (let i = 0; i < Transaction.onStartHooks.length; i++)\n            Transaction.onStartHooks[i]();\n        }\n        finally\n        {\n          Transaction.runningOnStartHooks = false;\n        }\n      }\n      Transaction.currentTransaction = new Transaction();\n    }\n    try\n    {\n      const a: A = f();\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      return a;\n    }\n    catch (err)\n    {\n      if (transWas === null)\n      {\n        Transaction.currentTransaction.close();\n        Transaction.currentTransaction = null;\n      }\n      throw err;\n    }\n  }\n}\n\n\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         toSources } from \"./Lambda\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamWithSend } from \"./Stream\";\nimport { Vertex } from \"./Vertex\";\n\nexport class CoalesceHandler<A>\n{\n\tconstructor(f : ((l : A, r : A) => A) | Lambda2<A,A,A>, out : StreamWithSend<A>)\n\t{\n\t    this.f = Lambda2_toFunction(f);\n\t    this.out = out;\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(\n            toSources(Lambda2_deps(f)));\n        this.accumValid = false;\n    }\n\tprivate f : (l : A, r : A) => A;\n\tprivate out : StreamWithSend<A>;\n\tprivate accumValid : boolean;\n    private accum : A;\n    private verbose : boolean;\n    send_(a : A) {\n        if (this.accumValid)\n            this.accum = this.f(this.accum, a);\n        else {\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), () => {\n                this.out.send_(this.accum);\n                this.accumValid = false;\n                this.accum = null;\n            });\n            this.accum = a;\n            this.accumValid = true;\n        }\n    }\n}\n","/**\n * A representation for a value that may not be available until the current\n * transaction is closed.\n */\nexport class Lazy<A> {\n    constructor(f : () => A) {\n        this.f = f;\n    }\n\n    private f : () => A;\n\n    /**\n     * Get the value if available, throwing an exception if not.\n     * In the general case this should only be used in subsequent transactions to\n     * when the Lazy was obtained.\n     */\n    get() : A {\n        return this.f();\n    }\n\n    /**\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\n     * the value of the function applied to the input Lazy's value.\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : (a : A) => B) {\n        return new Lazy<B>(() => { return f(this.f()); });\n    }\n\n\t/**\n\t * Lift a binary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift<B,C>(b : Lazy<B>, f : (a : A, b : B) => C) : Lazy<C> {\n        return new Lazy<C>(() => { return f(this.f(), b.f()); });\n    }\n\n\t/**\n\t * Lift a ternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift3<B,C,D>(b : Lazy<B>, c : Lazy<C>, f : (a : A, b : B, c : C) => D) : Lazy<D> {\n        return new Lazy<D>(() => { return f(this.f(), b.f(), c.f()); });\n    }\n\n\t/**\n\t * Lift a quaternary function into lazy values, so the returned Lazy reflects\n     * the value of the function applied to the input Lazys' values.\n\t */\n    lift4<B,C,D,E>(b : Lazy<B>, c : Lazy<C>, d : Lazy<D>, f : (a : A, b : B, c : C, d : D) => E) : Lazy<E> {\n        return new Lazy<E>(() => { return f(this.f(), b.f(), c.f(), d.f()); });\n    }\n}\n","export class Unit {\n    static UNIT : Unit = new Unit();\n    constructor() {}\n}\n","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Cell } from \"./Cell\";\nimport { Transaction } from \"./Transaction\";\nimport { Unit } from \"./Unit\";\nimport { Source, Vertex } from \"./Vertex\";\n\nexport class Operational {\n    /**\n     * A stream that gives the updates/steps for a {@link Cell}.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static updates<A>(c : Cell<A>) : Stream<A> {\n        /*  Don't think this is needed\n        const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"updates\", 0, [\n                new Source(\n                    c.getStream__().getVertex__(),\n                    () => {\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                ),\n                new Source(\n                    c.getVertex__(),\n                    () => {\n                        return () => { };\n                    }\n                )\n            ]\n        ));\n        return out;\n        */\n        return c.getStream__();\n    }\n\n    /**\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\n     * firing for each update/step of the cell's value.\n     * <P>\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\n     * API. It breaks the property of non-detectability of cell steps/updates.\n     * The rule with this primitive is that you should only use it in functions\n     * that do not allow the caller to detect the cell updates.\n     */\n    static value<A>(c : Cell<A>) : Stream<A> {\n        return Transaction.run(() => {\n            const sSpark = new StreamWithSend<Unit>();\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), () => {\n                sSpark.send_(Unit.UNIT);\n            });\n            const sInitial = sSpark.snapshot1(c);\n            return Operational.updates(c).orElse(sInitial);\n        });\n    }\n\n\t/**\n\t * Push each event onto a new transaction guaranteed to come before the next externally\n\t * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\n\t */\n\tstatic defer<A>(s : Stream<A>) : Stream<A> {\n\t    return Operational.split<A>(s.map((a : A) => {\n\t        return [a];\n\t    }));\n    }\n\n\t/**\n\t * Push each event in the list onto a newly created transaction guaranteed\n\t * to come before the next externally initiated transaction. Note that the semantics\n\t * are such that two different invocations of split() can put events into the same\n\t * new transaction, so the resulting stream's events could be simultaneous with\n\t * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\n\t */\n\tstatic split<A>(s : Stream<Array<A>>) : Stream<A> {\n\t    const out = new StreamWithSend<A>(null);\n        out.setVertex__(new Vertex(\"split\", 0, [\n                new Source(\n                    s.getVertex__(),\n                    () => {\n                        return s.listen_(out.getVertex__(), (as : Array<A>) => {\n                            for (let i = 0; i < as.length; i++) {\n                                Transaction.currentTransaction.post(i, () => {\n                                    Transaction.run(() => {\n                                        out.send_(as[i]);\n                                    });\n                                });\n                            }\n                        }, false);\n                    }\n                )\n            ]\n        ));\n        return out;\n    }\n}\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { Lazy } from \"./Lazy\";\nimport { Listener } from \"./Listener\";\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { Operational } from \"./Operational\";\n\nclass LazySample<A> {\n    constructor(cell : Cell<A>) {\n        this.cell = cell;\n    }\n    cell : Cell<A>;\n    hasValue : boolean = false;\n    value : A = null;\n}\n\nclass ApplyState<A,B> {\n    constructor() {}\n    f : (a : A) => B = null;\n    f_present : boolean = false;\n    a : A = null;\n    a_present : boolean = false;\n}\n\nexport class Cell<A> {\n\tprivate str : Stream<A>;\n\tprotected value : A;\n\tprotected valueUpdate : A;\n\tprivate cleanup : () => void;\n\tprotected lazyInitValue : Lazy<A>;  // Used by LazyCell\n\tprivate vertex : Vertex;\n\n    constructor(initValue : A, str? : Stream<A>) {\n        this.value = initValue;\n        if (!str) {\n            this.str = new Stream<A>();\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\n        }\n        else\n            Transaction.run(() => this.setStream(str));\n    }\n\n    protected setStream(str : Stream<A>) {\n        this.str = str;\n        const me = this,\n              src = new Source(\n                str.getVertex__(),\n                () => {\n                    return str.listen_(me.vertex, (a : A) => {\n                        if (me.valueUpdate == null) {\n                            Transaction.currentTransaction.last(() => {\n                                me.value = me.valueUpdate;\n                                me.lazyInitValue = null;\n                                me.valueUpdate = null;\n                            });\n                        }\n                        me.valueUpdate = a;\n                    }, false);\n                }\n            );\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\n        // We do a trick here of registering the source for the duration of the current\n        // transaction so that we are guaranteed to catch any stream events that\n        // occur in the same transaction.\n        this.vertex.register(Vertex.NULL);\n        Transaction.currentTransaction.last(() => {\n            this.vertex.deregister(Vertex.NULL);\n        });\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    getStream__() : Stream<A> {  // TO DO: Figure out how to hide this\n        return this.str;\n    }\n\n    /**\n     * Sample the cell's current value.\n     * <p>\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\n     * miss any updates, but in many circumstances it makes sense.\n     * <p>\n     * NOTE: In the Java and other versions of Sodium, using sample() inside map(), filter() and\n     * merge() is encouraged. In the Javascript/Typescript version, not so much, for the\n     * following reason: The memory management is different in the Javascript version, and this\n     * requires us to track all dependencies. In order for the use of sample() inside\n     * a closure to be correct, the cell that was sample()d inside the closure would have to be\n     * declared explicitly using the helpers lambda1(), lambda2(), etc. Because this is\n     * something that can be got wrong, we don't encourage this kind of use of sample() in\n     * Javascript. Better and simpler to use snapshot().\n     * <p>\n     * NOTE: If you need to sample() a cell, you have to make sure it's \"alive\" in terms of\n     * memory management or it will ignore updates. To make a cell work correctly\n     * with sample(), you have to ensure that it's being used. One way to guarantee this is\n     * to register a dummy listener on the cell. It will also work to have it referenced\n     * by something that is ultimately being listened to.\n     */\n    sample() : A {\n        return Transaction.run(() => { return this.sampleNoTrans__(); });\n    }\n\n    sampleNoTrans__() : A {  // TO DO figure out how to hide this\n        return this.value;\n    }\n\n    /**\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\n     */\n    sampleLazy() : Lazy<A> {\n        const me = this;\n        return Transaction.run(() => me.sampleLazyNoTrans__());\n    }\n\n    sampleLazyNoTrans__() : Lazy<A> {  // TO DO figure out how to hide this\n        const me = this,\n            s = new LazySample<A>(me);\n        Transaction.currentTransaction.last(() => {\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\n            s.hasValue = true;\n            s.cell = null;\n        });\n        return new Lazy<A>(() => {\n            if (s.hasValue)\n                return s.value;\n            else\n                return s.cell.sample();\n        });\n    }\n\n    /**\n     * Transform the cell's value according to the supplied function, so the returned Cell\n     * always reflects the value of the function applied to the input Cell's value.\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Cell<B> {\n        const c = this;\n        return Transaction.run(() =>\n            Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)))\n        );\n    }\n\n\t/**\n\t * Lift a binary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift<B,C>(b : Cell<B>,\n\t          fn0 : ((a : A, b : B) => C) |\n\t                Lambda2<A,B,C>) : Cell<C> {\n        const fn = Lambda2_toFunction(fn0),\n            cf = this.map((aa : A) => (bb : B) => fn(aa, bb));\n        return Cell.apply(cf, b,\n            toSources(Lambda2_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a ternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift3<B,C,D>(b : Cell<B>, c : Cell<C>,\n\t             fn0 : ((a : A, b : B, c : C) => D) |\n\t                   Lambda3<A,B,C,D>) : Cell<D> {\n        const fn = Lambda3_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => D =\n                 (aa : A) => (bb : B) => (cc : C) => fn(aa, bb, cc),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply<B, (c : C) => D>(cf, b),\n                   c,\n                   toSources(Lambda3_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a quaternary function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\n\t               fn0 : ((a : A, b : B, c : C, d : D) => E) |\n\t                     Lambda4<A,B,C,D,E>) : Cell<E> {\n        const fn = Lambda4_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => E =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => fn(aa, bb, cc, dd),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply<B, (c : C) => (d : D) => E>(cf, b),\n                       c),\n                   d,\n                   toSources(Lambda4_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\n\t                 fn0 : ((a : A, b : B, c : C, d : D, e : E) => F) |\n\t                       Lambda5<A,B,C,D,E,F>) : Cell<F> {\n        const fn = Lambda5_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => F =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => fn(aa, bb, cc, dd, ee),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply<B, (c : C) => (d : D) => (e : E) => F>(cf, b),\n                           c),\n                       d),\n                   e,\n                   toSources(Lambda5_deps(fn0)));\n\t}\n\n\t/**\n\t * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\n\t * function applied to the input cells' values.\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\n\t */\n\tlift6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\n\t                   fn0 : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) |\n\t                         Lambda6<A,B,C,D,E,F,G>) : Cell<G> {\n        const fn = Lambda6_toFunction(fn0),\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => G =\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => fn(aa, bb, cc, dd, ee, ff),\n            cf = this.map(mf);\n        return Cell.apply(\n                   Cell.apply(\n                       Cell.apply(\n                           Cell.apply(\n                               Cell.apply<B, (c : C) => (d : D) => (e : E) => (f : F) => G>(cf, b),\n                               c),\n                           d),\n                       e),\n                   f,\n                   toSources(Lambda6_deps(fn0)));\n\t}\n\n\t/**\n\t * Apply a value inside a cell to a function inside a cell. This is the\n\t * primitive for all function lifting.\n\t */\n\tstatic apply<A,B>(cf : Cell<(a : A) => B>, ca : Cell<A>, sources? : Source[]) : Cell<B> {\n    \treturn Transaction.run(() => {\n    \t    const state = new ApplyState<A,B>(),\n                out = new StreamWithSend<B>(),\n                cf_value = Operational.value(cf),\n                ca_value = Operational.value(ca),\n                src1 = new Source(\n                        cf_value.getVertex__(),\n                        () => {\n                            return cf_value.listen_(out.getVertex__(), (f : (a : A) => B) => {\n                                state.f = f;\n                                state.f_present = true;\n                                if (state.a_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    ),\n                src2 = new Source(\n                        ca_value.getVertex__(),\n                        () => {\n                            return ca_value.listen_(out.getVertex__(), (a : A) => {\n                                state.a = a;\n                                state.a_present = true;\n                                if (state.f_present)\n                                    out.send_(state.f(state.a));\n                            }, false);\n                        }\n                    );\n            out.setVertex__(new Vertex(\"apply\", 0,\n                [src1, src2].concat(sources ? sources : [])\n            ));\n            return out.coalesce__((l, r) => r).holdLazy(new Lazy<B>(() =>\n                    cf.sampleNoTrans__()(ca.sampleNoTrans__())\n                ));\n        });\n\t}\n\n\t/**\n\t * Unwrap a cell inside another cell to give a time-varying cell implementation.\n\t */\n    static switchC<A>(cca : Cell<Cell<A>>) : Cell<A> {\n\t    return Transaction.run(() => {\n            const za = cca.sampleLazy().map((ba : Cell<A>) => ba.sample()),\n                out = new StreamWithSend<A>();\n            let last_ca : Cell<A> = null;\n            const cca_value = Operational.value(cca),\n                  src = new Source(\n                        cca_value.getVertex__(),\n                        () => {\n                            let kill2 : () => void = last_ca === null ? null :\n                                    Operational.value(last_ca).listen_(out.getVertex__(),\n                                        (a : A) => out.send_(a), false);\n                            const kill1 = cca_value.listen_(out.getVertex__(), (ca : Cell<A>) => {\n                                // Note: If any switch takes place during a transaction, then the\n                                // coalesce__() below will always cause a sample to be fetched\n                                // from the one we just switched to. So anything from the old input cell\n                                // that might have happened during this transaction will be suppressed.\n                                last_ca = ca;\n                                if (kill2 !== null)\n                                    kill2();\n                                kill2 = Operational.value(ca).listen_(out.getVertex__(),\n                                    (a : A) => out.send_(a), false);\n                            }, false);\n                            return () => { kill1(); kill2(); };\n                        }\n                    );\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\n            return out.coalesce__((l, r) => r).holdLazy(za);\n        });\n\t}\n\n\t/**\n\t * Unwrap a stream inside a cell to give a time-varying stream implementation.\n\t */\n\tstatic switchS<A>(csa : Cell<Stream<A>>) : Stream<A> {\n\t    return Transaction.run(() => {\n            const out = new StreamWithSend<A>(),\n                  h2 = (a : A) => {\n                          out.send_(a);\n                      },\n                  src = new Source(\n                      csa.getVertex__(),\n                      () => {\n                          let kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\n                          const kill1 = csa.getStream__().listen_(out.getVertex__(), (sa : Stream<A>) => {\n                              kill2();\n                              kill2 = sa.listen_(out.getVertex__(), h2, true);\n                          }, false);\n                          return () => { kill1(); kill2(); };\n                      }\n                  );\n\t        out.setVertex__(new Vertex(\"switchS\", 0, [src]));\n\t        return out;\n\t    });\n    }\n\n\t/**\n\t * Listen for updates to the value of this cell. This is the observer pattern. The\n\t * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\n\t * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\n\t * the world of I/O and for FRP.\n\t * @param h The handler to execute when there's a new value.\n\t *   You should make no assumptions about what thread you are called on, and the\n\t *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\n\t *   or {@link StreamSink#send(Object)} in the handler.\n\t *   An exception will be thrown, because you are not meant to use this to create\n\t *   your own primitives.\n     */\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.run(() => {\n            return Operational.value(this).listen(h);\n        });\n    }\n\n    /**\n     * Fantasy-land Algebraic Data Type Compatability.\n     * Cell satisfies the Monad and Comonad Categories (and hence Functor, Apply, Applicative, and Extend as well)\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\n     */\n\n    //of :: Applicative f => a -> f a\n    static 'fantasy-land/of'<A>(a:A):Cell<A> {\n      return new Cell<A>(a);\n    }\n\n    //map :: Functor f => f a ~> (a -> b) -> f b\n    'fantasy-land/map'<B>(f : ((a : A) => B)) : Cell<B> {\n      return this.map(f);\n    }\n\n    //ap :: Apply f => f a ~> f (a -> b) -> f b\n    'fantasy-land/ap'<B>(cf: Cell<(a : A) => B>):Cell<B> {\n        return Cell.apply(cf, this);\n    }\n\n    //chain :: Chain m => m a ~> (a -> m b) -> m b\n    'fantasy-land/chain'<B>(f: ((a:A) => Cell<B>)):Cell<B> {\n      return Cell.switchC(this.map(f));\n    }\n\n    //extend :: Extend w => w a ~> (w a -> b) -> w b\n    'fantasy-land/extend'<B>(f: ((a:Cell<A>) => B)):Cell<B> {\n      return new Cell<B>(f(this));\n    }\n\n    //extract :: Comonad w => w a ~> () -> a\n    'fantasy-land/extract'():A {\n      return this.sample();\n    }\n}\n","import { Source, Vertex } from \"./Vertex\";\n\nexport class Listener<A> {\n    constructor(h : (a : A) => void, target : Vertex) {\n        this.h = h;\n        this.target = target;\n    }\n    h : (a : A) => void;\n    target : Vertex;\n}\n","import { Lazy } from \"./Lazy\";\nimport { Cell } from \"./Cell\";\nimport { Stream } from \"./Stream\";\nimport { Transaction } from \"./Transaction\";\n\nexport class LazyCell<A> extends Cell<A> {\n    constructor(lazyInitValue : Lazy<A>, str? : Stream<A>) {\n        super(null, null);\n        Transaction.run(() => {\n            if (str)\n                this.setStream(str);\n            this.lazyInitValue = lazyInitValue;\n        });\n    }\n\n    sampleNoTrans__() : A {  // Override\n        if (this.value == null && this.lazyInitValue != null) {\n            this.value = this.lazyInitValue.get();\n            this.lazyInitValue = null;\n        }\n        return this.value;\n    }\n}\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\n         toSources } from \"./Lambda\";\nimport { Source, Vertex } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Cell } from \"./Cell\";\n//import { StreamLoop } from \"./StreamLoop\";\nimport { Listener } from \"./Listener\";\nimport { Tuple2 } from \"./Tuple2\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\nimport * as Z from \"sanctuary-type-classes\";\n\nexport class Stream<A> {\n    constructor(vertex? : Vertex) {\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\n    }\n\n    getVertex__() : Vertex {\n        return this.vertex;\n    }\n\n    protected vertex : Vertex;\n    protected listeners : Array<Listener<A>> = [];\n    protected firings : A[] = [];\n\n    /**\n     * Transform the stream's event values according to the supplied function, so the returned\n     * Stream's event values reflect the value of the function applied to the input\n     * Stream's event values.\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"map\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a));\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Transform the stream's event values into the specified constant value.\n     * @param b Constant value.\n     */\n    mapTo<B>(b : B) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"mapTo\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(b);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\n     * in the simultaneous case.\n     * <p>\n     * In the case where two events are simultaneous (i.e. both\n     * within the same transaction), the event from <em>this</em> will take precedence, and\n     * the event from <em>s</em> will be dropped.\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\n     * <p>\n     * The name orElse() is used instead of merge() to make it really clear that care should\n     * be taken, because events can be dropped.\n     */\n    orElse(s : Stream<A>) : Stream<A> {\n        return this.merge(s, (left : A, right: A) => {\n            return left;\n        });\n    }\n\n    private merge_(s : Stream<A>) : Stream<A> {\n        const out = new StreamWithSend<A>();\n        const left = new Vertex(\"merge\", 0, []);\n        left.sources.push(new Source(this.vertex, () => {\n            return this.listen_(left, (a : A) => {\n                    out.send_(a);\n                }, false);\n        }));\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    left,\n                    () => {\n                        left.register(out.vertex);\n                        return () => { left.deregister(out.vertex); }\n                    }\n                ),\n                new Source(\n                    s.vertex,\n                    () => {\n                        return s.listen_(out.vertex, (a : A) => {\n                            out.send_(a);\n                        }, false);\n                    }\n                )\n            ]);\n        return out;\n    }\n\n    coalesce__(f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {  // TO DO figure out how to hide this\n        const out = new StreamWithSend<A>();\n        const coalescer = new CoalesceHandler<A>(f, out);\n        out.vertex.sources = out.vertex.sources.concat([\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            coalescer.send_(a);\n                        }, false);\n                    }\n                )\n            ]).concat(toSources(Lambda2_deps(f)));\n        return out;\n    }\n\n    /**\n     * Merge two streams of the same type into one, so that events on either input appear\n     * on the returned stream.\n     * <p>\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\n     * occurring in the same transaction), combine them into one using the specified combining function\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\n     * The event from <em>this</em> will appear at the left input of the combining function, and\n     * the event from <em>s</em> will appear at the right.\n     * @param f Function to combine the values. It may construct FRP logic or use\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    merge(s : Stream<A>, f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {\n        return Transaction.run<Stream<A>>(() => {\n            return this.merge_(s).coalesce__(f);\n        });\n    }\n\n    /**\n     * Return a stream that only outputs events for which the predicate returns true.\n     */\n    filter(f : ((a : A) => boolean) | Lambda1<A,boolean>) : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        const ff = Lambda1_toFunction(f);\n        out.vertex = new Vertex(\"filter\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (ff(a))\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ].concat(toSources(Lambda1_deps(f)))\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events that have present\n     * values, discarding null values.\n     */\n    filterNotNull() : Stream<A> {\n        const out = new StreamWithSend<A>(null);\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            if (a !== null)\n                                out.send_(a);\n                        }, false);\n                    }\n                )\n            ]\n        );\n        return out;\n    }\n\n    /**\n     * Return a stream that only outputs events from the input stream\n     * when the specified cell's value is true.\n     */\n    gate(c : Cell<boolean>) : Stream<A> {\n        return this.snapshot(c, (a : A, pred : boolean) => {\n            return pred ? a : null;\n        }).filterNotNull();\n    }\n\n\t/**\n\t * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\n\t * at the time of the event firing, ignoring the stream's value.\n\t */\n\tsnapshot1<B>(c : Cell<B>) : Stream<B> {\n        const out = new StreamWithSend<B>(null);\n        out.vertex = new Vertex(\"snapshot1\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(c.sampleNoTrans__());\n                        }, false);\n                    }\n                ),\n                new Source(c.getVertex__(), null)\n            ]\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cell at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot<B,C>(b : Cell<B>, f_ : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Stream<C>\n\t{\n        const out = new StreamWithSend<C>(null);\n        const ff = Lambda2_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null)\n            ].concat(toSources(Lambda2_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot3<B,C,D>(b : Cell<B>, c : Cell<C>, f_ : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : Stream<D>\n\t{\n        const out = new StreamWithSend<D>(null);\n        const ff = Lambda3_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null)\n            ].concat(toSources(Lambda3_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\n\t    f_ : ((a : A, b : B, c : C, d : D) => E) | Lambda4<A,B,C,D,E>) : Stream<E>\n\t{\n        const out = new StreamWithSend<E>(null);\n        const ff = Lambda4_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\n                                            d.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null),\n                new Source(d.getVertex__(), null)\n            ].concat(toSources(Lambda4_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E) => F) | Lambda5<A,B,C,D,E,F>) : Stream<F>\n\t{\n        const out = new StreamWithSend<F>(null);\n        const ff = Lambda5_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\n                                            d.sampleNoTrans__(), e.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null),\n                new Source(d.getVertex__(), null),\n                new Source(e.getVertex__(), null)\n            ].concat(toSources(Lambda5_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Return a stream whose events are the result of the combination using the specified\n\t * function of the input stream's event value and the value of the cells at that time.\n     * <P>\n     * There is an implicit delay: State updates caused by event firings being held with\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\n     * the following transaction. To put this another way, snapshot()\n     * always sees the value of a cell as it was before any state changes from the current\n     * transaction.\n     */\n\tsnapshot6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) | Lambda6<A,B,C,D,E,F,G>) : Stream<G>\n\t{\n        const out = new StreamWithSend<G>(null);\n        const ff = Lambda6_toFunction(f_);\n        out.vertex = new Vertex(\"snapshot\", 0, [\n                new Source(\n                    this.vertex,\n                    () => {\n                        return this.listen_(out.vertex, (a : A) => {\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\n                                            d.sampleNoTrans__(), e.sampleNoTrans__(),\n                                            f.sampleNoTrans__()));\n                        }, false);\n                    }\n                ),\n                new Source(b.getVertex__(), null),\n                new Source(c.getVertex__(), null),\n                new Source(d.getVertex__(), null),\n                new Source(e.getVertex__(), null),\n                new Source(f.getVertex__(), null)\n            ].concat(toSources(Lambda6_deps(f_)))\n        );\n        return out;\n\t}\n\n\t/**\n\t * Create a {@link Cell} with the specified initial value, that is updated\n     * by this stream's event values.\n     * <p>\n     * There is an implicit delay: State updates caused by event firings don't become\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\n     * until the following transaction. To put this another way,\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\n     * any state changes from the current transaction.\n     */\n    hold(initValue : A) : Cell<A> {\n        return new Cell<A>(initValue, this);\n\t}\n\n\t/**\n\t * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\n\t */\n\tholdLazy(initValue : Lazy<A>) : Cell<A> {\n\t    return new LazyCell<A>(initValue, this);\n\t}\n\n    /**\n     * Transform an event with a generalized state loop (a Mealy machine). The function\n     * is passed the input and the old state and returns the new state and output value.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    collect<B,S>(initState : S, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        return this.collectLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    collectLazy<B,S>(initState : Lazy<S>, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\n        const ea = this;\n        return Transaction.run(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                ebs = ea.snapshot(s, f),\n                eb = ebs.map((bs : Tuple2<B,S>) => { return bs.a; }),\n                es_out = ebs.map((bs : Tuple2<B,S>) => { return bs.b; });\n            es.loop(es_out);\n            return eb;\n        });\n    }\n\n    /**\n     * Accumulate on input event, outputting the new state each time.\n     * @param f Function to apply to update the state. It may construct FRP logic or use\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\n     */\n    accum<S>(initState : S, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        return this.accumLazy(new Lazy<S>(() => { return initState; }), f);\n    }\n\n    /**\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\n     * {@link Cell#sampleLazy()}.\n     */\n    accumLazy<S>(initState : Lazy<S>, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\n        const ea = this;\n        return Transaction.run(() => {\n            const es = new StreamLoop<S>(),\n                s = es.holdLazy(initState),\n                es_out = ea.snapshot(s, f);\n            es.loop(es_out);\n            return es_out.holdLazy(initState);\n        });\n    }\n\n    /**\n     * Return a stream that outputs only one value: the next event of the\n     * input stream, starting from the transaction in which once() was invoked.\n     */\n    once() : Stream<A> {\n    /*\n        return Transaction.run(() => {\n            const ev = this,\n                out = new StreamWithSend<A>();\n            let la : () => void = null;\n            la = ev.listen_(out.vertex, (a : A) => {\n                if (la !== null) {\n                    out.send_(a);\n                    la();\n                    la = null;\n                }\n            }, false);\n            return out;\n        });\n        */\n        // We can't use the implementation above, beacuse deregistering\n        // listeners triggers the exception\n        // \"send() was invoked before listeners were registered\"\n        // We can revisit this another time. For now we will use the less\n        // efficient implementation below.\n        const me = this;\n        return Transaction.run(() => me.gate(me.mapTo(false).hold(true)));\n    }\n\n    listen(h : (a : A) => void) : () => void {\n        return Transaction.run<() => void>(() => {\n            return this.listen_(Vertex.NULL, h, false);\n        });\n    }\n\n    listen_(target : Vertex,\n            h : (a : A) => void,\n            suppressEarlierFirings : boolean) : () => void {\n        if (this.vertex.register(target))\n            Transaction.currentTransaction.requestRegen();\n        const listener = new Listener<A>(h, target);\n        this.listeners.push(listener);\n        if (!suppressEarlierFirings && this.firings.length != 0) {\n            const firings = this.firings.slice();\n            Transaction.currentTransaction.prioritized(target, () => {\n                // Anything sent already in this transaction must be sent now so that\n                // there's no order dependency between send and listen.\n                for (let i = 0; i < firings.length; i++)\n                    h(firings[i]);\n            });\n        }\n        return () => {\n            let removed = false;\n            for (let i = 0; i < this.listeners.length; i++) {\n                if (this.listeners[i] == listener) {\n                    this.listeners.splice(i, 1);\n                    removed = true;\n                    break;\n                }\n            }\n            if (removed)\n                this.vertex.deregister(target);\n        };\n    }\n\n\n    /**\n     * Fantasy-land Algebraic Data Type Compatability.\n     * Stream satisfies the Functor and Monoid Categories (and hence Semigroup)\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\n     */\n\n    //map :: Functor f => f a ~> (a -> b) -> f b\n    'fantasy-land/map'<B>(f : ((a : A) => B)) : Stream<B> {\n      return this.map(f);\n    }\n\n    //concat :: Semigroup a => a ~> a -> a\n    'fantasy-land/concat'(a:Stream<A>) : Stream<A> {\n      return this.merge(a, (left:any, right) => {\n        return (Z.Semigroup.test(left)) ? Z.concat(left, right) : left;\n      });\n    }\n\n    //empty :: Monoid m => () -> m\n    'fantasy-land/empty'() : Stream<A> {\n      return new Stream<A>();\n    }\n}\n\nexport class StreamWithSend<A> extends Stream<A> {\n    constructor(vertex? : Vertex) {\n        super(vertex);\n    }\n\n    setVertex__(vertex : Vertex) {  // TO DO figure out how to hide this\n        this.vertex = vertex;\n    }\n\n    send_(a : A) : void {\n        // We throw this error if we send into FRP logic that has been constructed\n        // but nothing is listening to it yet. We need to do it this way because\n        // it's the only way to manage memory in a language with no finalizers.\n        if (this.vertex.refCount() == 0)\n            throw new Error(\"send() was invoked before listeners were registered\");\n\t\tif (this.firings.length == 0)\n\t\t\tTransaction.currentTransaction.last(() => {\n\t\t\t    this.firings = [];\n            });\n\t\tthis.firings.push(a);\n\t\tconst listeners = this.listeners.slice();\n        for (let i = 0; i < listeners.length; i++) {\n            const h = listeners[i].h;\n            Transaction.currentTransaction.prioritized(listeners[i].target, () => {\n                Transaction.currentTransaction.inCallback++;\n                try {\n                    h(a);\n                    Transaction.currentTransaction.inCallback--;\n                }\n                catch (err) {\n                    Transaction.currentTransaction.inCallback--;\n                    throw err;\n                }\n            });\n        }\n    }\n}\n\n/**\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\n */\nexport class StreamLoop<A> extends StreamWithSend<A> {\n    assigned__ : boolean = false;  // to do: Figure out how to hide this\n\n    constructor()\n    {\n        super();\n        this.vertex.name = \"StreamLoop\";\n    \tif (Transaction.currentTransaction === null)\n    \t    throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\n    }\n\n    /**\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(sa_out : Stream<A>) : void {\n        if (this.assigned__)\n            throw new Error(\"StreamLoop looped more than once\");\n        this.assigned__ = true;\n        this.vertex.addSource(\n            new Source(\n                sa_out.getVertex__(),\n                () => {\n                    return sa_out.listen_(this.vertex, (a : A) => {\n                        this.send_(a);\n                    }, false);\n                }\n            )\n        );\n    }\n}\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { StreamWithSend } from \"./Stream\";\nimport { CoalesceHandler } from \"./CoalesceHandler\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A stream that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\n * should downcast to {@link Stream}.\n */\nexport class StreamSink<A> extends StreamWithSend<A> {\n    constructor(f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n        super();\n        if (!f)\n            f = <(l : A, r : A) => A>((l : A, r : A) => {\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\n            });\n        this.coalescer = new CoalesceHandler<A>(f, this);\n    }\n\n    private coalescer : CoalesceHandler<A>;\n\n    send(a : A) : void {\n        Transaction.run<void>(\n            () => {\n                if (Transaction.currentTransaction.inCallback > 0)\n                    throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\n                this.coalescer.send_(a);\n            }\n        )\n    }\n}\n","import { Cell } from \"./Cell\";\nimport { Lazy } from \"./Lazy\";\nimport { LazyCell } from \"./LazyCell\";\nimport { Transaction } from \"./Transaction\";\nimport { StreamLoop } from \"./Stream\";\n\n/**\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\n */\nexport class CellLoop<A> extends LazyCell<A> {\n    constructor() {\n    \tsuper(null, new StreamLoop<A>());\n    }\n\n    /**\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\n     * or {@link Transaction#runVoid(Runnable)}.\n     */\n    loop(a_out : Cell<A>) : void {\n        const me = this;\n        Transaction.run(() => {\n            (<StreamLoop<A>>me.getStream__()).loop(a_out.getStream__());\n            me.lazyInitValue = a_out.sampleLazy();\n        });\n    }\n\n    sampleNoTrans__() : A\n    {\n        if (!(<StreamLoop<A>>this.getStream__()).assigned__)\n            throw new Error(\"CellLoop sampled before it was looped\");\n        return super.sampleNoTrans__();\n    }\n}\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\nimport { Cell } from \"./Cell\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * A cell that allows values to be pushed into it, acting as an interface between the\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\n * should downcast to {@link Cell}.\n */\nexport class CellSink<A> extends Cell<A> {\n    /**\n     * Construct a writable cell with the specified initial value. If multiple values are\n     * sent in the same transaction, the specified function is used to combine them.\n     *\n     * If the function is not supplied, then an exception will be thrown in this case.\n     */\n    constructor(initValue : A, f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\n    \tsuper(initValue, new StreamSink<A>(f));\n    }\n\n    /**\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\n     * You are not meant to use this to define your own primitives.\n     * @param a Value to push into the cell.\n     */\n    send(a : A) : void {\n        (<StreamSink<A>>this.getStream__()).send(a);\n    }\n}\n","export class Tuple2<A,B> {\n    constructor(a : A, b : B) {\n        this.a = a;\n        this.b = b;\n    }\n    a : A;\n    b : B;\n}\n","import { Vertex, Source } from \"./Vertex\";\nimport * as Collections from 'typescript-collections';\nimport { Stream, StreamWithSend } from \"./Stream\";\nimport { StreamSink } from \"./StreamSink\";\nimport { Cell } from \"./Cell\";\nimport { CellSink } from \"./CellSink\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * An interface for implementations of FRP timer systems.\n */\nexport abstract class TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    abstract setTimer(t : number, callback : () => void) : () => void;\n\n    /**\n     * Return the current clock time.\n     */\n    abstract now() : number;\n}\n\nlet nextSeq : number = 0;\n\nclass Event {\n    constructor(t : number, sAlarm : StreamWithSend<number>) {\n        this.t = t;\n        this.sAlarm = sAlarm;\n        this.seq = ++nextSeq;\n    }\n    t : number;\n    sAlarm : StreamWithSend<number>;\n    seq : number;  // Used to guarantee uniqueness\n}\n\nexport class TimerSystem {\n    constructor(impl : TimerSystemImpl) {\n        Transaction.run(() => {\n            this.impl = impl;\n            this.tMinimum = 0;\n            const timeSnk = new CellSink<number>(impl.now());\n            this.time = timeSnk;\n            // A dummy listener to time to keep it alive even when there are no other listeners.\n            this.time.listen((t : number) => { });\n            Transaction.onStart(() => {\n                // Ensure the time is always increasing from the FRP's point of view.\n                const t = this.tMinimum = Math.max(this.tMinimum, impl.now());\n                // Pop and execute all events earlier than or equal to t (the current time).\n                while (true) {\n                    let ev : Event = null;\n                    if (!this.eventQueue.isEmpty()) {\n                        let mev = this.eventQueue.minimum();\n                        if (mev.t <= t) {\n                            ev = mev;\n                            // TO DO: Detect infinite loops!\n                        }\n                    }\n                    if (ev != null) {\n                        timeSnk.send(ev.t);\n                        Transaction.run(() => ev.sAlarm.send_(ev.t));\n                    }\n                    else\n                        break;\n                }\n                timeSnk.send(t);\n            });\n        });\n    }\n\n    private impl : TimerSystemImpl;\n    private tMinimum : number;  // A guard to allow us to guarantee that the time as\n                                // seen by the FRP is always increasing.\n\n    /**\n     * A cell giving the current clock time.\n     */\n    time : Cell<number>;\n\n    private eventQueue : Collections.BSTree<Event> = new Collections.BSTree<Event>((a, b) => {\n        if (a.t < b.t) return -1;\n        if (a.t > b.t) return 1;\n        if (a.seq < b.seq) return -1;\n        if (a.seq > b.seq) return 1;\n        return 0;\n    });\n\n    /**\n     * A timer that fires at the specified time, which can be null, meaning\n     * that the alarm is not set.\n     */\n    at(tAlarm : Cell<number>) : Stream<number> {\n        let current : Event = null,\n            cancelCurrent : () => void = null,\n            active : boolean = false,\n            tAl : number = null,\n            sampled : boolean = false;\n        const sAlarm = new StreamWithSend<number>(null),\n            updateTimer = () => {\n                if (cancelCurrent !== null) {\n                    cancelCurrent();\n                    this.eventQueue.remove(current);\n                }\n                cancelCurrent = null;\n                current = null;\n                if (active) {\n                    if (!sampled) {\n                        sampled = true;\n                        tAl = tAlarm.sampleNoTrans__();\n                    }\n                    if (tAl !== null) {\n                        current = new Event(tAl, sAlarm);\n                        this.eventQueue.add(current);\n                        cancelCurrent = this.impl.setTimer(tAl, () => {\n                                    // Correction to ensure the clock time appears to be >= the\n                                    // alarm time. It can be a few milliseconds early, and\n                                    // this breaks things otherwise, because it doesn't think\n                                    // it's time to fire the alarm yet.\n                                    this.tMinimum = Math.max(this.tMinimum, tAl);\n                                    // Open and close a transaction to trigger queued\n                                    // events to run.\n                                    Transaction.run(() => {});\n                                });\n                    }\n                }\n            };\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\n                new Source(\n                    tAlarm.getVertex__(),\n                    () => {\n                        active = true;\n                        sampled = false;\n                        Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\n                        const kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), (oAlarm : number) => {\n                            tAl = oAlarm;\n                            sampled = true;\n                            updateTimer();\n                        }, false);\n                        return () => {\n                            active = false;\n                            updateTimer();\n                            kill();\n                        };\n                    }\n                )\n            ]\n        ));\n        return sAlarm;\n    }\n}\n\n","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using seconds as the time unit.\n */\nexport class SecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new SecondsTimerSystemImpl());\n    }\n}\n\nclass SecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, Math.max((t - this.now()) * 1000, 0));\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now() * 0.001;\n    }\n}\n","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\n\n/**\n * A timer system implementation using milliseconds as the time unit.\n */\nexport class MillisecondsTimerSystem extends TimerSystem {\n    constructor() {\n        super(new MillisecondsTimerSystemImpl());\n    }\n}\n\nclass MillisecondsTimerSystemImpl extends TimerSystemImpl {\n    /**\n     * Set a timer that will execute the specified callback at the specified time.\n     * @return A function that can be used to cancel the timer.\n     */\n    setTimer(t : number, callback : () => void) : () => void\n    {\n        let timeout = setTimeout(callback, Math.max(t - this.now(), 0));\n        return () => { clearTimeout(timeout); }\n    }\n\n    /**\n     * Return the current clock time.\n     */\n    now() : number\n    {\n        return Date.now();\n    }\n}\n","import { Stream, StreamWithSend } from \"./Stream\";\nimport { Vertex, Source } from \"./Vertex\";\nimport { Transaction } from \"./Transaction\";\n\nexport class IOAction {\n    /*!\n     * Convert a function that performs asynchronous I/O taking input A\n     * and returning a value of type B into an I/O action of type\n     * (sa : Stream<A>) => Stream<B>\n     */\n    static fromAsync<A,B>(performIO : (a : A, result : (b : B) => void) => void)\n            : (sa : Stream<A>) => Stream<B> {\n        return (sa : Stream<A>) => {\n            const out = new StreamWithSend<B>(null);\n            out.setVertex__(new Vertex(\"map\", 0, [\n                    new Source(\n                        sa.getVertex__(),\n                        () => {\n                            return sa.listen_(out.getVertex__(), (a : A) => {\n                                performIO(a, (b : B) => {\n                                    Transaction.run(() => {\n                                        out.send_(b);\n                                    });\n                                });\n                            }, false);\n                        }\n                    )\n                ]\n            ));\n            return out;\n        }\n    }\n}\n"],"names":["totalRegistrations","Color","origin","register_","this","Error","Source","target","registered","deregister_","increment","_this","decrement","roots","nextID","name","rank","sources","black","id","Vertex","targets","length","collectCycles","anyChanged","refCount","i","register","push","childrn","ensureBiggerThan","matched","splice","deregister","src","limit","visited","colStr","color","gray","white","purple","str","refCountAdj","chs","children","referrer","incRefCount","decRefCount","release","possibleRoots","buffered","free","markRoots","scanRoots","collectRoots","newRoots","markGray","scan","collectWhite","scanBlack","f","deps","Lambda1","Lambda2","Lambda3","Lambda4","Lambda5","Lambda6","ss","dep","getVertex__","action","seq","Entry","nextSeq","toString","Collections.PriorityQueue","a","b","Collections.Set","Transaction","toRegen","e","prioritizedQ","enqueue","entries","add","h","lastQ","childIx","postQ","existing","neu","clear","es","toArray","currentTransaction","checkRegen","isEmpty","dequeue","remove","parent_1","close","err","r","onStartHooks","transWas","runningOnStartHooks","out","Lambda2_toFunction","concat","toSources","Lambda2_deps","accumValid","CoalesceHandler","accum","prioritized","send_","Lazy","c","d","Unit","Operational","getStream__","run","sSpark","StreamWithSend","UNIT","sInitial","snapshot1","updates","orElse","s","split","map","setVertex__","listen_","as","post","cell","initValue","value","setStream","Stream","vertex","Cell","me","valueUpdate","last","lazyInitValue","NULL","sampleNoTrans__","sampleLazyNoTrans__","LazySample","hasValue","sample","holdLazy","sampleLazy","Lambda1_toFunction","fn0","fn","cf","aa","bb","apply","Lambda3_toFunction","cc","Lambda3_deps","Lambda4_toFunction","dd","Lambda4_deps","Lambda5_toFunction","ee","Lambda5_deps","Lambda6_toFunction","ff","Lambda6_deps","ca","state","ApplyState","cf_value","ca_value","src1","f_present","a_present","src2","coalesce__","l","cca","za","ba","last_ca","cca_value","kill2","kill1","csa","h2","sa","listen","switchC","_super","tslib_1.__extends","LazyCell","get","Lambda1_deps","merge","left","right","coalescer","merge_","snapshot","pred","filterNotNull","f_","initState","collectLazy","ea","StreamLoop","ebs","eb","bs","es_out","loop","accumLazy","gate","mapTo","hold","suppressEarlierFirings","requestRegen","listener","Listener","listeners","firings","firings_1","slice","removed","Z.Semigroup","test","Z.concat","inCallback","sa_out","assigned__","addSource","StreamSink","CellLoop","a_out","CellSink","send","t","sAlarm","impl","Collections.BSTree","tMinimum","timeSnk","now","time","onStart","Math","max","ev","eventQueue","mev","minimum","TimerSystem","tAlarm","current","cancelCurrent","active","tAl","sampled","updateTimer","Event","setTimer","kill","oAlarm","SecondsTimerSystemImpl","callback","timeout","setTimeout","clearTimeout","Date","TimerSystemImpl","MillisecondsTimerSystemImpl","IOAction","performIO"],"mappings":"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"}