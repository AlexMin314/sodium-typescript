{"version":3,"file":"sodium.umd.min.js","sources":["../src/lib/sodium/Vertex.ts","../src/lib/sodium/Lambda.ts","../src/lib/sodium/Transaction.ts","../src/lib/sodium/CoalesceHandler.ts","../src/lib/sodium/Lazy.ts","../src/lib/sodium/Unit.ts","../src/lib/sodium/Operational.ts","../src/lib/sodium/Cell.ts","../src/lib/sodium/Listener.ts","../src/lib/sodium/LazyCell.ts","../src/lib/sodium/Stream.ts","../src/lib/sodium/StreamSink.ts","../src/lib/sodium/CellLoop.ts","../src/lib/sodium/CellSink.ts","../src/lib/sodium/Tuple2.ts","../src/lib/sodium/TimerSystem.ts","../src/lib/sodium/SecondsTimerSystem.ts","../src/lib/sodium/MillisecondsTimerSystem.ts","../src/lib/sodium/IOAction.ts"],"sourcesContent":["import { Set } from \"typescript-collections\";\r\n\r\nlet totalRegistrations : number = 0;\r\nexport function getTotalRegistrations() : number {\r\n    return totalRegistrations;\r\n}\r\n\r\nexport class Source {\r\n    constructor(\r\n        origin : Vertex,\r\n        register_ : () => () => void\r\n    ) {\r\n        if (origin === null)\r\n            throw new Error(\"null origin!\");\r\n        this.origin = origin;\r\n        this.register_ = register_;\r\n    }\r\n    origin : Vertex;\r\n    private register_ : () => () => void;\r\n    private registered : boolean = false;\r\n    private deregister_ : () => void = null;\r\n\r\n    register(target : Vertex) : void {\r\n        if (!this.registered) {\r\n            this.registered = true;\r\n            if (this.register_ !== null)\r\n                this.deregister_ = this.register_();\r\n            else {\r\n                this.origin.increment(target);\r\n                this.deregister_ = () => this.origin.decrement(target);\r\n            }\r\n        }\r\n    }\r\n    deregister(target : Vertex) : void {\r\n        if (this.registered) {\r\n            this.registered = false;\r\n            if (this.deregister_ !== null)\r\n                this.deregister_();\r\n        }\r\n    }\r\n}\r\n\r\nexport enum Color { black, gray, white, purple };\r\nlet roots : Vertex[] = [];\r\nlet nextID : number = 0;\r\nlet verbose : boolean = false;\r\n\r\nexport function setVerbose(v : boolean) : void { verbose = v; }\r\n\r\nexport function describeAll(v : Vertex, visited : Set<number>)\r\n{\r\n    if (visited.contains(v.id)) return;\r\n    console.log(v.descr());\r\n    visited.add(v.id);\r\n    let chs = v.children();\r\n    for (let i = 0; i < chs.length; i++)\r\n        describeAll(chs[i], visited);\r\n}\r\n\r\nexport class Vertex {\r\n    static NULL : Vertex = new Vertex(\"user\", 1e12, []);\r\n    id : number;\r\n\r\n\tconstructor(name : string, rank : number, sources : Source[]) {\r\n\t    this.name = name;\r\n\t\tthis.rank = rank;\r\n\t\tthis.sources = sources;\r\n\t\tthis.id = nextID++;\r\n\t}\r\n\tname : string;\r\n    rank : number;\r\n    sources : Source[];\r\n    targets : Vertex[] = [];\r\n    childrn : Vertex[] = [];\r\n    refCount() : number { return this.targets.length; };\r\n    visited : boolean = false;\r\n    register(target : Vertex) : boolean {\r\n        return this.increment(target);\r\n    }\r\n    deregister(target : Vertex) : void {\r\n        if (verbose)\r\n            console.log(\"deregister \"+this.descr()+\" => \"+target.descr());\r\n        this.decrement(target);\r\n        Vertex.collectCycles();\r\n    }\r\n    private incRefCount(target : Vertex) : boolean {\r\n        let anyChanged : boolean = false;\r\n        if (this.refCount() == 0) {\r\n            for (let i = 0; i < this.sources.length; i++)\r\n                this.sources[i].register(this);\r\n        }\r\n        this.targets.push(target);\r\n        target.childrn.push(this);\r\n        if (target.ensureBiggerThan(this.rank))\r\n            anyChanged = true;\r\n        totalRegistrations++;\r\n        return anyChanged;\r\n    }\r\n\r\n    private decRefCount(target : Vertex) : void {\r\n        if (verbose)\r\n            console.log(\"DEC \"+this.descr());\r\n        let matched = false;\r\n        for (let i = 0; i < target.childrn.length; i++)\r\n            if (target.childrn[i] === this) {\r\n                target.childrn.splice(i, 1);\r\n            }\r\n        for (let i = 0; i < this.targets.length; i++)\r\n            if (this.targets[i] === target) {\r\n                this.targets.splice(i, 1);\r\n                matched = true;\r\n                break;\r\n            }\r\n        if (matched) {\r\n            if (this.refCount() == 0) {\r\n                for (let i = 0; i < this.sources.length; i++)\r\n                    this.sources[i].deregister(this);\r\n            }\r\n            totalRegistrations--;\r\n        }\r\n    }\r\n\r\n    addSource(src : Source) : void {\r\n        this.sources.push(src);\r\n        if (this.refCount() > 0)\r\n            src.register(this);\r\n    }\r\n\r\n\tprivate ensureBiggerThan(limit : number) : boolean {\r\n\t\tif (this.rank > limit || this.visited)\r\n\t\t\treturn false;\r\n\r\n        this.visited = true;\r\n\t\tthis.rank = limit + 1;\r\n\t\tfor (let i = 0; i < this.targets.length; i++)\r\n\t\t\tthis.targets[i].ensureBiggerThan(this.rank);\r\n        this.visited = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tdescr() : string {\r\n        let colStr : string = null;\r\n        switch (this.color) {\r\n        case Color.black: colStr = \"black\"; break;\r\n        case Color.gray:  colStr = \"gray\"; break;\r\n        case Color.white: colStr = \"white\"; break;\r\n        case Color.purple: colStr = \"purple\"; break;\r\n        }\r\n        let str = this.id+\" \"+this.name+\" [\"+this.refCount()+\"/\"+this.refCountAdj+\"] \"+colStr+\" ->\";\r\n        let chs = this.children();\r\n        for (let i = 0; i < chs.length; i++) {\r\n            str = str + \" \" + chs[i].id;\r\n        }\r\n        return str;\r\n\t}\r\n\r\n\t// --------------------------------------------------------\r\n\t// Synchronous Cycle Collection algorithm presented in \"Concurrent\r\n\t// Cycle Collection in Reference Counted Systems\" by David F. Bacon\r\n\t// and V.T. Rajan.\r\n\r\n    color : Color = Color.black;\r\n    buffered : boolean = false;\r\n    refCountAdj : number = 0;\r\n\r\n\tchildren() : Vertex[] { return this.childrn; }\r\n\r\n\tincrement(referrer : Vertex) : boolean {\r\n\t    return this.incRefCount(referrer);\r\n\t}\r\n\r\n\tdecrement(referrer : Vertex) : void {\r\n\t    this.decRefCount(referrer);\r\n\t    if (this.refCount() == 0)\r\n\t        this.release();\r\n        else\r\n            this.possibleRoots();\r\n\t}\r\n\r\n    release() : void {\r\n        this.color = Color.black;\r\n        if (!this.buffered)\r\n            this.free();\r\n    }\r\n\r\n    free() : void {\r\n        while (this.targets.length > 0)\r\n            this.decRefCount(this.targets[0]);\r\n    }\r\n\r\n\tpossibleRoots() : void {\r\n\t    if (this.color != Color.purple) {\r\n\t        this.color = Color.purple;\r\n\t        if (!this.buffered) {\r\n                this.buffered = true;\r\n                roots.push(this);\r\n            }\r\n        }\r\n\t}\r\n\r\n\tstatic collectCycles() : void {\r\n\t    Vertex.markRoots();\r\n\t    Vertex.scanRoots();\r\n\t    Vertex.collectRoots();\r\n\t}\r\n\r\n\tstatic markRoots() : void {\r\n\t    const newRoots : Vertex[] = [];\r\n\t    for (let i = 0; i < roots.length; i++) {\r\n            if (verbose)\r\n                console.log(\"markRoots \"+roots[i].descr());  // ###\r\n\t        if (roots[i].color == Color.purple) {\r\n\t            roots[i].markGray();\r\n\t            newRoots.push(roots[i]);\r\n            }\r\n\t        else {\r\n\t            roots[i].buffered = false;\r\n\t            if (roots[i].color == Color.black && roots[i].refCount() == 0)\r\n\t                roots[i].free();\r\n            }\r\n\t    }\r\n\t    roots = newRoots;\r\n\t}\r\n\r\n\tstatic scanRoots() : void {\r\n\t    for (let i = 0; i < roots.length; i++)\r\n\t        roots[i].scan();\r\n\t}\r\n\r\n\tstatic collectRoots() : void {\r\n\t    for (let i = 0; i < roots.length; i++) {\r\n\t        roots[i].buffered = false;\r\n\t        roots[i].collectWhite();\r\n\t    }\r\n\t    roots = [];\r\n\t}\r\n\r\n\tmarkGray() : void {\r\n\t    if (this.color != Color.gray) {\r\n\t        this.color = Color.gray;\r\n\t        let chs = this.children();\r\n\t        for (let i = 0; i < chs.length; i++) {\r\n\t            chs[i].refCountAdj--;\r\n                if (verbose)\r\n                    console.log(\"markGray \"+this.descr());\r\n\t            chs[i].markGray();\r\n            }\r\n\t    }\r\n\t}\r\n\r\n\tscan() : void {\r\n\t    if (verbose)\r\n            console.log(\"scan \"+this.descr());\r\n\t    if (this.color == Color.gray) {\r\n\t        if (this.refCount()+this.refCountAdj > 0)\r\n\t            this.scanBlack();\r\n\t        else {\r\n\t            this.color = Color.white;\r\n                if (verbose)\r\n                    console.log(\"scan WHITE \"+this.descr());\r\n                let chs = this.children();\r\n                for (let i = 0; i < chs.length; i++)\r\n                    chs[i].scan();\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\tscanBlack() : void {\r\n\t    this.color = Color.black;\r\n        let chs = this.children();\r\n        for (let i = 0; i < chs.length; i++) {\r\n            chs[i].refCountAdj++;\r\n            if (verbose)\r\n                console.log(\"scanBlack \"+this.descr());\r\n            if (chs[i].color != Color.black)\r\n                chs[i].scanBlack();\r\n        }\r\n\t}\r\n\r\n\tcollectWhite() : void {\r\n\t    if (this.color == Color.white && !this.buffered) {\r\n            if (verbose)\r\n                console.log(\"collectWhite \"+this.descr());\r\n\t        this.color = Color.black;\r\n\t        this.refCountAdj = 0;\r\n            let chs = this.children();\r\n            for (let i = 0; i < chs.length; i++)\r\n                chs[i].collectWhite();\r\n            this.free();\r\n\t    }\r\n\t}\r\n}\r\n","import { Stream } from \"./Stream\";\r\nimport { Cell } from \"./Cell\";\r\nimport { Source } from \"./Vertex\";\r\n\r\nexport class Lambda1<A,B> {\r\n    constructor(f : (a : A) => B,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A) => B;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda1<A,B>(f : (a : A) => B,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda1<A,B>\r\n{\r\n    return new Lambda1(f, deps);\r\n}\r\n\r\nexport function Lambda1_deps<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda1)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda1_toFunction<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : (a : A) => B {\r\n    if (f instanceof Lambda1)\r\n        return f.f;\r\n    else\r\n        return <(a : A) => B>f;\r\n}\r\n\r\nexport class Lambda2<A,B,C> {\r\n    constructor(f : (a : A, b : B) => C,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B) => C;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda2<A,B,C>(f : (a : A, b : B) => C,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda2<A,B,C>\r\n{\r\n    return new Lambda2(f, deps);\r\n}\r\n\r\nexport function Lambda2_deps<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda2)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda2_toFunction<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : (a : A, b : B) => C {\r\n    if (f instanceof Lambda2)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B) => C>f;\r\n}\r\n\r\nexport class Lambda3<A,B,C,D> {\r\n    constructor(f : (a : A, b : B, c : C) => D,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C) => D;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda3<A,B,C,D>(f : (a : A, b : B, c : C) => D,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda3<A,B,C,D>\r\n{\r\n    return new Lambda3(f, deps);\r\n}\r\n\r\nexport function Lambda3_deps<A,B,C,D>(f : ((a : A, b : B, c : C) => D)\r\n        | Lambda3<A,B,C,D>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda3)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda3_toFunction<A,B,C,D>(f : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : (a : A, b : B, c : C) => D {\r\n    if (f instanceof Lambda3)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C) => D>f;\r\n}\r\n\r\nexport class Lambda4<A,B,C,D,E> {\r\n    constructor(f : (a : A, b : B, c : C, d : D) => E,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C, d : D) => E;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda4<A,B,C,D,E>(f : (a : A, b : B, c : C, d : D) => E,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda4<A,B,C,D,E>\r\n{\r\n    return new Lambda4(f, deps);\r\n}\r\n\r\nexport function Lambda4_deps<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\r\n        | Lambda4<A,B,C,D,E>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda4)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda4_toFunction<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\r\n        | Lambda4<A,B,C,D,E>) : (a : A, b : B, c : C, d : D) => E {\r\n    if (f instanceof Lambda4)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C, d : D) => E>f;\r\n}\r\n\r\nexport class Lambda5<A,B,C,D,E,F> {\r\n    constructor(f : (a : A, b : B, c : C, d : D, e : E) => F,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C, d : D, e : E) => F;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda5<A,B,C,D,E,F>(f : (a : A, b : B, c : C, d : D, e : E) => F,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda5<A,B,C,D,E,F>\r\n{\r\n    return new Lambda5(f, deps);\r\n}\r\n\r\nexport function Lambda5_deps<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\r\n        | Lambda5<A,B,C,D,E,F>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda5)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda5_toFunction<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\r\n        | Lambda5<A,B,C,D,E,F>) : (a : A, b : B, c : C, d : D, e : E) => F {\r\n    if (f instanceof Lambda5)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C, d : D, e : E) => F>f;\r\n}\r\n\r\nexport class Lambda6<A,B,C,D,E,F,G> {\r\n    constructor(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C, d : D, e : E, f : F) => G;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda6<A,B,C,D,E,F,G>(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda6<A,B,C,D,E,F,G>\r\n{\r\n    return new Lambda6(f, deps);\r\n}\r\n\r\nexport function Lambda6_deps<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\r\n        | Lambda6<A,B,C,D,E,F,G>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda6)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda6_toFunction<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\r\n        | Lambda6<A,B,C,D,E,F,G>) : (a : A, b : B, c : C, d : D, e : E, f : F) => G {\r\n    if (f instanceof Lambda6)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C, d : D, e : E, f : F) => G>f;\r\n}\r\n\r\nexport function toSources(deps : Array<Stream<any>|Cell<any>>) : Source[] {\r\n    const ss : Source[] = [];\r\n    for (let i = 0; i < deps.length; i++) {\r\n        const dep = deps[i];\r\n        ss.push(new Source(dep.getVertex__(), null));\r\n    }\r\n    return ss;\r\n}\r\n","import {Vertex} from './Vertex';\r\nimport * as Collections from 'typescript-collections';\r\n\r\nexport class Entry\r\n{\r\n  constructor(rank: Vertex, action: () => void)\r\n  {\r\n    this.rank = rank;\r\n    this.action = action;\r\n    this.seq = Entry.nextSeq++;\r\n  }\r\n\r\n  private static nextSeq: number = 0;\r\n  rank: Vertex;\r\n  action: () => void;\r\n  seq: number;\r\n\r\n  toString(): string\r\n  {\r\n    return this.seq.toString();\r\n  }\r\n}\r\n\r\nexport class Transaction\r\n{\r\n  public static currentTransaction: Transaction = null;\r\n  private static onStartHooks: (() => void)[] = [];\r\n  private static runningOnStartHooks: boolean = false;\r\n\r\n  constructor() {}\r\n\r\n  inCallback: number = 0;\r\n  private toRegen: boolean = false;\r\n\r\n  requestRegen(): void\r\n  {\r\n    this.toRegen = true;\r\n  }\r\n\r\n  prioritizedQ: Collections.PriorityQueue<Entry> = new Collections.PriorityQueue<Entry>((a, b) =>\r\n  {\r\n    // Note: Low priority numbers are treated as \"greater\" according to this\r\n    // comparison, so that the lowest numbers are highest priority and go first.\r\n    if (a.rank.rank < b.rank.rank) return 1;\r\n    if (a.rank.rank > b.rank.rank) return -1;\r\n    if (a.seq < b.seq) return 1;\r\n    if (a.seq > b.seq) return -1;\r\n    return 0;\r\n  });\r\n  private entries: Collections.Set<Entry> = new Collections.Set<Entry>((a) => a.toString());\r\n  private sampleQ: Array<() => void> = [];\r\n  private lastQ: Array<() => void> = [];\r\n  private postQ: Array<() => void> = null;\r\n\r\n  prioritized(target: Vertex, action: () => void): void\r\n  {\r\n    const e = new Entry(target, action);\r\n    this.prioritizedQ.enqueue(e);\r\n    this.entries.add(e);\r\n  }\r\n\r\n  sample(h: () => void): void\r\n  {\r\n    this.sampleQ.push(h);\r\n  }\r\n\r\n  last(h: () => void): void\r\n  {\r\n    this.lastQ.push(h);\r\n  }\r\n\r\n  /**\r\n   * Add an action to run after all last() actions.\r\n   */\r\n  post(childIx: number, action: () => void): void\r\n  {\r\n    if (this.postQ == null)\r\n      this.postQ = [];\r\n    // If an entry exists already, combine the old one with the new one.\r\n    while (this.postQ.length <= childIx)\r\n      this.postQ.push(null);\r\n    const existing = this.postQ[childIx],\r\n      neu =\r\n        existing === null ? action\r\n          : () =>\r\n        {\r\n          existing();\r\n          action();\r\n        };\r\n    this.postQ[childIx] = neu;\r\n  }\r\n\r\n  // If the priority queue has entries in it when we modify any of the nodes'\r\n  // ranks, then we need to re-generate it to make sure it's up-to-date.\r\n  private checkRegen(): void\r\n  {\r\n    if (this.toRegen)\r\n    {\r\n      this.toRegen = false;\r\n      this.prioritizedQ.clear();\r\n      const es = this.entries.toArray();\r\n      for (let i: number = 0; i < es.length; i++)\r\n        this.prioritizedQ.enqueue(es[i]);\r\n    }\r\n  }\r\n\r\n  public isActive() : boolean\r\n  {\r\n    return Transaction.currentTransaction ? true : false;\r\n  }\r\n\r\n  close(): void\r\n  {\r\n    while(true)\r\n    {\r\n      while (true)\r\n      {\r\n        this.checkRegen();\r\n        if (this.prioritizedQ.isEmpty()) break;\r\n        const e = this.prioritizedQ.dequeue();\r\n        this.entries.remove(e);\r\n        e.action();\r\n      }\r\n\r\n      const sq = this.sampleQ;\r\n      this.sampleQ = [];\r\n      for (let i = 0; i < sq.length; i++)\r\n        sq[i]();\r\n\r\n      if(this.prioritizedQ.isEmpty() && this.sampleQ.length < 1) break;\r\n    }\r\n\r\n    for (let i = 0; i < this.lastQ.length; i++)\r\n      this.lastQ[i]();\r\n    this.lastQ = [];\r\n    if (this.postQ != null)\r\n    {\r\n      for (let i = 0; i < this.postQ.length; i++)\r\n      {\r\n        if (this.postQ[i] != null)\r\n        {\r\n          const parent = Transaction.currentTransaction;\r\n          try\r\n          {\r\n            if (i > 0)\r\n            {\r\n              Transaction.currentTransaction = new Transaction();\r\n              try\r\n              {\r\n                this.postQ[i]();\r\n                Transaction.currentTransaction.close();\r\n              }\r\n              catch (err)\r\n              {\r\n                Transaction.currentTransaction.close();\r\n                throw err;\r\n              }\r\n            }\r\n            else\r\n            {\r\n              Transaction.currentTransaction = null;\r\n              this.postQ[i]();\r\n            }\r\n            Transaction.currentTransaction = parent;\r\n          }\r\n          catch (err)\r\n          {\r\n            Transaction.currentTransaction = parent;\r\n            throw err;\r\n          }\r\n        }\r\n      }\r\n      this.postQ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a runnable that will be executed whenever a transaction is started.\r\n   * That runnable may start transactions itself, which will not cause the\r\n   * hooks to be run recursively.\r\n   *\r\n   * The main use case of this is the implementation of a time/alarm system.\r\n   */\r\n  static onStart(r: () => void): void\r\n  {\r\n    Transaction.onStartHooks.push(r);\r\n  }\r\n\r\n  public static run<A>(f: () => A): A\r\n  {\r\n    const transWas: Transaction = Transaction.currentTransaction;\r\n    if (transWas === null)\r\n    {\r\n      if (!Transaction.runningOnStartHooks)\r\n      {\r\n        Transaction.runningOnStartHooks = true;\r\n        try\r\n        {\r\n          for (let i = 0; i < Transaction.onStartHooks.length; i++)\r\n            Transaction.onStartHooks[i]();\r\n        }\r\n        finally\r\n        {\r\n          Transaction.runningOnStartHooks = false;\r\n        }\r\n      }\r\n      Transaction.currentTransaction = new Transaction();\r\n    }\r\n    try\r\n    {\r\n      const a: A = f();\r\n      if (transWas === null)\r\n      {\r\n        Transaction.currentTransaction.close();\r\n        Transaction.currentTransaction = null;\r\n      }\r\n      return a;\r\n    }\r\n    catch (err)\r\n    {\r\n      if (transWas === null)\r\n      {\r\n        Transaction.currentTransaction.close();\r\n        Transaction.currentTransaction = null;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\r\n         toSources } from \"./Lambda\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { StreamWithSend } from \"./Stream\";\r\nimport { Vertex } from \"./Vertex\";\r\n\r\nexport class CoalesceHandler<A>\r\n{\r\n\tconstructor(f : ((l : A, r : A) => A) | Lambda2<A,A,A>, out : StreamWithSend<A>)\r\n\t{\r\n\t    this.f = Lambda2_toFunction(f);\r\n\t    this.out = out;\r\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(\r\n            toSources(Lambda2_deps(f)));\r\n        this.accumValid = false;\r\n    }\r\n\tprivate f : (l : A, r : A) => A;\r\n\tprivate out : StreamWithSend<A>;\r\n\tprivate accumValid : boolean;\r\n    private accum : A;\r\n    private verbose : boolean;\r\n    send_(a : A) {\r\n        if (this.accumValid)\r\n            this.accum = this.f(this.accum, a);\r\n        else {\r\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), () => {\r\n                this.out.send_(this.accum);\r\n                this.accumValid = false;\r\n                this.accum = null;\r\n            });\r\n            this.accum = a;\r\n            this.accumValid = true;\r\n        }\r\n    }\r\n}\r\n","/**\r\n * A representation for a value that may not be available until the current\r\n * transaction is closed.\r\n */\r\nexport class Lazy<A> {\r\n    constructor(f : () => A) {\r\n        this.f = f;\r\n    }\r\n\r\n    private f : () => A;\r\n\r\n    /**\r\n     * Get the value if available, throwing an exception if not.\r\n     * In the general case this should only be used in subsequent transactions to\r\n     * when the Lazy was obtained.\r\n     */\r\n    get() : A {\r\n        return this.f();\r\n    }\r\n\r\n    /**\r\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazy's value.\r\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\r\n     */\r\n    map<B>(f : (a : A) => B) {\r\n        return new Lazy<B>(() => { return f(this.f()); });\r\n    }\r\n\r\n\t/**\r\n\t * Lift a binary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n\t */\r\n    lift<B,C>(b : Lazy<B>, f : (a : A, b : B) => C) : Lazy<C> {\r\n        return new Lazy<C>(() => { return f(this.f(), b.f()); });\r\n    }\r\n\r\n\t/**\r\n\t * Lift a ternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n\t */\r\n    lift3<B,C,D>(b : Lazy<B>, c : Lazy<C>, f : (a : A, b : B, c : C) => D) : Lazy<D> {\r\n        return new Lazy<D>(() => { return f(this.f(), b.f(), c.f()); });\r\n    }\r\n\r\n\t/**\r\n\t * Lift a quaternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n\t */\r\n    lift4<B,C,D,E>(b : Lazy<B>, c : Lazy<C>, d : Lazy<D>, f : (a : A, b : B, c : C, d : D) => E) : Lazy<E> {\r\n        return new Lazy<E>(() => { return f(this.f(), b.f(), c.f(), d.f()); });\r\n    }\r\n}\r\n","export class Unit {\r\n    static UNIT : Unit = new Unit();\r\n    constructor() {}\r\n}\r\n","import { Stream, StreamWithSend } from \"./Stream\";\r\nimport { Cell } from \"./Cell\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { Unit } from \"./Unit\";\r\nimport { Source, Vertex } from \"./Vertex\";\r\n\r\nexport class Operational {\r\n    /**\r\n     * A stream that gives the updates/steps for a {@link Cell}.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    static updates<A>(c : Cell<A>) : Stream<A> {\r\n        /*  Don't think this is needed\r\n        const out = new StreamWithSend<A>(null);\r\n        out.setVertex__(new Vertex(\"updates\", 0, [\r\n                new Source(\r\n                    c.getStream__().getVertex__(),\r\n                    () => {\r\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\r\n                            out.send_(a);\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(\r\n                    c.getVertex__(),\r\n                    () => {\r\n                        return () => { };\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return out;\r\n        */\r\n        return c.getStream__();\r\n    }\r\n\r\n    /**\r\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\r\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\r\n     * firing for each update/step of the cell's value.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    static value<A>(c : Cell<A>) : Stream<A> {\r\n        return Transaction.run(() => {\r\n            const sSpark = new StreamWithSend<Unit>();\r\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), () => {\r\n                sSpark.send_(Unit.UNIT);\r\n            });\r\n            const sInitial = sSpark.snapshot1(c);\r\n            return Operational.updates(c).orElse(sInitial);\r\n        });\r\n    }\r\n\r\n\t/**\r\n\t * Push each event onto a new transaction guaranteed to come before the next externally\r\n\t * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\r\n\t */\r\n\tstatic defer<A>(s : Stream<A>) : Stream<A> {\r\n\t    return Operational.split<A>(s.map((a : A) => {\r\n\t        return [a];\r\n\t    }));\r\n    }\r\n\r\n\t/**\r\n\t * Push each event in the list onto a newly created transaction guaranteed\r\n\t * to come before the next externally initiated transaction. Note that the semantics\r\n\t * are such that two different invocations of split() can put events into the same\r\n\t * new transaction, so the resulting stream's events could be simultaneous with\r\n\t * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\r\n\t */\r\n\tstatic split<A>(s : Stream<Array<A>>) : Stream<A> {\r\n\t    const out = new StreamWithSend<A>(null);\r\n        out.setVertex__(new Vertex(\"split\", 0, [\r\n                new Source(\r\n                    s.getVertex__(),\r\n                    () => {\r\n                        return s.listen_(out.getVertex__(), (as : Array<A>) => {\r\n                            for (let i = 0; i < as.length; i++) {\r\n                                Transaction.currentTransaction.post(i, () => {\r\n                                    Transaction.run(() => {\r\n                                        out.send_(as[i]);\r\n                                    });\r\n                                });\r\n                            }\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return out;\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\r\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\r\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\r\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\r\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\r\n         toSources } from \"./Lambda\";\r\nimport { Source, Vertex } from \"./Vertex\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { Lazy } from \"./Lazy\";\r\nimport { Listener } from \"./Listener\";\r\nimport { Stream, StreamWithSend } from \"./Stream\";\r\nimport { Operational } from \"./Operational\";\r\n\r\nclass LazySample<A> {\r\n    constructor(cell : Cell<A>) {\r\n        this.cell = cell;\r\n    }\r\n    cell : Cell<A>;\r\n    hasValue : boolean = false;\r\n    value : A = null;\r\n}\r\n\r\nclass ApplyState<A,B> {\r\n    constructor() {}\r\n    f : (a : A) => B = null;\r\n    f_present : boolean = false;\r\n    a : A = null;\r\n    a_present : boolean = false;\r\n}\r\n\r\nexport class Cell<A> {\r\n\tprivate str : Stream<A>;\r\n\tprotected value : A;\r\n\tprotected valueUpdate : A;\r\n\tprivate cleanup : () => void;\r\n\tprotected lazyInitValue : Lazy<A>;  // Used by LazyCell\r\n\tprivate vertex : Vertex;\r\n\r\n    constructor(initValue : A, str? : Stream<A>) {\r\n        this.value = initValue;\r\n        if (!str) {\r\n            this.str = new Stream<A>();\r\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\r\n        }\r\n        else\r\n            Transaction.run(() => this.setStream(str));\r\n    }\r\n\r\n    protected setStream(str : Stream<A>) {\r\n        this.str = str;\r\n        const me = this,\r\n              src = new Source(\r\n                str.getVertex__(),\r\n                () => {\r\n                    return str.listen_(me.vertex, (a : A) => {\r\n                        if (me.valueUpdate == null) {\r\n                            Transaction.currentTransaction.last(() => {\r\n                                me.value = me.valueUpdate;\r\n                                me.lazyInitValue = null;\r\n                                me.valueUpdate = null;\r\n                            });\r\n                        }\r\n                        me.valueUpdate = a;\r\n                    }, false);\r\n                }\r\n            );\r\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\r\n        // We do a trick here of registering the source for the duration of the current\r\n        // transaction so that we are guaranteed to catch any stream events that\r\n        // occur in the same transaction.\r\n        this.vertex.register(Vertex.NULL);\r\n        Transaction.currentTransaction.last(() => {\r\n            this.vertex.deregister(Vertex.NULL);\r\n        });\r\n    }\r\n\r\n    getVertex__() : Vertex {\r\n        return this.vertex;\r\n    }\r\n\r\n    getStream__() : Stream<A> {  // TO DO: Figure out how to hide this\r\n        return this.str;\r\n    }\r\n\r\n    /**\r\n     * Sample the cell's current value.\r\n     * <p>\r\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\r\n     * miss any updates, but in many circumstances it makes sense.\r\n     * <p>\r\n     * NOTE: In the Java and other versions of Sodium, using sample() inside map(), filter() and\r\n     * merge() is encouraged. In the Javascript/Typescript version, not so much, for the\r\n     * following reason: The memory management is different in the Javascript version, and this\r\n     * requires us to track all dependencies. In order for the use of sample() inside\r\n     * a closure to be correct, the cell that was sample()d inside the closure would have to be\r\n     * declared explicitly using the helpers lambda1(), lambda2(), etc. Because this is\r\n     * something that can be got wrong, we don't encourage this kind of use of sample() in\r\n     * Javascript. Better and simpler to use snapshot().\r\n     * <p>\r\n     * NOTE: If you need to sample() a cell, you have to make sure it's \"alive\" in terms of\r\n     * memory management or it will ignore updates. To make a cell work correctly\r\n     * with sample(), you have to ensure that it's being used. One way to guarantee this is\r\n     * to register a dummy listener on the cell. It will also work to have it referenced\r\n     * by something that is ultimately being listened to.\r\n     */\r\n    sample() : A {\r\n        return Transaction.run(() => { return this.sampleNoTrans__(); });\r\n    }\r\n\r\n    sampleNoTrans__() : A {  // TO DO figure out how to hide this\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\r\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\r\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\r\n     */\r\n    sampleLazy() : Lazy<A> {\r\n        const me = this;\r\n        return Transaction.run(() => me.sampleLazyNoTrans__());\r\n    }\r\n\r\n    sampleLazyNoTrans__() : Lazy<A> {  // TO DO figure out how to hide this\r\n        const me = this,\r\n            s = new LazySample<A>(me);\r\n        Transaction.currentTransaction.sample(() => {\r\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\r\n            s.hasValue = true;\r\n            s.cell = null;\r\n        });\r\n        return new Lazy<A>(() => {\r\n            if (s.hasValue)\r\n                return s.value;\r\n            else\r\n                return s.cell.sample();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Transform the cell's value according to the supplied function, so the returned Cell\r\n     * always reflects the value of the function applied to the input Cell's value.\r\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\r\n     */\r\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Cell<B> {\r\n        const c = this;\r\n        return Transaction.run(() =>\r\n            Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)))\r\n        );\r\n    }\r\n\r\n\t/**\r\n\t * Lift a binary function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift<B,C>(b : Cell<B>,\r\n\t          fn0 : ((a : A, b : B) => C) |\r\n\t                Lambda2<A,B,C>) : Cell<C> {\r\n        const fn = Lambda2_toFunction(fn0),\r\n            cf = this.map((aa : A) => (bb : B) => fn(aa, bb));\r\n        return Cell.apply(cf, b,\r\n            toSources(Lambda2_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a ternary function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift3<B,C,D>(b : Cell<B>, c : Cell<C>,\r\n\t             fn0 : ((a : A, b : B, c : C) => D) |\r\n\t                   Lambda3<A,B,C,D>) : Cell<D> {\r\n        const fn = Lambda3_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => D =\r\n                 (aa : A) => (bb : B) => (cc : C) => fn(aa, bb, cc),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply<B, (c : C) => D>(cf, b),\r\n                   c,\r\n                   toSources(Lambda3_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a quaternary function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\r\n\t               fn0 : ((a : A, b : B, c : C, d : D) => E) |\r\n\t                     Lambda4<A,B,C,D,E>) : Cell<E> {\r\n        const fn = Lambda4_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => E =\r\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => fn(aa, bb, cc, dd),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply(\r\n                       Cell.apply<B, (c : C) => (d : D) => E>(cf, b),\r\n                       c),\r\n                   d,\r\n                   toSources(Lambda4_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\r\n\t                 fn0 : ((a : A, b : B, c : C, d : D, e : E) => F) |\r\n\t                       Lambda5<A,B,C,D,E,F>) : Cell<F> {\r\n        const fn = Lambda5_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => F =\r\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => fn(aa, bb, cc, dd, ee),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply(\r\n                       Cell.apply(\r\n                           Cell.apply<B, (c : C) => (d : D) => (e : E) => F>(cf, b),\r\n                           c),\r\n                       d),\r\n                   e,\r\n                   toSources(Lambda5_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\r\n\t                   fn0 : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) |\r\n\t                         Lambda6<A,B,C,D,E,F,G>) : Cell<G> {\r\n        const fn = Lambda6_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => G =\r\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => fn(aa, bb, cc, dd, ee, ff),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply(\r\n                       Cell.apply(\r\n                           Cell.apply(\r\n                               Cell.apply<B, (c : C) => (d : D) => (e : E) => (f : F) => G>(cf, b),\r\n                               c),\r\n                           d),\r\n                       e),\r\n                   f,\r\n                   toSources(Lambda6_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Apply a value inside a cell to a function inside a cell. This is the\r\n\t * primitive for all function lifting.\r\n\t */\r\n\tstatic apply<A,B>(cf : Cell<(a : A) => B>, ca : Cell<A>, sources? : Source[]) : Cell<B> {\r\n    \treturn Transaction.run(() => {\r\n    \t    const state = new ApplyState<A,B>(),\r\n                out = new StreamWithSend<B>(),\r\n                cf_value = Operational.value(cf),\r\n                ca_value = Operational.value(ca),\r\n                src1 = new Source(\r\n                        cf_value.getVertex__(),\r\n                        () => {\r\n                            return cf_value.listen_(out.getVertex__(), (f : (a : A) => B) => {\r\n                                state.f = f;\r\n                                state.f_present = true;\r\n                                if (state.a_present)\r\n                                    out.send_(state.f(state.a));\r\n                            }, false);\r\n                        }\r\n                    ),\r\n                src2 = new Source(\r\n                        ca_value.getVertex__(),\r\n                        () => {\r\n                            return ca_value.listen_(out.getVertex__(), (a : A) => {\r\n                                state.a = a;\r\n                                state.a_present = true;\r\n                                if (state.f_present)\r\n                                    out.send_(state.f(state.a));\r\n                            }, false);\r\n                        }\r\n                    );\r\n            out.setVertex__(new Vertex(\"apply\", 0,\r\n                [src1, src2].concat(sources ? sources : [])\r\n            ));\r\n            return out.coalesce__((l, r) => r).holdLazy(new Lazy<B>(() =>\r\n                    cf.sampleNoTrans__()(ca.sampleNoTrans__())\r\n                ));\r\n        });\r\n\t}\r\n\r\n\t/**\r\n\t * Unwrap a cell inside another cell to give a time-varying cell implementation.\r\n\t */\r\n    static switchC<A>(cca : Cell<Cell<A>>) : Cell<A> {\r\n\t    return Transaction.run(() => {\r\n            const za = cca.sampleLazy().map((ba : Cell<A>) => ba.sample()),\r\n                out = new StreamWithSend<A>();\r\n            let last_ca : Cell<A> = null;\r\n            const cca_value = Operational.value(cca),\r\n                  src = new Source(\r\n                        cca_value.getVertex__(),\r\n                        () => {\r\n                            let kill2 : () => void = last_ca === null ? null :\r\n                                    Operational.value(last_ca).listen_(out.getVertex__(),\r\n                                        (a : A) => out.send_(a), false);\r\n                            const kill1 = cca_value.listen_(out.getVertex__(), (ca : Cell<A>) => {\r\n                                // Note: If any switch takes place during a transaction, then the\r\n                                // coalesce__() below will always cause a sample to be fetched\r\n                                // from the one we just switched to. So anything from the old input cell\r\n                                // that might have happened during this transaction will be suppressed.\r\n                                last_ca = ca;\r\n                                if (kill2 !== null)\r\n                                    kill2();\r\n                                kill2 = Operational.value(ca).listen_(out.getVertex__(),\r\n                                    (a : A) => out.send_(a), false);\r\n                            }, false);\r\n                            return () => { kill1(); kill2(); };\r\n                        }\r\n                    );\r\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\r\n            return out.coalesce__((l, r) => r).holdLazy(za);\r\n        });\r\n\t}\r\n\r\n\t/**\r\n\t * Unwrap a stream inside a cell to give a time-varying stream implementation.\r\n\t */\r\n\tstatic switchS<A>(csa : Cell<Stream<A>>) : Stream<A> {\r\n\t    return Transaction.run(() => {\r\n            const out = new StreamWithSend<A>(),\r\n                  h2 = (a : A) => {\r\n                          out.send_(a);\r\n                      },\r\n                  src = new Source(\r\n                      csa.getVertex__(),\r\n                      () => {\r\n                          let kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\r\n                          const kill1 = csa.getStream__().listen_(out.getVertex__(), (sa : Stream<A>) => {\r\n                              kill2();\r\n                              kill2 = sa.listen_(out.getVertex__(), h2, true);\r\n                          }, false);\r\n                          return () => { kill1(); kill2(); };\r\n                      }\r\n                  );\r\n\t        out.setVertex__(new Vertex(\"switchS\", 0, [src]));\r\n\t        return out;\r\n\t    });\r\n    }\r\n\r\n\t/**\r\n\t * Listen for updates to the value of this cell. This is the observer pattern. The\r\n\t * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\r\n\t * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\r\n\t * the world of I/O and for FRP.\r\n\t * @param h The handler to execute when there's a new value.\r\n\t *   You should make no assumptions about what thread you are called on, and the\r\n\t *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\r\n\t *   or {@link StreamSink#send(Object)} in the handler.\r\n\t *   An exception will be thrown, because you are not meant to use this to create\r\n\t *   your own primitives.\r\n     */\r\n    listen(h : (a : A) => void) : () => void {\r\n        return Transaction.run(() => {\r\n            return Operational.value(this).listen(h);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Cell satisfies the Monad and Comonad Categories (and hence Functor, Apply, Applicative, and Extend as well)\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n\r\n    //of :: Applicative f => a -> f a\r\n    static 'fantasy-land/of'<A>(a:A):Cell<A> {\r\n      return new Cell<A>(a);\r\n    }\r\n\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    'fantasy-land/map'<B>(f : ((a : A) => B)) : Cell<B> {\r\n      return this.map(f);\r\n    }\r\n\r\n    //ap :: Apply f => f a ~> f (a -> b) -> f b\r\n    'fantasy-land/ap'<B>(cf: Cell<(a : A) => B>):Cell<B> {\r\n        return Cell.apply(cf, this);\r\n    }\r\n\r\n    //chain :: Chain m => m a ~> (a -> m b) -> m b\r\n    'fantasy-land/chain'<B>(f: ((a:A) => Cell<B>)):Cell<B> {\r\n      return Cell.switchC(this.map(f));\r\n    }\r\n\r\n    //extend :: Extend w => w a ~> (w a -> b) -> w b\r\n    'fantasy-land/extend'<B>(f: ((a:Cell<A>) => B)):Cell<B> {\r\n      return new Cell<B>(f(this));\r\n    }\r\n\r\n    //extract :: Comonad w => w a ~> () -> a\r\n    'fantasy-land/extract'():A {\r\n      return this.sample();\r\n    }\r\n}\r\n","import { Source, Vertex } from \"./Vertex\";\r\n\r\nexport class Listener<A> {\r\n    constructor(h : (a : A) => void, target : Vertex) {\r\n        this.h = h;\r\n        this.target = target;\r\n    }\r\n    h : (a : A) => void;\r\n    target : Vertex;\r\n}\r\n","import { Lazy } from \"./Lazy\";\r\nimport { Cell } from \"./Cell\";\r\nimport { Stream } from \"./Stream\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\nexport class LazyCell<A> extends Cell<A> {\r\n    constructor(lazyInitValue : Lazy<A>, str? : Stream<A>) {\r\n        super(null, null);\r\n        Transaction.run(() => {\r\n            if (str)\r\n                this.setStream(str);\r\n            this.lazyInitValue = lazyInitValue;\r\n        });\r\n    }\r\n\r\n    sampleNoTrans__() : A {  // Override\r\n        if (this.value == null && this.lazyInitValue != null) {\r\n            this.value = this.lazyInitValue.get();\r\n            this.lazyInitValue = null;\r\n        }\r\n        return this.value;\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\r\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\r\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\r\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\r\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\r\n         toSources } from \"./Lambda\";\r\nimport { Source, Vertex } from \"./Vertex\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { CoalesceHandler } from \"./CoalesceHandler\";\r\nimport { Cell } from \"./Cell\";\r\n//import { StreamLoop } from \"./StreamLoop\";\r\nimport { Listener } from \"./Listener\";\r\nimport { Tuple2 } from \"./Tuple2\";\r\nimport { Lazy } from \"./Lazy\";\r\nimport { LazyCell } from \"./LazyCell\";\r\nimport * as Z from \"sanctuary-type-classes\";\r\n\r\nexport class Stream<A> {\r\n    constructor(vertex? : Vertex) {\r\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\r\n    }\r\n\r\n    getVertex__() : Vertex {\r\n        return this.vertex;\r\n    }\r\n\r\n    protected vertex : Vertex;\r\n    protected listeners : Array<Listener<A>> = [];\r\n    protected firings : A[] = [];\r\n\r\n    /**\r\n     * Transform the stream's event values according to the supplied function, so the returned\r\n     * Stream's event values reflect the value of the function applied to the input\r\n     * Stream's event values.\r\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Stream<B> {\r\n        const out = new StreamWithSend<B>(null);\r\n        const ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"map\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a));\r\n                        }, false);\r\n                    }\r\n                )\r\n            ].concat(toSources(Lambda1_deps(f)))\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Transform the stream's event values into the specified constant value.\r\n     * @param b Constant value.\r\n     */\r\n    mapTo<B>(b : B) : Stream<B> {\r\n        const out = new StreamWithSend<B>(null);\r\n        out.vertex = new Vertex(\"mapTo\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(b);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\r\n     * in the simultaneous case.\r\n     * <p>\r\n     * In the case where two events are simultaneous (i.e. both\r\n     * within the same transaction), the event from <em>this</em> will take precedence, and\r\n     * the event from <em>s</em> will be dropped.\r\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\r\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\r\n     * <p>\r\n     * The name orElse() is used instead of merge() to make it really clear that care should\r\n     * be taken, because events can be dropped.\r\n     */\r\n    orElse(s : Stream<A>) : Stream<A> {\r\n        return this.merge(s, (left : A, right: A) => {\r\n            return left;\r\n        });\r\n    }\r\n\r\n    private merge_(s : Stream<A>) : Stream<A> {\r\n        const out = new StreamWithSend<A>();\r\n        const left = new Vertex(\"merge\", 0, []);\r\n        left.sources.push(new Source(this.vertex, () => {\r\n            return this.listen_(left, (a : A) => {\r\n                    out.send_(a);\r\n                }, false);\r\n        }));\r\n        out.vertex.sources = out.vertex.sources.concat([\r\n                new Source(\r\n                    left,\r\n                    () => {\r\n                        left.register(out.vertex);\r\n                        return () => { left.deregister(out.vertex); }\r\n                    }\r\n                ),\r\n                new Source(\r\n                    s.vertex,\r\n                    () => {\r\n                        return s.listen_(out.vertex, (a : A) => {\r\n                            out.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]);\r\n        return out;\r\n    }\r\n\r\n    coalesce__(f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {  // TO DO figure out how to hide this\r\n        const out = new StreamWithSend<A>();\r\n        const coalescer = new CoalesceHandler<A>(f, out);\r\n        out.vertex.sources = out.vertex.sources.concat([\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            coalescer.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]).concat(toSources(Lambda2_deps(f)));\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Merge two streams of the same type into one, so that events on either input appear\r\n     * on the returned stream.\r\n     * <p>\r\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\r\n     * occurring in the same transaction), combine them into one using the specified combining function\r\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\r\n     * The event from <em>this</em> will appear at the left input of the combining function, and\r\n     * the event from <em>s</em> will appear at the right.\r\n     * @param f Function to combine the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    merge(s : Stream<A>, f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {\r\n        return Transaction.run<Stream<A>>(() => {\r\n            return this.merge_(s).coalesce__(f);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a stream that only outputs events for which the predicate returns true.\r\n     */\r\n    filter(f : ((a : A) => boolean) | Lambda1<A,boolean>) : Stream<A> {\r\n        const out = new StreamWithSend<A>(null);\r\n        const ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"filter\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            if (ff(a))\r\n                                out.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ].concat(toSources(Lambda1_deps(f)))\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Return a stream that only outputs events that have present\r\n     * values, discarding null values.\r\n     */\r\n    filterNotNull() : Stream<A> {\r\n        const out = new StreamWithSend<A>(null);\r\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            if (a !== null)\r\n                                out.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Return a stream that only outputs events from the input stream\r\n     * when the specified cell's value is true.\r\n     */\r\n    gate(c : Cell<boolean>) : Stream<A> {\r\n        return this.snapshot(c, (a : A, pred : boolean) => {\r\n            return pred ? a : null;\r\n        }).filterNotNull();\r\n    }\r\n\r\n\t/**\r\n\t * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\r\n\t * at the time of the event firing, ignoring the stream's value.\r\n\t */\r\n\tsnapshot1<B>(c : Cell<B>) : Stream<B> {\r\n        const out = new StreamWithSend<B>(null);\r\n        out.vertex = new Vertex(\"snapshot1\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(c.sampleNoTrans__());\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(c.getVertex__(), null)\r\n            ]\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cell at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot<B,C>(b : Cell<B>, f_ : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Stream<C>\r\n\t{\r\n        const out = new StreamWithSend<C>(null);\r\n        const ff = Lambda2_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null)\r\n            ].concat(toSources(Lambda2_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot3<B,C,D>(b : Cell<B>, c : Cell<C>, f_ : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : Stream<D>\r\n\t{\r\n        const out = new StreamWithSend<D>(null);\r\n        const ff = Lambda3_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null)\r\n            ].concat(toSources(Lambda3_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\r\n\t    f_ : ((a : A, b : B, c : C, d : D) => E) | Lambda4<A,B,C,D,E>) : Stream<E>\r\n\t{\r\n        const out = new StreamWithSend<E>(null);\r\n        const ff = Lambda4_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\r\n                                            d.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null),\r\n                new Source(d.getVertex__(), null)\r\n            ].concat(toSources(Lambda4_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\r\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E) => F) | Lambda5<A,B,C,D,E,F>) : Stream<F>\r\n\t{\r\n        const out = new StreamWithSend<F>(null);\r\n        const ff = Lambda5_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\r\n                                            d.sampleNoTrans__(), e.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null),\r\n                new Source(d.getVertex__(), null),\r\n                new Source(e.getVertex__(), null)\r\n            ].concat(toSources(Lambda5_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\r\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) | Lambda6<A,B,C,D,E,F,G>) : Stream<G>\r\n\t{\r\n        const out = new StreamWithSend<G>(null);\r\n        const ff = Lambda6_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\r\n                                            d.sampleNoTrans__(), e.sampleNoTrans__(),\r\n                                            f.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null),\r\n                new Source(d.getVertex__(), null),\r\n                new Source(e.getVertex__(), null),\r\n                new Source(f.getVertex__(), null)\r\n            ].concat(toSources(Lambda6_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a {@link Cell} with the specified initial value, that is updated\r\n     * by this stream's event values.\r\n     * <p>\r\n     * There is an implicit delay: State updates caused by event firings don't become\r\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\r\n     * until the following transaction. To put this another way,\r\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\r\n     * any state changes from the current transaction.\r\n     */\r\n    hold(initValue : A) : Cell<A> {\r\n        return new Cell<A>(initValue, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\r\n\t */\r\n\tholdLazy(initValue : Lazy<A>) : Cell<A> {\r\n\t    return new LazyCell<A>(initValue, this);\r\n\t}\r\n\r\n    /**\r\n     * Transform an event with a generalized state loop (a Mealy machine). The function\r\n     * is passed the input and the old state and returns the new state and output value.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    collect<B,S>(initState : S, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\r\n        return this.collectLazy(new Lazy<S>(() => { return initState; }), f);\r\n    }\r\n\r\n    /**\r\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    collectLazy<B,S>(initState : Lazy<S>, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\r\n        const ea = this;\r\n        return Transaction.run(() => {\r\n            const es = new StreamLoop<S>(),\r\n                s = es.holdLazy(initState),\r\n                ebs = ea.snapshot(s, f),\r\n                eb = ebs.map((bs : Tuple2<B,S>) => { return bs.a; }),\r\n                es_out = ebs.map((bs : Tuple2<B,S>) => { return bs.b; });\r\n            es.loop(es_out);\r\n            return eb;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Accumulate on input event, outputting the new state each time.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    accum<S>(initState : S, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\r\n        return this.accumLazy(new Lazy<S>(() => { return initState; }), f);\r\n    }\r\n\r\n    /**\r\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    accumLazy<S>(initState : Lazy<S>, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\r\n        const ea = this;\r\n        return Transaction.run(() => {\r\n            const es = new StreamLoop<S>(),\r\n                s = es.holdLazy(initState),\r\n                es_out = ea.snapshot(s, f);\r\n            es.loop(es_out);\r\n            return es_out.holdLazy(initState);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a stream that outputs only one value: the next event of the\r\n     * input stream, starting from the transaction in which once() was invoked.\r\n     */\r\n    once() : Stream<A> {\r\n    /*\r\n        return Transaction.run(() => {\r\n            const ev = this,\r\n                out = new StreamWithSend<A>();\r\n            let la : () => void = null;\r\n            la = ev.listen_(out.vertex, (a : A) => {\r\n                if (la !== null) {\r\n                    out.send_(a);\r\n                    la();\r\n                    la = null;\r\n                }\r\n            }, false);\r\n            return out;\r\n        });\r\n        */\r\n        // We can't use the implementation above, beacuse deregistering\r\n        // listeners triggers the exception\r\n        // \"send() was invoked before listeners were registered\"\r\n        // We can revisit this another time. For now we will use the less\r\n        // efficient implementation below.\r\n        const me = this;\r\n        return Transaction.run(() => me.gate(me.mapTo(false).hold(true)));\r\n    }\r\n\r\n    listen(h : (a : A) => void) : () => void {\r\n        return Transaction.run<() => void>(() => {\r\n            return this.listen_(Vertex.NULL, h, false);\r\n        });\r\n    }\r\n\r\n    listen_(target : Vertex,\r\n            h : (a : A) => void,\r\n            suppressEarlierFirings : boolean) : () => void {\r\n        if (this.vertex.register(target))\r\n            Transaction.currentTransaction.requestRegen();\r\n        const listener = new Listener<A>(h, target);\r\n        this.listeners.push(listener);\r\n        if (!suppressEarlierFirings && this.firings.length != 0) {\r\n            const firings = this.firings.slice();\r\n            Transaction.currentTransaction.prioritized(target, () => {\r\n                // Anything sent already in this transaction must be sent now so that\r\n                // there's no order dependency between send and listen.\r\n                for (let i = 0; i < firings.length; i++)\r\n                    h(firings[i]);\r\n            });\r\n        }\r\n        return () => {\r\n            let removed = false;\r\n            for (let i = 0; i < this.listeners.length; i++) {\r\n                if (this.listeners[i] == listener) {\r\n                    this.listeners.splice(i, 1);\r\n                    removed = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (removed)\r\n                this.vertex.deregister(target);\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Stream satisfies the Functor and Monoid Categories (and hence Semigroup)\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    'fantasy-land/map'<B>(f : ((a : A) => B)) : Stream<B> {\r\n      return this.map(f);\r\n    }\r\n\r\n    //concat :: Semigroup a => a ~> a -> a\r\n    'fantasy-land/concat'(a:Stream<A>) : Stream<A> {\r\n      return this.merge(a, (left:any, right) => {\r\n        return (Z.Semigroup.test(left)) ? Z.concat(left, right) : left;\r\n      });\r\n    }\r\n\r\n    //empty :: Monoid m => () -> m\r\n    'fantasy-land/empty'() : Stream<A> {\r\n      return new Stream<A>();\r\n    }\r\n}\r\n\r\nexport class StreamWithSend<A> extends Stream<A> {\r\n    constructor(vertex? : Vertex) {\r\n        super(vertex);\r\n    }\r\n\r\n    setVertex__(vertex : Vertex) {  // TO DO figure out how to hide this\r\n        this.vertex = vertex;\r\n    }\r\n\r\n    send_(a : A) : void {\r\n        // We throw this error if we send into FRP logic that has been constructed\r\n        // but nothing is listening to it yet. We need to do it this way because\r\n        // it's the only way to manage memory in a language with no finalizers.\r\n        if (this.vertex.refCount() == 0)\r\n            throw new Error(\"send() was invoked before listeners were registered\");\r\n\t\tif (this.firings.length == 0)\r\n\t\t\tTransaction.currentTransaction.last(() => {\r\n\t\t\t    this.firings = [];\r\n            });\r\n\t\tthis.firings.push(a);\r\n\t\tconst listeners = this.listeners.slice();\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            const h = listeners[i].h;\r\n            Transaction.currentTransaction.prioritized(listeners[i].target, () => {\r\n                Transaction.currentTransaction.inCallback++;\r\n                try {\r\n                    h(a);\r\n                    Transaction.currentTransaction.inCallback--;\r\n                }\r\n                catch (err) {\r\n                    Transaction.currentTransaction.inCallback--;\r\n                    throw err;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\r\n */\r\nexport class StreamLoop<A> extends StreamWithSend<A> {\r\n    assigned__ : boolean = false;  // to do: Figure out how to hide this\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.vertex.name = \"StreamLoop\";\r\n    \tif (Transaction.currentTransaction === null)\r\n    \t    throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\r\n    }\r\n\r\n    /**\r\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    loop(sa_out : Stream<A>) : void {\r\n        if (this.assigned__)\r\n            throw new Error(\"StreamLoop looped more than once\");\r\n        this.assigned__ = true;\r\n        this.vertex.addSource(\r\n            new Source(\r\n                sa_out.getVertex__(),\r\n                () => {\r\n                    return sa_out.listen_(this.vertex, (a : A) => {\r\n                        this.send_(a);\r\n                    }, false);\r\n                }\r\n            )\r\n        );\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\r\nimport { StreamWithSend } from \"./Stream\";\r\nimport { CoalesceHandler } from \"./CoalesceHandler\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\n/**\r\n * A stream that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\r\n * should downcast to {@link Stream}.\r\n */\r\nexport class StreamSink<A> extends StreamWithSend<A> {\r\n    constructor(f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\r\n        super();\r\n        if (!f)\r\n            f = <(l : A, r : A) => A>((l : A, r : A) => {\r\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\r\n            });\r\n        this.coalescer = new CoalesceHandler<A>(f, this);\r\n    }\r\n\r\n    private coalescer : CoalesceHandler<A>;\r\n\r\n    send(a : A) : void {\r\n        Transaction.run<void>(\r\n            () => {\r\n                if (Transaction.currentTransaction.inCallback > 0)\r\n                    throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\r\n                this.coalescer.send_(a);\r\n            }\r\n        )\r\n    }\r\n}\r\n","import { Cell } from \"./Cell\";\r\nimport { Lazy } from \"./Lazy\";\r\nimport { LazyCell } from \"./LazyCell\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { StreamLoop } from \"./Stream\";\r\n\r\n/**\r\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\r\n */\r\nexport class CellLoop<A> extends LazyCell<A> {\r\n    constructor() {\r\n    \tsuper(null, new StreamLoop<A>());\r\n    }\r\n\r\n    /**\r\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    loop(a_out : Cell<A>) : void {\r\n        const me = this;\r\n        Transaction.run(() => {\r\n            (<StreamLoop<A>>me.getStream__()).loop(a_out.getStream__());\r\n            me.lazyInitValue = a_out.sampleLazy();\r\n        });\r\n    }\r\n\r\n    sampleNoTrans__() : A\r\n    {\r\n        if (!(<StreamLoop<A>>this.getStream__()).assigned__)\r\n            throw new Error(\"CellLoop sampled before it was looped\");\r\n        return super.sampleNoTrans__();\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\r\nimport { Cell } from \"./Cell\";\r\nimport { StreamSink } from \"./StreamSink\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\n/**\r\n * A cell that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\r\n * should downcast to {@link Cell}.\r\n */\r\nexport class CellSink<A> extends Cell<A> {\r\n    /**\r\n     * Construct a writable cell with the specified initial value. If multiple values are\r\n     * sent in the same transaction, the specified function is used to combine them.\r\n     *\r\n     * If the function is not supplied, then an exception will be thrown in this case.\r\n     */\r\n    constructor(initValue : A, f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\r\n    \tsuper(initValue, new StreamSink<A>(f));\r\n    }\r\n\r\n    /**\r\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\r\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\r\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\r\n     * You are not meant to use this to define your own primitives.\r\n     * @param a Value to push into the cell.\r\n     */\r\n    send(a : A) : void {\r\n        (<StreamSink<A>>this.getStream__()).send(a);\r\n    }\r\n}\r\n","export class Tuple2<A,B> {\r\n    constructor(a : A, b : B) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n    a : A;\r\n    b : B;\r\n}\r\n","import { Vertex, Source } from \"./Vertex\";\r\nimport * as Collections from 'typescript-collections';\r\nimport { Stream, StreamWithSend } from \"./Stream\";\r\nimport { StreamSink } from \"./StreamSink\";\r\nimport { Cell } from \"./Cell\";\r\nimport { CellSink } from \"./CellSink\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\n/**\r\n * An interface for implementations of FRP timer systems.\r\n */\r\nexport abstract class TimerSystemImpl {\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    abstract setTimer(t : number, callback : () => void) : () => void;\r\n\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    abstract now() : number;\r\n}\r\n\r\nlet nextSeq : number = 0;\r\n\r\nclass Event {\r\n    constructor(t : number, sAlarm : StreamWithSend<number>) {\r\n        this.t = t;\r\n        this.sAlarm = sAlarm;\r\n        this.seq = ++nextSeq;\r\n    }\r\n    t : number;\r\n    sAlarm : StreamWithSend<number>;\r\n    seq : number;  // Used to guarantee uniqueness\r\n}\r\n\r\nexport class TimerSystem {\r\n    constructor(impl : TimerSystemImpl) {\r\n        Transaction.run(() => {\r\n            this.impl = impl;\r\n            this.tMinimum = 0;\r\n            const timeSnk = new CellSink<number>(impl.now());\r\n            this.time = timeSnk;\r\n            // A dummy listener to time to keep it alive even when there are no other listeners.\r\n            this.time.listen((t : number) => { });\r\n            Transaction.onStart(() => {\r\n                // Ensure the time is always increasing from the FRP's point of view.\r\n                const t = this.tMinimum = Math.max(this.tMinimum, impl.now());\r\n                // Pop and execute all events earlier than or equal to t (the current time).\r\n                while (true) {\r\n                    let ev : Event = null;\r\n                    if (!this.eventQueue.isEmpty()) {\r\n                        let mev = this.eventQueue.minimum();\r\n                        if (mev.t <= t) {\r\n                            ev = mev;\r\n                            // TO DO: Detect infinite loops!\r\n                        }\r\n                    }\r\n                    if (ev != null) {\r\n                        timeSnk.send(ev.t);\r\n                        Transaction.run(() => ev.sAlarm.send_(ev.t));\r\n                    }\r\n                    else\r\n                        break;\r\n                }\r\n                timeSnk.send(t);\r\n            });\r\n        });\r\n    }\r\n\r\n    private impl : TimerSystemImpl;\r\n    private tMinimum : number;  // A guard to allow us to guarantee that the time as\r\n                                // seen by the FRP is always increasing.\r\n\r\n    /**\r\n     * A cell giving the current clock time.\r\n     */\r\n    time : Cell<number>;\r\n\r\n    private eventQueue : Collections.BSTree<Event> = new Collections.BSTree<Event>((a, b) => {\r\n        if (a.t < b.t) return -1;\r\n        if (a.t > b.t) return 1;\r\n        if (a.seq < b.seq) return -1;\r\n        if (a.seq > b.seq) return 1;\r\n        return 0;\r\n    });\r\n\r\n    /**\r\n     * A timer that fires at the specified time, which can be null, meaning\r\n     * that the alarm is not set.\r\n     */\r\n    at(tAlarm : Cell<number>) : Stream<number> {\r\n        let current : Event = null,\r\n            cancelCurrent : () => void = null,\r\n            active : boolean = false,\r\n            tAl : number = null,\r\n            sampled : boolean = false;\r\n        const sAlarm = new StreamWithSend<number>(null),\r\n            updateTimer = () => {\r\n                if (cancelCurrent !== null) {\r\n                    cancelCurrent();\r\n                    this.eventQueue.remove(current);\r\n                }\r\n                cancelCurrent = null;\r\n                current = null;\r\n                if (active) {\r\n                    if (!sampled) {\r\n                        sampled = true;\r\n                        tAl = tAlarm.sampleNoTrans__();\r\n                    }\r\n                    if (tAl !== null) {\r\n                        current = new Event(tAl, sAlarm);\r\n                        this.eventQueue.add(current);\r\n                        cancelCurrent = this.impl.setTimer(tAl, () => {\r\n                                    // Correction to ensure the clock time appears to be >= the\r\n                                    // alarm time. It can be a few milliseconds early, and\r\n                                    // this breaks things otherwise, because it doesn't think\r\n                                    // it's time to fire the alarm yet.\r\n                                    this.tMinimum = Math.max(this.tMinimum, tAl);\r\n                                    // Open and close a transaction to trigger queued\r\n                                    // events to run.\r\n                                    Transaction.run(() => {});\r\n                                });\r\n                    }\r\n                }\r\n            };\r\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\r\n                new Source(\r\n                    tAlarm.getVertex__(),\r\n                    () => {\r\n                        active = true;\r\n                        sampled = false;\r\n                        Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\r\n                        const kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), (oAlarm : number) => {\r\n                            tAl = oAlarm;\r\n                            sampled = true;\r\n                            updateTimer();\r\n                        }, false);\r\n                        return () => {\r\n                            active = false;\r\n                            updateTimer();\r\n                            kill();\r\n                        };\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return sAlarm;\r\n    }\r\n}\r\n\r\n","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\r\n\r\n/**\r\n * A timer system implementation using seconds as the time unit.\r\n */\r\nexport class SecondsTimerSystem extends TimerSystem {\r\n    constructor() {\r\n        super(new SecondsTimerSystemImpl());\r\n    }\r\n}\r\n\r\nclass SecondsTimerSystemImpl extends TimerSystemImpl {\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    setTimer(t : number, callback : () => void) : () => void\r\n    {\r\n        let timeout = setTimeout(callback, Math.max((t - this.now()) * 1000, 0));\r\n        return () => { clearTimeout(timeout); }\r\n    }\r\n\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    now() : number\r\n    {\r\n        return Date.now() * 0.001;\r\n    }\r\n}\r\n","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\r\n\r\n/**\r\n * A timer system implementation using milliseconds as the time unit.\r\n */\r\nexport class MillisecondsTimerSystem extends TimerSystem {\r\n    constructor() {\r\n        super(new MillisecondsTimerSystemImpl());\r\n    }\r\n}\r\n\r\nclass MillisecondsTimerSystemImpl extends TimerSystemImpl {\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    setTimer(t : number, callback : () => void) : () => void\r\n    {\r\n        let timeout = setTimeout(callback, Math.max(t - this.now(), 0));\r\n        return () => { clearTimeout(timeout); }\r\n    }\r\n\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    now() : number\r\n    {\r\n        return Date.now();\r\n    }\r\n}\r\n","import { Stream, StreamWithSend } from \"./Stream\";\r\nimport { Vertex, Source } from \"./Vertex\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\nexport class IOAction {\r\n    /*!\r\n     * Convert a function that performs asynchronous I/O taking input A\r\n     * and returning a value of type B into an I/O action of type\r\n     * (sa : Stream<A>) => Stream<B>\r\n     */\r\n    static fromAsync<A,B>(performIO : (a : A, result : (b : B) => void) => void)\r\n            : (sa : Stream<A>) => Stream<B> {\r\n        return (sa : Stream<A>) => {\r\n            const out = new StreamWithSend<B>(null);\r\n            out.setVertex__(new Vertex(\"map\", 0, [\r\n                    new Source(\r\n                        sa.getVertex__(),\r\n                        () => {\r\n                            return sa.listen_(out.getVertex__(), (a : A) => {\r\n                                performIO(a, (b : B) => {\r\n                                    Transaction.run(() => {\r\n                                        out.send_(b);\r\n                                    });\r\n                                });\r\n                            }, false);\r\n                        }\r\n                    )\r\n                ]\r\n            ));\r\n            return out;\r\n        }\r\n    }\r\n}\r\n"],"names":["totalRegistrations","Color","origin","register_","this","Error","Source","target","registered","deregister_","increment","_this","decrement","roots","nextID","name","rank","sources","black","id","Vertex","targets","length","collectCycles","anyChanged","refCount","i","register","push","childrn","ensureBiggerThan","matched","splice","deregister","src","limit","visited","colStr","color","gray","white","purple","str","refCountAdj","chs","children","referrer","incRefCount","decRefCount","release","possibleRoots","buffered","free","markRoots","scanRoots","collectRoots","newRoots","markGray","scan","collectWhite","scanBlack","f","deps","Lambda1","Lambda2","Lambda3","Lambda4","Lambda5","Lambda6","ss","dep","getVertex__","action","seq","Entry","nextSeq","toString","Collections.PriorityQueue","a","b","Collections.Set","Transaction","toRegen","e","prioritizedQ","enqueue","entries","add","h","sampleQ","lastQ","childIx","postQ","existing","neu","clear","es","toArray","currentTransaction","checkRegen","isEmpty","dequeue","remove","sq","parent_1","close","err","r","onStartHooks","transWas","runningOnStartHooks","out","Lambda2_toFunction","concat","toSources","Lambda2_deps","accumValid","CoalesceHandler","accum","prioritized","send_","Lazy","c","d","Unit","Operational","getStream__","run","sSpark","StreamWithSend","UNIT","sInitial","snapshot1","updates","orElse","s","split","map","setVertex__","listen_","as","post","cell","initValue","value","setStream","Stream","vertex","Cell","me","valueUpdate","last","lazyInitValue","NULL","sampleNoTrans__","sampleLazyNoTrans__","LazySample","sample","hasValue","holdLazy","sampleLazy","Lambda1_toFunction","fn0","fn","cf","aa","bb","apply","Lambda3_toFunction","cc","Lambda3_deps","Lambda4_toFunction","dd","Lambda4_deps","Lambda5_toFunction","ee","Lambda5_deps","Lambda6_toFunction","ff","Lambda6_deps","ca","state","ApplyState","cf_value","ca_value","src1","f_present","a_present","src2","coalesce__","l","cca","za","ba","last_ca","cca_value","kill2","kill1","csa","h2","sa","listen","switchC","_super","tslib_1.__extends","LazyCell","get","Lambda1_deps","merge","left","right","coalescer","merge_","snapshot","pred","filterNotNull","f_","initState","collectLazy","ea","StreamLoop","ebs","eb","bs","es_out","loop","accumLazy","gate","mapTo","hold","suppressEarlierFirings","requestRegen","listener","Listener","listeners","firings","firings_1","slice","removed","Z.Semigroup","test","Z.concat","inCallback","sa_out","assigned__","addSource","StreamSink","CellLoop","a_out","CellSink","send","t","sAlarm","impl","Collections.BSTree","tMinimum","timeSnk","now","time","onStart","Math","max","ev","eventQueue","mev","minimum","TimerSystem","tAlarm","current","cancelCurrent","active","tAl","sampled","updateTimer","Event","setTimer","kill","oAlarm","SecondsTimerSystemImpl","callback","timeout","setTimeout","clearTimeout","Date","TimerSystemImpl","MillisecondsTimerSystemImpl","IOAction","performIO"],"mappings":"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"}